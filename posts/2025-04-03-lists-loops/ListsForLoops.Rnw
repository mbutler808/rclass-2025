\documentclass[letterpaper]{article}
\SweaveOpts{eps=FALSE}
\SweaveOpts{keep.source=TRUE}

\usepackage{paralist}
\usepackage{amsmath}
\usepackage{authblk}
\usepackage{graphicx}
\usepackage{color}
\usepackage{natbib}
\usepackage{url}
\usepackage[colorlinks=true,urlcolor=blue, citecolor=red]{hyperref}
\usepackage{fullpage}
\newcommand{\degree}{\ensuremath{^\circ}}

%\setlength{\textwidth}{7.25in}
%\setlength{\textheight}{8.75in}
%\setlength{\evensidemargin}{-.5in}
%\setlength{\oddsidemargin}{-.5in}
%\setlength{\topmargin}{-.35in}
%\setlength{\parskip}{.1in}
%\setlength{\parindent}{0.0in}

\newcommand{\code}{\texttt}

\title{Lists and For Loops}
\author{Marguerite A. Butler}

\begin{document}
\maketitle

%\chapter{Lists and For Loops}

\section{Lists}

Lists in R are vectors like any other vector, but more flexible in that elements of a list can have different data types. This has at least three consequences. First any operation that you can perform on a vector can also be done on a list. Second, any types of objects can be organized together into a list, which are very convenient for things like model fits, where you may want to store the model formula, the data, the coefficients, any likelihood values, and any other relevant information together into one data object. Third, you can use lists as containers for containers, which can be nested indefinitely. 

The elements of lists can be named, either upon creation, or using the \code{names()} function:
<<echo=F>>=
options(width=50)
@

<<>>=
applicant <- list(fullname="Mickey Mouse", address="123 Main St.",  state="CA")
applicant
names(applicant) <- c("fullname", "address", "state")
applicant
@

We can also use all of the standard functions that work on vectors, such as the combine function:

<<>>=
applicant <- c(applicant, list(scores=matrix(1:10, nrow=2)))
applicant
@

If we had multiple applicants, we could put them all together in a list of lists. 


\subsection{Accessing list elements}

List elements can be accessed with the usual operators for vectors:
\begin{description}
\item[\$] If the list is named
\item[[]] By number or name of the list element with single brackets. Returns a list. Can use a vector of indices or names.
\item[[[]]] By number or name with double brackets. Returns the element inside the list slot. Must be a single index or name. 
\end{description}


<<>>=
applicant$fullname
applicant[1]   ## returns a list of length one
applicant[[1]]  ## returns the object within applicant[1]
@

Single brackets return lists, and can select multiple elements:

<<>>=
applicant[1:2]
applicant[c("fullname", "address")]  
@

Double brackets return the element within the list slot, but only one:
<<>>=
applicant[[1]]
applicant[["fullname"]]
@
<<echo=TRUE, eval=FALSE>>=
applicant[[1:2]]  ## cannot subset [[]] with more than one index
@
<<echo=FALSE, eval=TRUE, results=verbatim>>=
try_out <- try(applicant[[1:2]]) 
cat(try_out)
@

Exclusion index:
<<>>=
applicant
applicant[-3]
@

Accessing elements within a matrix in a list:

<<>>=
applicant[4]
applicant[[4]][2,1]  # Take the scores matrix, and grab row 2, column 1.
applicant[[4]][,3]  # Take the scores matrix, and grab all of column 3.
@

\subsection{For loops} 

Because of the flexibility of lists, they are useful containers for the output of loops or other repeated operations on data. What is a loop you may ask? It is a set of code that you want to execute repeatedly.  For example, you may have a large number of datasets that you want to perform the same set of operations on. 

The easiest type of loop to understand is the \code{for} loop. It is a counted loop, or repeated a fixed number of times. You may be familiar with for loops (or for-next loops) from other computing languages. In R the for loop operates over a vector, once for each element of the vector. The syntax is:

<<eval=F>>=
for (var in seq) expr
@

Where \code{var} is a variable which takes on values of the vector \code{seq} and evaluates a block of code \code{expr}. The loop is evaluated once for each value of \code{seq}.  If we need \code{expr} to span more than one line, we can do this by enclosing the loop with \code{{}} (even if it`s only one line it`s often nice for readability).
<<>>=
for (i in 1:3) { 
   print(paste("This is a for loop", i))
}   
@

It is traditional to use \code{i, j, or k} as the variable to remember that it`s a counting index, but it is often convenient to use names that are meaningful to understand the code. For example, in the context of our earlier example, it might be helpful to iterate over each applicant in our applicant list:

<<eval=F>>=
for (applicant in applicant_list) expr
@

\subsection{Saving loop output to lists} 

Often we want to save the result or output of the code to a list. But we don`t want to create a list with each iteration of the loop, we just want to fill the list element or add on to the list. So in order to do this, we need to create the list \textbf{outside} of the loop and then modify it \textbf{inside} the loop. 

One strategy is to fill the list element by element using the counter \code{i} (note that we don`t have to tell R how long the list is when we create it. We can just make an empty list, R will just keep adding to \code{mylist}): 
<<>>=
mylist <- vector("list")   ## creates a null (empty) list
mylist
for (i in 1:4) {
   mylist[i] <- list(data.frame(x=rnorm(3), y=rnorm(3)))  ## why does this have to be a list object?
}
mylist
@

This code does the same thing, but uses the \code{c()} function to add on to \code{mylist} (what happens when you add on to a null list?):

<<>>=
mylist <- vector("list")   ## creates a null (empty) list
for (i in 1:4) {
   mylist <- c(mylist, list(data.frame(x=rnorm(3), y=rnorm(3))))
}
mylist
@

\subsection{Reshaping lists}

You often want to reshape list output in scientific programming. For example, you may fit models many times on many permutations of your data, for example, and you want to flatten your list and make a dataframe.  When you know that your output is regular, it is often convenient to use the \code{unlist()} function.  Unlist will also work on dataframes, because you know, dataframes are lists of vectors all of the same length.

<<>>=
lm.out <- lm( mylist[[1]]$x  ~ mylist[[1]]$y )  ## calculate a linear regression on dataframe 1 x as a function of y
aov.out <- anova(lm.out)   ## run anova, save to aov.out
aov.out
unlist(aov.out)
@


\subsection{Exercises}

\begin{enumerate}
\item Take mylist above and name its elements (the dataframes).  
\item Write another \code{for} loop to return the maximum value of x and y in each dataframe. How can you make the code flexible to make it work if mylist has a different length?
\item Write a \code{for} loop to loop over \code{mylist}. Within this loop, for each dataset compute an anova on \code{x ~ y}, \code{unlist} the anova output, and add as a row to a final dataframe. 

\end{enumerate}


\end{document}
