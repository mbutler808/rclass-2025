---
title: "Introduction to OU Models"
author:
  - name: Marguerite Butler
    url: https://butlerlab.org
    affiliation: School of Life Sciences, University of Hawaii
    affiliation_url: https://manoa.hawaii.edu/lifesciences/
description: "Comparative analyses with Ornstein-Uhlenbeck models"
date: 2023-04-25
categories: [module 8, week 15, comparative analysis, phylogenetic trees, Ornstein Uhlenbeck, Brownian motion]
bibliography: ../refs.bib
---

# Learning objectives

::: callout-note
# Learning Objectives
__Goals:__
-  Approaches for adaptive evolution (`ouch`, `slouch`, others)
-  Model-based vs statistical approaches

__Concepts:__
-  Model comparison tools in R
-  Process-based models
:::

# Introduction to OU Models

## The OU Model for Comparative Analysis

A Brownian motion process can be described using the following differential equation:

$$
  dX(t) = \sigma\,dB(t).
$${#eq:bm}

If we imagine the phenotype $X$ as changing through time $t$, this equation says that in a small increment of time, the change will be proportional to the parameter $\sigma$. Here, $dB(t)$ is a sample from a Brownian (white noise) process. 

A small step towards reality is the OU Process:

$${#eq:basic_ou}
  dX(t) = \alpha\,(\theta - X(t))\,dt + \sigma\,dB(t).
$$

Eq.~\@ref(eq:basic_ou) expresses the amount of change in character $X$ over the course of a small increment of time: specifically, $dX(t)$ is the infinitesimal change in the character $X$ over the infinitesimal interval from time $t$ to time $t+dt$. The term $dB(t)$ is _white noise_; that is, the random variables $dB(t)$ are independent and identically-distributed normal random variables, each with mean zero and variance $dt$.  The parameter $\alpha$ measures the strength of selection.  When $\alpha = 0$, the deterministic part of the OU model drops out and @eq:basic_ou collapses to the familiar BM model of pure drift,

## `ouch` package

See `ouch` lecture.

Good starting points available in package `ouch`:
- `?bimac` help page for *Bimaculatus* character displacement dataset   
- `example(bimac)`  example of bimac analysis
- `?anolis.ssd` help page for *Anolis* sexual size dimorphism dataset


`ouch` is a package designed to test adaptive hypotheses using variations of the OU process, including BM [@Butler:2004,@King:2022]. OUCH implements a model that fits _alpha_ and _sigma_ parameters to the entire  phylogeny, but allows the user to specify which branches belong to different selective regimes. The location of the optima are also fit. 

### The Data
The data in OUCH are most easily assembled as a data frame. Load the built in example from ouch and then print it to the screen (I only printed the head of the dataset here):

```{r eval=F}
require(ouch)
data(bimac)
bimac
```
```{r echo=F}
require(ouch)
data(bimac)
head(bimac)
```

NOTE: a very important detail about `ouch` is that it matches trees with data and regimes using the node labels stored in the rownames of the objects you pass to the `ouch` functions. So it is important to make sure that your dataframes and vectors are appropriately named. _The dataframe bimac already has the correct row names_, but we do so here just to illustrate. 

```{r }
rownames(bimac) <- bimac$node
```

`ouch` was designed around a rectangular data model, so although the tree object is not a dataframe internally, it still helps us to build the data as a dataframe before making the `ouchtree` objects. The central organizing element is the 
`node`: it has a node number (usually an integer but it is actually a unique character string), an `ancestor` to which it is joined by a branch, a `time` since the root of the tree, and optional `label` such as a species name. 

_The hypotheses which we use are assigned by painting particular regimes on branches_. It is convenient to represent each model or hypothesis as a column on the dataframe, with the regime assigned to the node (that is, it is assigned to the branch connecting the node to its ancestor).    

Make an `ouchtree` object using the `ouchtree` constructor. `with` is a very nice function to create a small local environment so that you can use a dataframe's elements directly without using the `bimac$` prefix. 

It is similar to an `attach` but it is temporary -- only lasting as long as the call itself. I like it much better than `attach` because I sometimes forget what I've attached and run into problems later. Also, with `attach`, you are actually working with a copy of the original dataframe object, so updating values is tricky. With `with`, it is more clear what's going on, and I don't tend to make those mistakes.

```{r fig=T}
tree <- with(bimac, ouchtree(node,ancestor,time/max(time),species))
plot(tree)
```

`ouch` fits the OU model Eq.~\@ref(eq:basic_ou) along each branch of the phylogeny. While $\alpha$ and $\sigma$ are held constant across the entire tree, the optima along each branch $\theta$ are allowed to vary. Users can then paint various combinations of optima on the tree to reflect various biological scenarios. 

For example, the dataset `bimac` was used to test the hypothesis of character displacement using an interspecific daaset of body sizes and sympatry/allopatry @Butler2004. The analysis tested several different models, which are included with `bimac`. They are: OU.1 or global optimum, OU.3 or small, medium, and large regimes depending on the body size of the observed species (terminal branches only, internal branches painted medium, OU.4 or the same as OU.3 but with internal branches given their own unique regime called ancestral, and OU.LP based on a linear parsimony reconstruction of the colonization events (i.e., that as species came into sympatry, they diverged in body size). 

### Plotting `ouchtree`s

You can plot the regime paintings on the tree, and set options such as line widths for prettier plots. `ouch` has a very nice feature which allows plotting of the alternative models on one plot.

```{r fig=T}
plot(tree, regimes=bimac[c(OU.1, OU.3, OU.4, OU.LP)], lwd=6)
```

Remember that you can pass a single vector or a data frame to the regimes parameter, but it must have the appropriate row names or names in the case of a vector.  The regimes are not part of the ouchtree object, because they represent our hypothesis of evolution along the tree, rather than the tree itself. It is part of the original dataframe from which we derived the tree, so remember to refer to `bimac` when passing the regimes to the `plot` function.  

### Fitting models

There are two main model fitting functions in `ouch`, `brown`, which fits Brownian motion models, and `hansen`, which fits OU models to comparative data. The call to `brown` is particularly simple, as it takes only the data and the tree:

```{r }
brown(log(bimac['size']),tree)
```

What is returned is an object of class `browntree`. It contains all input including the function call,  the tree and data), as well as the parameter estimate for $\sigma$ and the model fit statistics including: the log-likelihood, the deviance ($-2*log(L)$), the information criteria $AIC$, $AIC_c$ (corrected for small sample size), and $SIC$, and the model degrees of freedom. 

It is a good practice to save this, as it encapsulates the analysis. From this, we can rerun the model fit. 

```{r }
h1 <- brown(log(bimac['size']),tree)
```

`hansen` models are slightly more complex. In addition to $\sigma$, we are now fitting $\alpha$, the strength of selection, and all of the optima $\theta$ specified by our model. This maximum-likelihood search now requires an initial guess. If you have no idea, a good starting guess is 1. If you want to be sure, you can intiate searches with different starting guesses. You can also specify alternative optimization algorithms and increase or decrease the relative tolerance, which is the stringency by which convergence is assessed. Typically, the default is roughly `reltol=1e-8`, and the limit of machine precision is in the neighborhood of `reltol=1e-15`. 

```{r }
h2 <- hansen(log(bimac['size']),tree,bimac['OU.1'],sqrt.alpha=1,sigma=1)
h3 <- hansen(log(bimac['size']),tree,bimac['OU.3'], sqrt.alpha =1,sigma=1)
h4 <- hansen(log(bimac['size']),tree,bimac['OU.4'], sqrt.alpha =1,sigma=1)
h5 <- hansen(log(bimac['size']),tree,bimac['OU.LP'], sqrt.alpha =1,sigma=1,reltol=1e-5)
```

### `hansentree` and `ouchtree` methods

We can see the model results by typing `h5`, which will execute the `print` method for this class. You could also use the `attributes` function, but this will dump too much information. `ouchtree` objects and the classes derived from them contain information that is used in internal calculations of the algorithms, not of general interest to users. 

Additional accessor functions include: 
```{r }
coef(h5)    # the coefficients of the fitted model
logLik(h5)   # the log-likelihood value
```
```{r eval=F}
summary(h5)   # everything in the print method except the tree+data
```

We can now generate a table of our model fits: 
```{r }
unlist(summary(h5)[c('aic', 'aic.c', 'sic', 'dof')])  # just the model fit statistics
                                   # on a single line
h <- list(h1, h2, h3, h4, h5)   # store all our fitted models in a list
names(h) <- c(BM, OU.1, OU.3, OU.4, OU.LP)
sapply( h, function(x) unlist(summary(x)[c('aic', 'aic.c', 'sic', 'dof')]) )  
                                   # table with all models
```

By storing the model fits in a list, we can use apply methods to get the statistics from all the models at once. `sapply` returns a matrix if possible. 

```{r }
h.ic <- sapply( h, function(x) unlist(summary(x)[c('aic', 'aic.c', 'sic', 'dof')]) )  
print( h.ic, digits = 3)
```

Simulation and bootstrap methods:
`simulate` generates random deviates or sets of simulated tip data based on the fitted model. The input is a fitted model `hansentree` or `browntree`, and the output is a list of dataframes, each comparable to the original data. These can then be used to refit the model. 
```{r }
h5.sim <- simulate(object = h5, nsim=10)   # saves 10 sets of simulated data
                                  #  based on OU.LP
```

`update` refits the model, with one or more parameters changed.
```{r }
summary( update( object = h5, data = h5.sim[[1]] ) )   # fit the first dataset
h5.sim.fit <- lapply( h5.sim, function(x) update(h5, x))  # fit all 10 simulations
```

`bootstrap` is a convenience function for generating parametric bootstraps of the parameter estimates. It takes the fitted model, performs the simulations, refits, and outputs a dataframe of parameter estimates.  
```{r }
bootstrap( object = h5, nboot=10)
```

### `paint`ing regimes on trees

A new function in `ouch` is `paint`. Previously, it was up to users to set up regimes manually by editing spreadsheets. `paint` helps with this task by specifying the regimes on particular species, subtrees, or particular branches.

There are two parameters to `paint`, `subtrees`, which paints the entire subtree which descends from the node, and `branch`, which paints the branch connecting the node to it's ancestor. For either, you specify the node label (remember it's a character and needs to be quoted), and set it equal to the name of the regime you want to specify. 

Let's try it on the `bimac` tree and try to recreate the OU.LP regime:
```{r fig=T}
plot(tree, node.names=T)
```

Paint the subtrees first, take a look:
```{r fig=T}
ou.lp <- paint( tree, subtree=c(1=medium,9=large,2=small) )
plot(tree, regimes=ou.lp, node.names=T)
```

But there was an independent switch from medium to large at species gm, or node 38, and the node connecting 9 to its ancestor:
```{r }
ou.lp <- paint( tree, subtree=c(1=medium,9=large,2=small),
branch=c(38=large,2=medium))
```

Compare it to the original OU.LP from above. 
```{r}
plot(tree, regimes=ou.lp, node.names=T)
```

We can create alternative paintings of the regimes to test against the data. Suppose we wanted to add a clade specific hypothesis that diverged in a similar time period (this is a completely made-up hypothesis, just for example):
```{r}
ou.clades <- paint( tree, subtree=c(1=A,7=B, 8=C), 
branch=c(8=C, 7=C, 1=A))
plot(tree, regimes=ou.clades, node.names=T)
```

Run the model:
```{r }
h6 <- hansen(log(bimac['size']),tree, regimes=ou.clades, sqrt.alpha =1,sigma=1)
```

Rebuild our table and compare models:
```{r }
h <- append(h, h6)         # append (add on) new model results to our list h
names(h)[length(h)] <- OU.clades    # add the name of the new model
names(h)
h.ic <- sapply( h, function(x) unlist(summary(x)[c('aic', 'aic.c', 'sic', 'dof')]) )  
print( h.ic, digits = 3)
```
