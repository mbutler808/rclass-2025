---
title: "Getting data in shape with dplyr"
author:
  - name: Marguerite Butler
    url: https://butlerlab.org
    affiliation: School of Life Sciences, University of Hawaii
    affiliation_url: https://manoa.hawaii.edu/lifesciences/
description: "Crack that whip!"
date: 2025-02-27
categories: [module 3, week 7, tidyr, tidyverse, dplyr, tibble, pipe]
---

<!-- Add interesting quote -->

# Pre-lecture materials

<!-- R emoji aliases:  https://gist.github.com/rxaviers/7360908 -->
`r emojifont::emoji('palm_tree')`

### Read ahead

::: callout-note
## Read ahead

**Before class, you can prepare by reading the following materials:**

1.  <https://r4ds.had.co.nz/tibbles>
2.  <https://jhudatascience.org/tidyversecourse/wrangle-data.html#data-wrangling>
3.  [dplyr cheat sheet from RStudio](http://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf)
:::


### Acknowledgements

Material for this lecture was borrowed and adopted from

-   <https://www.stephaniehicks.com/jhustatcomputing2022/posts/2022-09-06-managing-data-frames-with-tidyverse/>
-   <https://rdpeng.github.io/Biostat776/lecture-managing-data-frames-with-the-tidyverse>
-   <https://jhudatascience.org/tidyversecourse/get-data.html#tibbles>


# Learning objectives

::: callout-note
# Learning objectives

**At the end of this lesson you will:**

-   Understand the tools available to get data into the proper structure and shape for downstream analyses
-   Learn about the dplyr R package to manage data frames
-   Recognize the key verbs (functions) to manage data frames in dplyr
-   Use the "pipe" operator to combine verbs together
:::

# Overview

It is still important to understand base R manipulations, particularly for things such as cleaning raw data, troubleshooting, and writing custom functions. But the tidyverse provides many useful tools for data manipuation and analysis of cleaned data. In this session we will learn about __dplyr__ and friends.  


# Tidy data

The tidyverse has many slogans. A particularly good one for all data analysis is the notion of **tidy data**.

As defined by Hadley Wickham in his 2014 paper published in the *Journal of Statistical Software*, a [tidy dataset](https://www.jstatsoft.org/article/view/v059i10) has the following properties:

1.  Each variable forms a column.

2.  Each observation forms a row.

3.  Each type of observational unit forms a table.

![Artwork by Allison Horst on tidy data](https://github.com/allisonhorst/stats-illustrations/raw/main/rstats-artwork/tidydata_1.jpg){width="80%"}

\[**Source**: [Artwork by Allison Horst](https://github.com/allisonhorst/stats-illustrations)\]


# What shapes does the data need to be in?

Beyond the data being tidy, however, we also need to think about what shape it needs to be in. Weʻll review concepts and tools in the next two lessons. 

Now that we have had some experience plotting our data, we can see the value of having rectangular dataframes.  We can also see that for particular graphics and analyses, we need to have the data arranged in particular ways. 

For example, take a look at this elegant graphic below.  This single graphic is packed with information on fat, BMR, TEE, and activity levels, all for mulitple species. Is it more effective that individual bar plots?  This arrangement is so helpful because you can imagine questions that can be answered with it by comparing the different aspects of the data. 

:::{.callout-note}
# A very informative figure! 
![Human total energy expenditure compared with other primates.](../../images/humanTEE.png)
[Source: Gibbons, 2022 based on data of H. Ponzer et al., NATURE, 533:90, 2016](https://www.science.org/content/article/scientist-busts-myths-about-how-humans-burn-calories-and-why?fbclid=IwAR3fzOwd09LBUOR9ely2t4om0-CtYcuT8ux_f46OopQnpiAVENgX_24bWpY)

:::

:::{.callout-note}
# Can you imagine what this dataset looks like in terms of organization? 
1. First imagine what it would look like variable by variable. 
2. How might you intially plot the data?
3. What organization would you need to make a single figure such as this? 
:::

We often do not know exactly what we need at the start of a data analysis. We have to play around with different data structures, rearrange the data, look for interesting plots to try, rerrange to fit the input requirements of new functions weʻve discovered, and so on. 



# Tibbles

The __tidyverse__ uses as its central data structure, the __tibble__ or __tbl_df__.  Tibbles are a variation on data frames, claimed to be *lazy* and *surly*:

- They don’t change variable names or types when you construct the tibble.
- Don’t convert strings to factors (the default behavior in `data.frame()`).
- Complain more when a variable doesnʻt exist.
- No `row.names()` in a tibble. Instead, you must create a new variable. 
- Display a different summary style for its `print()` method.
- Allows non-standard R names for variables
- Allows columns to be lists. 

However, most tidyverse functions also work on data frames. Itʻs up to you. 

### `tibble()` constructor

Just as with data frames, there is a `tibble()` constructor function, which functions in many ways with similar syntax as the `data.frame()` constructor. 


If you havenʻt already done so, install the tidyverse: 

```{r eval=F}
install.packages("tidyverse")
```
```{r}
require(tibble)
tibble( iris[1:4,] )  # the first few rows of iris
x <- 1:3
tibble( x, x * 2 )  # name assigned at construction
silly <- tibble(      # an example of a non-standard names
  `one - 3` = 1:3,  # name = value syntax
  `12` = "numeric",
  `:)` = "smile",
)
silly
```

### `as_tibble()` coersion

`as_tibble()` converts an existing object, such as a data frame or matrix, into a tibble.

```{r}
as_tibble( iris[1:4,] )  # coercing a dataframe to tibble
```

### As output

Most often we will get tibbles returned from tidyverse functions such as `read_csv()` from the `readr` package.


# The __dplyr__ package

The __dplyr__ package, which is part of the __tidyverse__ was written to supply a *grammar for data manipulation*, with verbs for the most common data manipulation tasks. 

![Artwork by Allison Horst on the dplyr package](https://github.com/allisonhorst/stats-illustrations/raw/main/rstats-artwork/dplyr_wrangling.png){width="80%"}

\[**Source**: [Artwork by Allison Horst](https://github.com/allisonhorst/stats-illustrations)\]


### `dplyr` functions

-   `select()`: return a subset of the data frame, using a flexible notation

-   `filter()`: extract a subset of rows from a data frame using logical conditions

-   `arrange()`: reorder rows of a data frame

-   `relocate()`: rearrange the columns of a data frame 

-   `rename()`: rename columns in a data frame

-   `mutate()`: add new columns or transform existing variables

-   `summarize()`: generate summary statistics of the variables in the data frame, by strata if data are hierarchical

-   `%>%`: the "pipe" operator (from __magrittr__) connects multiple verbs together into a data wrangling pipeline (kind of like making a compound sentence)


Note: Everything `dplyr` does could already be done with base R. What is different is a new syntax, which allows for more clarity of the data manipulations and the order, and perhaps makes the code more readable. 

Instead of the nested syntax, or typing the dataframe name over and over, we can pipe one operation into the next. 

Another useful contribution is that `dplyr` functions are **very** fast, as many key operations are coded in C++.  This will be important for very large datasets or repeated manipulations (say in a simulation study). 

### `starwars` dataset

We will use the `starwars` dataset included with `dplyr`.  You should check out the help page for this dataset `?starwars`.

Letʻs start by using the `skim()` function to check out the dataset:

```{r}
require(dplyr)
class(starwars)
skimr::skim(starwars)
```

### Selecting columns with `select()`

::: callout-tip
### Example

Suppose we wanted to take the first 3 columns only. There are a few ways to do this.

We could for example use numerical indices:

```{r}
names(starwars)[1:3]
```

But we can also use the names directly:

```{r}
subset <- select(starwars, c(name, sex:species))
head(subset)
```
:::

::: callout-tip
### Note

The `:` normally cannot be used with names or strings, but inside the `select()` function you can use it to specify a range of variable names.
:::


#### By exclusion

Variables can be **omited** using the negative sign withing `select()`:

```{r, eval=FALSE}
select( starwars, -(sex:species))
```

The `select()` function also has several helper functions that allow matching on patterns. So, for example, if you wanted to keep every variable that ends with "color":
```{r}
subset <- select(starwars, ends_with("color"))
str(subset)
```

Or all variables that start with n or m:
```{r}
subset <- select(starwars, starts_with("n") | starts_with("m"))
str(subset)
```

You can also use more general __regular expressions__. See the help page (`?select`) for more details.


### Subsetting with `filter()`

The `filter()` function is used to **extract subsets of rows** or observations from a data frame. This function is similar to the existing `subset()` function in base R, or indexing by logical comparisons.

![Artwork by Allison Horst on filter() function](https://github.com/allisonhorst/stats-illustrations/raw/main/rstats-artwork/dplyr_filter.jpg){width="80%"}

\[**Source**: [Artwork by Allison Horst](https://github.com/allisonhorst/stats-illustrations)\]

::: callout-tip
### Example

Suppose we wanted to extract the rows of the `starwars` data frame where the birthyear is greater than 100:

```{r}
age100 <- filter(starwars, birth_year > 100)
head(age100)
```
:::

You can see that there are now only `r nrow(age100)` rows in the data frame and the distribution of the `birth_year` values is.

```{r}
summary(age100$birth_year)
```

We can also filter on multiple conditions:  *and* requires both conditions to be true, whereas *or* requires only one to be true. This time letʻs choose `birth_year < 100` and `homeworld == "Tatooine`:

```{r}
age_tat <- filter(starwars, birth_year < 100 & homeworld == "Tatooine")
select(age_tat, name, height, mass, birth_year, sex)
```

Other logical operators you should be aware of include:

|  Operator |                  Meaning |                        Example |
|----------:|-------------------------:|-------------------------------:|
|      `==` |                   Equals |        `homeworld == Tatooine` |
|      `!=` |           Does not equal |        `homeworld != Tatooine` |
|       `>` |             Greater than |               `height > 170.0` |
|      `>=` | Greater than or equal to |              `height >= 170.0` |
|       `<` |                Less than |               `height < 170.0` |
|      `<=` |    Less than or equal to |              `height <= 170.0` |
|    `%in%` |              Included in | `homeworld %in% c("Tatooine", "Naboo")` |
| `is.na()` |       Is a missing value |            `is.na(mass)` |

::: callout-tip
### Note

If you are ever unsure of how to write a logical statement, but know how to write its opposite, you can use the `!` operator to negate the whole statement.

A common use of this is to identify observations with non-missing data (e.g., `!(is.na(homweworld))`).
:::


### Sorting data with `arrange()`

`arrange()` is like the sort function in a spreadsheet, or `order()` in base R. `arrange()` **reorders rows** of a data frame according to one of the columns. Think of this as sorting your rows on the value of a column. 

Here we can order the rows of the data frame by birth_year, so that the first row is the earliest (oldest) observation and the last row is the latest (most recent) observation.

```{r}
starwars <- arrange(starwars, birth_year)
```

We can now check the first few rows

```{r}
head(select(starwars, name, birth_year), 3)
```

and the last few rows.

```{r}
tail(select(starwars, name, birth_year), 3)
```

Columns can be arranged in descending order using the helper function `desc()`.

```{r}
starwars <- arrange(starwars, desc(birth_year))
```

Looking at the first three and last three rows shows the dates in descending order.

```{r}
head(select(starwars, name, birth_year), 3)
tail(select(starwars, name, birth_year), 3)
```

### Rearranging columns with `relocate()`


**Moving a column to a new location** is done by specifying the column names, and indicating where they go with the `.before=` or `.after=` arguments specifing a location (another column).

`relocate(.data, ..., .before = NULL, .after = NULL)`

### Renaming columns with `rename()`

**Renaming a variable** in a data frame in R is accomplished using the `names()` function. The `rename()` function is designed to make this process easier.

Here you can see the names of the first six variables in the `starwars` data frame.

```{r}
head(starwars[, 1:6], 3)
```

Suppose we wanted to drop the `_color`. The syntax is `newname = oldname`:
```{r}
starwars <- rename(starwars, hair = hair_color, skin = skin_color, eye = eye_color)
head(starwars[, 1:6], 3)
```

::: callout-note
### Question

How would you do the equivalent in base R without `dplyr`?
:::

### Adding columns with `mutate()`

The `mutate()` function **computes transformations of variables** in a data frame. 

![Artwork by Allison Horst on mutate() function](https://github.com/allisonhorst/stats-illustrations/raw/main/rstats-artwork/dplyr_mutate.png){width="80%"}

\[**Source**: [Artwork by Allison Horst](https://github.com/allisonhorst/stats-illustrations)\]

For example, we may want to adjust height for mass:

```{r}
starwars <- mutate(starwars, heightsize = height / mass )
head(starwars)
```

There is also the related `transmute()` function, which `mutate()`s and *keeps only the transformed variables*.  Therefore, the result is only two columns in the transmuted data frame.



### Perform functions on groups using `group_by()`

The `group_by()` function is used to **indicate groups within the data**.

For example, what is the average height by homeworld?

**In conjunction** with the `group_by()` function, we often use the `summarize()` function.

::: callout-tip
### Note

The **general operation** here is a combination of

1.  Splitting a data frame by group defined by a variable or group of variables (`group_by()`)
2.  `summarize()` across those subsets
:::

::: callout-tip
### Example

We can create a separate data frame that splits the original data frame by `homeworld`.

```{r}
worlds <- group_by(starwars, homeworld)
```

Compute summary statistics by planet (just showing mean and median here, almost any summary stat is available):

```{r}
summarize(worlds, height = mean(height, na.rm = TRUE), 
          maxheight = max(height, na.rm = TRUE),
          mass = median(mass, na.rm = TRUE))
```
:::

`summarize()` returns a data frame with `homeworld` as the first column, followed by the requested summary statistics.  This is similar to the base R function `aggregate()`.

::: callout-tip
### More complicated example

In a slightly more complicated example, we might want to know what are the average masses within quintiles of `height`:

First, we can create a categorical variable of `height5` divided into quintiles

```{r}
qq <- quantile(starwars$height, seq(0, 1, 0.2), na.rm = TRUE)
starwars <- mutate(starwars, height.quint = cut(height, qq))
```

Now we can group the data frame by the `height.quint` variable.

```{r}
quint <- group_by(starwars, height.quint)
```

Finally, we can compute the mean of `mass` within quintiles of `height`.

```{r}
summarize(quint, mquint = mean(mass, na.rm = TRUE))
```
:::

Oddly enough there is a maximum mass in the second height quintile of Starwars characters. The biologist in me thinks maybe outliers? 


### Piping multiple functions using `%>%`

The pipe operator `%>%` is very handy for **stringing together multiple `dplyr` functions in a sequence of operations**. It comes from the **magritter** package. 

![](https://s3-us-west-2.amazonaws.com/collections.lacma.org-images/remote_images/ma-150089-WEB.jpg?AIhOIuuCkaqUYKpVvGmkLe995PGXVHxg)
[Source: ](https://collections.lacma.org/node/239578)


In base R, there are two styles of applying multiple functions. The first is the resave the object after each operation. 

The second is to nest functions, with the first at the deepest level (the heart of the onion), then working our way out:

```{r,eval=FALSE}
third(second(first(x)))
```

The `%>%` operator allows you to string operations in a left-to-right fashion, where the output of one flows into the next, i.e.:

```{r,eval=FALSE}
first(x) %>% second %>% third
```

::: callout-tip
### Example

Take the example that we just did in the last section.

That can be done with the following sequence:

```{r}
starwars %>% 
  group_by(homeworld) %>% 
  summarize(height = mean(height, na.rm = TRUE), 
          maxheight = max(height, na.rm = TRUE),
          mass = median(mass, na.rm = TRUE))
```
:::


#### Data masking

Notice that we did not have to specify the dataframe. This is because dplyr functions are built on a data masking syntax. From the dplyr data-masking help page:

> Data masking allows you to refer to variables in the "current" data frame (usually supplied in the .data argument), without any other prefix. It's what allows you to type (e.g.) `filter(diamonds, x == 0 & y == 0 & z == 0)` instead of `diamonds[diamonds$x == 0 & diamonds$y == 0 & diamonds$z == 0, ]`

When you look at the help page for `?mutate` for example, you will see a function definition like so:

> `mutate(.data, ...)`

Note the `.data`, Which means that the data can be supplied as usual, or it can be inherited from the "current" data frame which is passed to it via a pipe.



### Sample rows of data with `slice_*()`

The `slice_sample()` function will **randomly sample rows** of data.

The number of rows to show is specified by the `n` argument.

-   This can be useful if you **do not want to print the entire tibble**, but you want to get a greater sense of the variation.

::: callout-tip
### Example

```{r}
slice_sample(starwars, n = 10)
```
:::

You can also use `slice_head()` or `slice_tail()` to take a look at the top rows or bottom rows of your tibble. Again the number of rows can be specified with the `n` argument.

This will show the first 5 rows.

```{r}
slice_head(starwars, n = 5)
```

This will show the last 5 rows.

```{r}
slice_tail(starwars, n = 5)
```

# Summary

The `dplyr` package provides an alternative syntax for manipulating data frames. In particular, we can often conduct the beginnings of an exploratory analysis with the powerful combination of `group_by()` and `summarize()`.

Once you learn the `dplyr` grammar there are a few additional benefits

-   `dplyr` can work with other data frame "back ends" such as SQL databases. There is an SQL interface for relational databases via the DBI package

-   `dplyr` can be integrated with the `data.table` package for large fast tables

-   Many people like the piping syntax for readability and clarity


# Post-lecture materials

### Final Questions


::: callout-note
### Questions

1.  How can you tell if an object is a tibble?
2.  Using the `trees` dataset in base R (this dataset stores the girth, height, and volume for Black Cherry Trees) and using the pipe operator: 
    (i) convert the `data.frame` to a tibble.
    (ii) filter for rows with a tree height of greater than 70, and 
    (iii) order rows by `Volume` (smallest to largest).

```{r}
head(trees)
```
:::



### Additional Resources

::: callout-tip
-   <https://jhudatascience.org/tidyversecourse/wrangle-data.html#data-wrangling>
-   [dplyr cheat sheet from RStudio](http://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf)
:::



