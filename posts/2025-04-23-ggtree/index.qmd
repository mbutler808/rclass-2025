---
title: "The ggtree-verse"
author:
  - name: Marguerite Butler
    url: https://butlerlab.org
    affiliation: School of Life Sciences, University of Hawaii
    affiliation_url: https://manoa.hawaii.edu/lifesciences/
description: "Working with trees with tidytree and plotting with ggtree"
date: 2025-04-23
categories: [module 7, week 13, phylogenetic trees, phylo, ggtree, treedata]
bibliography: ../refs.bib
---

### Acknowledgements

References for this Material:

- Treedata book by Guangchuang Yu [@Yu:2022] <https://yulab-smu.top/treedata-book/>
- <https://bioconnector.github.io/workshops/r-ggtree.html>

# Learning objectives

::: callout-note
# Learning Objectives

**At the end of this lesson you will:**

-  Understand information content of phylogenetically structured data
-  Understand particular R tree formats in ape, phylobase, and ouch
-  Be able to hand-make trees
-  Be able to import trees from nexus, newick, and other major formats in use today
-  Be able to convert trees  from one format to another
-   Be able to perform basic tree manipulations

:::


:::{.callout-note}
# R packages you will need
- `ape`
- `ggtree`
- `tidytree`
- `treeio`
:::

# Overview

`ggtree` is a powerful phylogenetic tree plotting package, that is used alongside `treeio` and `tidytree` packages to import/export and to manipulate phylogenetic trees, respectively. These packages allow you to subset or combine trees with data, annotate, and plot in so many different ways using the grammar of graphics. 

Because itʻs written in the style of `ggplot2` and the `tidyverse`, there are a lot of functions to remember, and now there are also multiple object types. The key to working effectively with `ggtree` is to be aware of what type of object you are working with, whether it is a `dataframe`, a `tibble`, a `phylo` tree, a `treedata` tibble, or `ggtree` object. It is easy to convert between these at will if you know what you are dealing with. 


# phylo -> treedata

Functions like `read.tree` amd `read.nexus`, etc. will read in objects of class `phylo` (they are actually referencing the ape function). 

To show this, letʻs first generate a random tree using `ape::rtree()`

```{r}
#| warning: false
require(ape)
require(ggtree)
require(treeio)
```


```{r}
tree <- rtree(20)
class(tree)
plot(tree)  # ape plotting function
```

Note: `ggtree` can also accept `phylo` objects as arguments:

```{r}
ggtree(tree)  # ggtree plotting function
```

To save as newick and nexus formats, `treeio` has the following:

```{r}
treeio::write.nexus(tree, file="tree.nex")
treeio::write.tree(tree, file="tree.tree")
list.files()
```

Take a look at these files. They should be in nexus and newick formats, respectively.

```{r}
tree_nex <- treeio::read.nexus(file="tree.nex")
tree_new <- treeio::read.newick(file="tree.tree")
class(tree_nex)
class(tree_new)
```

::: callout-note
If you have trees from `iqtree`, `BEAST` etc., you should use the specialized read functions because they will capture the metadata embedded in the treeformat including support values. 
:::


## Coverting between data types


The main functions for coersion are:


```{r}
as.phylo (tree)  # to phylo
as.treedata(tree) # to treedata
treedata <- as.treedata(tree)  
as_tibble(treedata)  # to tibble
```



# Simulate phenotypic data

### Add tiplabels

```{r}
ggtree(tree) + geom_tiplab()
```

### Get the tip labels

There is a function `get_taxa_name()` which is very handy, but NOTE: its argument is a `ggtree` object, not a `treedata` object. 

```{r}
p <- ggtree(tree) + geom_tiplab()
get_taxa_name(p)
taxa <- get_taxa_name(p)
```

Simulate a data matrix:

```{r}
n <- length(taxa)
size <- rnorm(n, mean=20, sd=5)
habitat <- sample(c("desert", "grassland", "forest", "intertidal"), size=n, replace=T)
dat <- data.frame( "label"= taxa, size, habitat)
dat
```

See our ggtree as a treedata object:

```{r}
as.treedata(p) %>% as_tibble %>% as.data.frame  
  # ggtree -> treedata -> tibble -> dataframe
```

# Merge tree with data

Now that we have a matching key in both the tree and data objects, we can join the tree with the dataframe by those matching labels using `ggtree`ʻs `full_join`:

```{r}
ttree <- full_join(tree, dat, by = "label") 
ttree
ttree %>% as_tibble %>% as.data.frame
```

And thatʻs what our `treedata` object looks like flattened out! 


## Subsetting the tree

Functions:  `drop.tip()` and `keep.tip()`

Suppose we want to drop all of the even tips:

```{r}
todrop <- paste("t", 1:10*2, sep="")
todrop
smalltree <- drop.tip(ttree, todrop)
smalltree
ggtree(smalltree) + geom_tiplab()
```

`drop.tip` keeps all of the metadata! `keep.tip` is imported from `ape` so it has to be converted to `phylo` and then the data joined again after. 


## Plotting with node labels

The geometries `geom_text()` and `geom_node()` are helpful for labelling all of the nodes. The function `geom_tiplab()` labels only the tips. 


Add node labels so you know what the internal node numbers are:

```{r}
ggtree(smalltree) + 
    geom_tiplab() +
    geom_text(aes(label=node), hjust=-.3)    # node numbers
```    

Note: The tiplabels and the node labels crashed!

There are also `2` versions: `geom_text2()` and `geom_node2()` that allow subsetting the nodes, when you want the geometry to apply to only some of the nodes.  

```{r}
ggtree(smalltree) + 
    geom_tiplab() +
    geom_text2(aes(label=node, subset=!isTip), hjust=-.3)    # node numbers
```    

`isTip` is a column of the ggtree object, so it is inherited when we provide the ggtree object. 


## Plotting with alternative tip labels 

The dataframe portion of the treedata object can hold any number of columns of metadata. Perhaps you have some real names in a different column (like a display name), it is easy to swap out the tip labels. Here letʻs just use the `habitat` column

```{r}
ggtree(smalltree) + 
    geom_tiplab(aes(label=habitat)) +
    geom_text2(aes(label=node, subset=!isTip), hjust=-.3)    # node numbers
```

## When your tip labels get cut off

Add an x scale (usually time):

```{r}
ggtree(smalltree) + 
    geom_tiplab(aes(label=habitat)) +
    geom_text2(aes(label=node, subset=!isTip), hjust=-.3) +   # node numbers
    theme_tree2()
```     

You can increase the size of the plot area to accommodate the longer labels:

```{r}
ggtree(smalltree) + 
    geom_tiplab(aes(label=habitat)) +
    geom_text2(aes(label=node, subset=!isTip), hjust=-.3) +   # node numbers
    theme_tree2() +
    xlim(0,5)
```

# Tree layouts 

```{r}
#| warning: false
#| eval: false
require(cowplot)

plot_grid(
  ggtree(ttree),
  ggtree(ttree, branch.length='none'),
  ggtree(ttree, layout="dendrogram"),
  ggtree(ttree, layout="roundrect"),
  ggtree(ttree, layout="ellipse"),
  ggtree(ttree, layout="ellipse", branch.length="none"),
  ggtree(ttree, layout="circular"),
  ggtree(ttree, branch.length='none', layout='circular'),
  ggtree(ttree, layout="fan", open.angle=120),
  ggtree(ttree, layout="inward_circular")
)
```

# Plotting data on the tree

`geom_facet()` and `facet_plot()` are general methods to link graphical layers to a tree. 

These functions require an input dataframe with the first column containing the taxon labels (the key which matches to the tip labels of the phylogeny). 

Internally these functions reorder the input data based on the tree structure so that you donʻt have to worry about the order of the rows. 

Multiple layers can be added to the same dataset.  Also different datasets can be added to the same figure. 

A table of the __geom layers__ that work with `geom_facet` is [provided here](https://yulab-smu.top/treedata-book/figures-and-tables.html#tab:facet-geom).


## Example: plot `smalltree` with `size` in a barplot

First make a tibble to attach to the tree. As of this writing, `geom_facet` will not accept a `treedata` object. It wants a dataframe or tibble of only the tips. But this is easy to make from the treedata. We just have to filter out the non-tip rows, then rearrange the columns to put the labels first:


```{r}
#| warning: false
require(ggplot2)
require(dplyr)

smdat <- smalltree %>% 
           as_tibble %>% 
           filter(!is.na(label)) %>%
           relocate(label, .before=1) 
```

We can then add the barplot as a panel next to the tree plot using `geom_facet`: 

```{r}           
ggtree(smalltree) + 
    geom_tiplab() +
    theme_tree2()  + 
    geom_facet(panel = "Size", 
               data=smdat, 
               geom = geom_col, 
               mapping=aes(x = smdat$size), 
               orientation = 'y', 
               width = .6, 
               fill="blue") 
```

The arguments for geom_facet() are:

- `panel` : The name of the panel, displayed on top
- `data` : a `tibble` or `dataframe` containing the metadata to plot. Must have as the first column the tip labels that are found in the phylogenetic tree. 
- `geom` : a [geom layer](https://yulab-smu.top/treedata-book/figures-and-tables.html#tab:facet-geom) specifying the style of plot
- `mapping` : the aesthetic mapping. I should not have to supply the `smdat$` here but it wonʻt work otherwise. 
- any additional parameters for the plot


# A tree-panel and annotation example from the Tree Data Book:

This example plots a phylogeny alongside SNP (single nucleotide polymorphism) data and a barplot of some simulated data [@Yu:2022]. 

## The %+>% operator for ggtree objects

The %+>% operator is used to add data (`dataframe`, `tibble`) to a `ggtree` object:

```{.bash}
my_ggtree <- my_ggtree %<+% new_data
```

The result is a combined object that can be used for plotting, but it does not modify the original `treedata` object (which is a different object from the `ggtree` object). The `full_join()` function can be used to combine a tree with data to produce a new `treedata` object. 


## Example of the %+>% operator to add data to a ggtree object. 

The package `TDbook` is the data accompanyment to [@Yu:2022]ʻs [Tree Data book](https://yulab-smu.top/treedata-book/index.html). It is available on CRAN so you can install it with the usual `install.packages("TDbook")` function call.

```{r}
#| warning: false
require(ggtree)
require(ggplot2)
require(dplyr)
require(TDbook)

# load `tree_boots`, `df_tip_data`, and `df_inode_data` from 'TDbook'
```


```{r}
p <- ggtree(tree_boots) %<+% df_tip_data + xlim(-.1, 4)
p2 <- p + geom_tiplab(offset = .6, hjust = .5) +
    geom_tippoint(aes(shape = trophic_habit, color = trophic_habit, 
                size = mass_in_kg)) + 
    theme(legend.position = "right") + 
    scale_size_continuous(range = c(3, 10))

p2 %<+% df_inode_data + 
    geom_label(aes(label = vernacularName.y, fill = posterior)) + 
    scale_fill_gradientn(colors = RColorBrewer::brewer.pal(3, "YlGnBu"))
```

### Explore `df_info`


`df_info` A dataframe containing sampling info for the tips of the tree. 386 rows and 6 variables, with the first column being taxa labels (`id`).

`df_alleles` The allele table with original raw data to be processed to SNP data. It is a table of nucleotides with 386 rows x 385 variables. The first row contains tips labels. Column names are non-sense. The rownames (exept for the first one) contains the snp position along the genome. 




```{r}
## load `tree_nwk`, `df_info`, `df_alleles`, and `df_bar_data` from 'TDbook'
tree <- tree_nwk
snps <- df_alleles
snps_strainCols <- snps[1,] 
snps<-snps[-1,] # drop strain names
colnames(snps) <- snps_strainCols

gapChar <- "?"
snp <- t(snps)  # not rectangular!
lsnp <- apply(snp, 1, function(x) {
        x != snp[1,] & x != gapChar & snp[1,] != gapChar
    })  # different from row 1, not missing
lsnp <- as.data.frame(lsnp) 
lsnp$pos <- as.numeric(rownames(lsnp))  # position from rownames
lsnp <- tidyr::gather(lsnp, name, value, -pos)  
snp_data <- lsnp[lsnp$value, c("name", "pos")] # only TRUEs
```

`snp_data` A dataframe containing SNP position data. 6482 x 2. The first column contains taxa labels coresponding to the tips of the tree  (`name`).  There are multiple rows per taxon, the second colum is the position `pos` of the snp in the genome. This is used as the x-variable in the plot. 

In the dataframe `snp_data` the rows are ordered by position along the sequence (the x-dimension of this data), but the first column is the strain (taxon) name which matches the tips in the phylogenetic tree. 

```{r}
## visualize the tree 
p <- ggtree(tree) 

## attach the sampling information data set 
## and add symbols colored by location
p <- p %<+% df_info + geom_tippoint(aes(color=location))
p
```

### Add SNP and Trait plots aligned to the tree

Use `geom_facet` with reference to the respective dataframes/tibbles to add plots alignted to the tree. For the SNP plot, we will use `geom_point` which allows x-y plotting, with x-coordinate determined by `pos` and the y-coordinate aligned with the taxon.  The symbol is the vertical line `|`.  

```{r}
## visualize SNP and Trait data using dot and bar charts,
## and align them based on tree structure
p1 <- p + geom_facet(panel = "SNP", data = snp_data, geom = geom_point, 
               mapping=aes(x = pos, color = location), shape = '|') 
p1
```

`df_bar_data` is some simulated data with an `id` column specifying the taxon names, and a `dummy_bar_value` containing some data. 

```{r}
p1 + geom_facet(panel = "Trait", data = df_bar_data, geom = geom_col, 
                aes(x = dummy_bar_value, color = location, 
                fill = location), orientation = 'y', width = .6) +
    theme_tree2(legend.position=c(.05, .85))
```


# Example datasets

save to your working directory:

[bigtree.nex](bigtree.nex)  
[anolis.SSD.raw.csv](anolis.SSD.raw.csv)  
[ggtree.R](ggtree.R)  

This is an example of a typical workflow. We have carefully collected phenotypic data, and someone has published a massive phylogeny. We need to subset the tree to just the taxa we want to work on.   

