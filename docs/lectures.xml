<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>ZOOL710 Data Science in R for Biologists 2025</title>
<link>https://mbutler808.github.io/lectures.html</link>
<atom:link href="https://mbutler808.github.io/lectures.xml" rel="self" type="application/rss+xml"/>
<description>Course website for Data Science in R for Biologists (ZOOL 710) in Spring 2025</description>
<generator>quarto-1.6.40</generator>
<lastBuildDate>Thu, 13 Feb 2025 10:00:00 GMT</lastBuildDate>
<item>
  <title>Types of Data</title>
  <dc:creator>Marguerite Butler</dc:creator>
  <link>https://mbutler808.github.io/posts/2025-02-13-data/</link>
  <description><![CDATA[ <!-- Add interesting quote --><!-- R emoji aliases:  https://gist.github.com/rxaviers/7360908 --><p>✏️</p>
<section id="overview" class="level1"><h1>Overview</h1>
<p>We will discuss different types of data, how they are represented in R, and how data type influences the types of data analyses we may employ.</p>
<p>A practical benefit of understanding how R handles data is that a major source of error for novice R programmers is <em>trying to use functions but providing the wrong type or class of data than what the function was written for</em>. This is very confusing if you donʻt understand about objects in R, but very clear and easy to fix if you do!</p>
</section><section id="pre-lecture-materials" class="level1"><h1>Pre-lecture materials</h1>
<section id="watch" class="level3"><h3 class="anchored" data-anchor-id="watch">Watch</h3>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Watch
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>Before class, you can prepare by watching:</strong></p>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/wzPRpyoNaa8?start=350" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
</div>
</div>
</section><section id="acknowledgements" class="level2"><h2 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h2>
<p>Material for this lecture was borrowed and adopted from</p>
<ul>
<li><a href="https://andreashandel.github.io/MADAcourse/Data_Types.html" class="uri">https://andreashandel.github.io/MADAcourse/Data_Types.html</a></li>
<li><a href="https://r-coder.com/data-types-r/#Raw_data_type_in_R" class="uri">https://r-coder.com/data-types-r/#Raw_data_type_in_R</a></li>
<li>
<a href="https://www.stat.auckland.ac.nz/~paul/ItDT/HTML/node76.html" class="uri">https://www.stat.auckland.ac.nz/~paul/ItDT/HTML/node76.html</a> # Learning objectives</li>
</ul>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Learning objectives
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>At the end of this lesson you will:</strong></p>
<ul>
<li>Understand different types of data and how they are represented computationally</li>
<li>Understand that different data types require different analysis approaches</li>
<li>Recognize different base <strong>data types</strong> in R and know how to work with them</li>
<li>Recognize the base <strong>data structures</strong> or <strong>objects</strong> in R and how to use them to do what you want</li>
</ul>
</div>
</div>
</section></section><section id="what-is-data-anyway" class="level1"><h1>What is data anyway?</h1>
<p>Merriam Webster defines <strong>data</strong> as <em>factual information (such as <strong>measurements</strong> or <strong>statistics</strong>) used as a basis for <strong>reasoning</strong>, <strong>discussion</strong>, or <strong>calculation</strong>.</em></p>
<p>From a practicing scientistsʻ point of view, data is anything <strong>measureable</strong> or <strong>scorable</strong> that could provide <strong>information</strong> regarding a phenomenon of interest.</p>
<p>Ideally, data:</p>
<ul>
<li>are <strong>repeatable</strong> (at least within statistical error).<br>
</li>
<li>contain more <strong>signal</strong> than <strong>noise</strong>.</li>
</ul>
<p>For example, if we are studying how morphology changes with body size, we could take measurements such as <em>body length</em>, <em>head length</em>, <em>arm length</em>, and <em>leg length</em> on a sample of <em>individuals</em>. These measurements would provide linear, <strong>continuous data</strong> that would inform our study of size and scaling. If we also expected males and females to differ, then <em>sex</em> would be a <strong>categorical variable</strong>.</p>
<ul>
<li>It is important to <em>define the variables</em> so that the measurements are <em>repeatable</em> by other scientists collecting data on the same or similar samples.<br>
</li>
<li>The <em>variables</em> chosen are expected to be related to the phenomenon of interest (here, scaling).<br>
</li>
<li>The <em>individuals</em> are replicates from the same sample population, meaning that they should be equally embody or be influenced by the phenomenon we are studying. In other words, they form a homogenous sample. In the example of sexual dimorphism, we potentially have different groups within our sample. This can be taken account of in analyses using our <em>categorical grouping variable</em> <em>sex</em>.</li>
</ul>
<p>Data have many forms such as images, sound, video, text, or any combination. Today we also have access to large volume datastreams from remote sensing, social media, or from all the various -omics. The kind of data, and how messy it is, determines the amount of processing that needs to be done before analysis.</p>
<p>At some point your data will most likely be arranged into spreadsheets, with observations as rows and variables as columns. <strong>In this course, we will focus on the data source that you are most likely to encounter in your analyses, the “(messy) spreadsheet” type, containing bits of information collected on individuals.</strong> Please do feel free to play around with other data types on your own, e.g.&nbsp;for your course project.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div id="fig-havedata" class="quarto-float quarto-figure quarto-figure-center anchored" data-fig-align="center" alt="A cartoon showing two people arguing at a table, and a third person, the data analyst is at his laptop. He is smiling and says *When you two have finished arguing your opinions, I actually have data*.">
<figure class="quarto-float quarto-float-fig figure"><div aria-describedby="fig-havedata-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://mbutler808.github.io/images/i-have-data_3.jpeg" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:80.0%" alt="A cartoon showing two people arguing at a table, and a third person, the data analyst is at his laptop. He is smiling and says *When you two have finished arguing your opinions, I actually have data*.">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-havedata-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: Weʻve all been here. Source: timoelliott.com
</figcaption></figure>
</div>
</div>
</div>
<p><a href="https://timoelliott.com/blog/cartoons/analytics-cartoons">Source: timoelliott.com</a></p>
</section><section id="types-of-variables" class="level1"><h1>Types of Variables</h1>
<p>Variables are the conceptual elements of the data. Variables are typically categorized by the nature of how they can vary (i.e., quantitative, qualitative, ordinal), because these differences dictate different analytical approaches and statistical methods.</p>
<p><strong>Quantitative:</strong> This data type, also called <em>metric</em> data, represents variation in magnitude and generally allows one to do certain mathematical operations, e.g., subtraction or addition. The most common variations include:</p>
<ul>
<li>
<em><strong>Continuous</strong></em>: Can take on any numerical value. Examples include mass, length, distance, age, etc.</li>
<li>
<em><strong>Discrete</strong></em>: Can only take countable (integer) values, e.g., the number of offspring an indivdiual produces.</li>
<li>
<em><strong>Fraction/Proportion</strong></em>: A continuous ratio of two values, with the numerator being a part to the whole which is represented by the demoninator. Thus these variables take on values between 0 and 1.</li>
<li>
<em><strong>Ratios</strong></em>: A continuous ratio of any two values. Data measured on a ratio scale have all the properties of continuous data.</li>
</ul>
<p><strong>Qualitative:</strong> Generally speaking, qualitative data indicate <em>categories</em> which have no intrinsic numeric value or natural order. Therefore it would not make sense to apply arithmetic to qualitative data such as color, sex, or family group, etc. You may see the term <em>nominal</em> (definition: “pertaining to names”) data applied to categorial data in the statistical literature. Major types of <strong>qualitative</strong> data include:</p>
<ul>
<li>
<em><strong>Categorical</strong></em>: e.g., flower color, continent of origin, social status, disease state, etc.</li>
<li>
<em><strong>Descriptive</strong></em>: e.g., free text data from field observations.</li>
</ul>
<p><strong>Ordinal:</strong> Related to categorical data, this type differs in that they can be ranked, at least qualitatively.</p>
<p>For example, while body condition may be a qualitative assessment, “obese” clearly indicates greater fat stores than “well-conditioned”, which is greater than “emaciated”. Thus, ordinal data fall between being strictly quantitative or strictly qualitative. In some cases, if there are numerous categories, you can begin to think of them as approaching continuous data, although one important difference is that there is no clear numerical value that you can assign to the different categories (i.e., it is unclear whether the difference between obese and well-conditioned is the same as the difference between well-conditioned and emaciated). It may make sense to apply rank order statistics to ordinal data, but it would not make sense to add, subtract, or multiply these categories.</p>
</section><section id="analysis-approaches-and-their-relationship-to-data" class="level1"><h1>Analysis approaches and their relationship to data</h1>
<p>It may be obvious that data type will dictate the types of analyses one can do. It might be less obvious that the <strong>question of interest</strong> and whether there is a <em>quantitative or ordinal outcome</em> also drive our analyitical approach.</p>
<section id="when-we-want-to-know-the-strength-of-the-quantitative-relationship" class="level3"><h3 class="anchored" data-anchor-id="when-we-want-to-know-the-strength-of-the-quantitative-relationship">When we want to know the strength of the quantitative relationship</h3>
<p>Methods for <strong>quantitative responses</strong> (or outcomes) that address questions such as “<em>how much does leg length increase with body size?</em>”? In other words, “<em>how much does variable Y change with each increment of change in variable X</em>?” These are usually referred to as <strong>regression approaches</strong>.</p>
<p>There are many subtypes of regression such as linear regression for continuous outcomes, and Poisson regression for discrete outcomes.</p>
<ul>
<li>
<strong><em>Linear regression</em></strong> predicts a continuous response, such as body size.</li>
<li>
<strong><em>Poisson regression</em></strong> predicts a count or discrete response, such as population size.</li>
</ul>
<p>Both types of regression can be based independent variables that are continuous, discrete, or categorical (or some combination). They differ in the underlying distribution of the modeled response variable, often a normal distribution for linear regression, and a Poisson distribution for the Poisson regression.</p>
</section><section id="when-we-want-to-know-about-grouping" class="level3"><h3 class="anchored" data-anchor-id="when-we-want-to-know-about-grouping">When we want to know about grouping</h3>
<p>Methods that recover <strong>categorical responses</strong>, in other words, categorizing observations based on the analysis of data, are usually referred to as <strong>classification approaches.</strong> These methods are useful for looking for order in nature, such as whether different species can be grouped into “ecomorphs” based on their morphology, or to predict the type of behavioral response (e.g., “attack” or “flee”) based on responses to different stimuli.</p>
<p>It is possible to obtain an ordinal response as well, using <a href="https://en.wikipedia.org/wiki/Ordinal_regression"><strong>ordinal regression</strong></a>. Alternatively, the the response can be treated as unordered categorical or as continuous (depending on how you code them, i.e., in R as a factor or numeric).</p>
<p>There are no hard and fast rules regarding when it is appropriate to treat an ordinal variable as fully quantitative. It should, however, at least be explained or justified. You can always treat it as categorical, but then you lose some information on the ranking of the variable.</p>
<p>To add to the confusion, these classification methods are often based on regression, with the decision to classify based on one category or another dependent on comparing distances or probabilities based on regression results.<sup>1</sup></p>
<p>Recently, there has been a lot of interest in AI and machine learning. This is often just a fancy way of renaming <strong><em>discriminant function analysis</em></strong> and <strong><em>cluster analysis</em></strong>. When you see <em>supervised</em> learning in the literature, it refers to cases when we have the categories predefined, and often we have a training dataset with data on individuals of each category to use to train the classification algorithm before we use it to predict grouping (i.e., <em>discriminant function analysis</em>). When we donʻt have the categories <em>a priori</em>, and the algorithms determine the categories and their number, these analysis methods are usually referred to as <em>clustering approaches</em> and are also called <em>unsupervised</em> learning methods.</p>
<p>We will return to and apply some of those methods later in the course.</p>
</section></section><section id="data-types-in-r" class="level1"><h1>Data types in R</h1>
<p>Now that we have a basic understanding of the conceptual landscape of data, letʻs breifly discuss how these different types of data are represented in and handled by R.</p>
<p>If you would like a gentle video walk through/demonstration of data types, now would be a good time to check out the <em>Types</em> section of the RStudio <a href="https://rstudio.cloud/learn/primers/1.2">programming basic primer</a>. For more details and examples see <a href="https://rafalab.github.io/dsbook/r-basics.html">chapter 3 of IDS</a>.</p>
<section id="basic-data-types" class="level2"><h2 class="anchored" data-anchor-id="basic-data-types">Basic data types</h2>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
R has six basic (atomic) types of data:
</div>
</div>
<div class="callout-body-container callout-body">
<table class="caption-top table">
<thead><tr class="header">
<th>Atomic Type</th>
<th style="text-align: left;">Short Description</th>
<th style="text-align: left;">Size in bytes</th>
</tr></thead>
<tbody>
<tr class="odd">
<td>
<strong>string</strong> (or character)</td>
<td style="text-align: left;">text</td>
<td style="text-align: left;">1 (per character)</td>
</tr>
<tr class="even">
<td><strong>integer</strong></td>
<td style="text-align: left;">countable numbers</td>
<td style="text-align: left;">4</td>
</tr>
<tr class="odd">
<td><strong>real</strong></td>
<td style="text-align: left;">real numbers</td>
<td style="text-align: left;">8</td>
</tr>
<tr class="even">
<td><strong>logical</strong></td>
<td style="text-align: left;">TRUE or FALSE</td>
<td style="text-align: left;">4</td>
</tr>
<tr class="odd">
<td><strong>complex</strong></td>
<td style="text-align: left;">numbers with imaginary component</td>
<td style="text-align: left;"></td>
</tr>
<tr class="even">
<td><strong>raw</strong></td>
<td style="text-align: left;">raw bytes</td>
<td style="text-align: left;">1</td>
</tr>
</tbody>
</table>
<p><em><strong>All other data types are derived from the atomic types</strong></em></p>
</div>
</div>
<p>Note: Most computers use 64-bit operating systems these days, so the sizes above are for 64-bit software.</p>
<p>For a quick tour of the data types, see <a href="https://r-coder.com/data-types-r" class="uri">https://r-coder.com/data-types-r</a></p>
<p><strong>String/character:</strong> Character values are alphanumeric values (plus whitespace, punctuation, etc.). A string is a collection of characters, in other words “text”.</p>
<ul>
<li>strings can be pasted together using the <code><a href="https://rdrr.io/r/base/paste.html">paste()</a></code> function.</li>
<li>R has powerful tools for <strong>string manipulation</strong>, including searching, replacing, and customized partial matching (with or without replacement) using <strong>wildcards</strong> and perl-like <a href="https://github.com/rstudio/cheatsheets/blob/master/regex.pdf"><strong>regular expressions</strong> (or <strong>regex</strong>)</a> using base functions such as
<ul>
<li><code><a href="https://rdrr.io/r/base/grep.html">grep()</a></code></li>
<li><code><a href="https://rdrr.io/r/base/grep.html">sub()</a></code></li>
<li><code><a href="https://rdrr.io/r/base/grep.html">gsub()</a></code></li>
<li><code><a href="https://rdrr.io/r/base/substr.html">substr()</a></code></li>
</ul>
</li>
<li>There are also packages specific for string manipulation including the <a href="https://stringr.tidyverse.org/"><code>stringr</code> package</a> which is part of the tidyverse.</li>
</ul>
<p>It is very likely that you will need to work with strings at some point during a data analysis, even if it is only to find specific values, clean up variable names, etc.</p>
<p>These problems can be quite the headache! But instead of editing them by hand and possibly making an error, it is better to do this with code. It also makes it easier to keep a record of the original data and all of the changes made to it, improving the reproducibility of your analysis.</p>
<p>There is a learning curve to using these tools, especially <strong>regex</strong> syntax, but they are very powerful and well worth your time.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Good sources for practice manipulating strings:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>For beginners: Review <a href="https://r4ds.had.co.nz/strings.html">the <em>Strings</em> chapter (14) of R4DS</a>, and do the exercises.</li>
<li><a href="https://rafalab.github.io/dsbook/string-processing.html">The <em>string processing</em> chapter (25) of IDS</a></li>
<li>
<a href="https://stat545.com/character-vectors.html">the <em>Character Vectors</em> chapter in the STAT 545 book</a> by <a href="https://jennybryan.org/">Jenny Bryan</a>
</li>
</ul>
<p><strong>Decide which one is right for your level and work through some examples. I think youʻll agree that it is worth your time.</strong></p>
</div>
</div>
<p><strong>Numeric (double or integer):</strong> Variables of type <code>numeric</code> in R are either integers or double precision (representing real numbers).</p>
<ul>
<li>Integers and real values are different, but in practice most R users donʻt pay attention to this distinction. Integer values tend to be coerced (converted) to real values if any mathematical operations are done to them.</li>
<li>If an integer is explicity needed, you can create them using functions such as <code><a href="https://rdrr.io/r/base/integer.html">as.integer()</a></code>.</li>
<li>Note that when you type an integer value, e.g.&nbsp;<code>x &lt;- 2</code>, into R, this is considered numeric by default.</li>
<li>If you want to make sure a value is treated as integer, add an <code>L</code>, e.g.&nbsp;<code>x &lt;- 2L</code>.</li>
</ul>
<p><strong>Logical:</strong> Logical variables are binary and can take on only two values, <code>TRUE</code> or <code>FALSE</code> (which are <em>reserved words</em> that only take on these meanings in R).</p>
<ul>
<li>In R, logical values are treated as <strong>integers</strong>, and interpreted as 1 for <code>TRUE</code> and 0 for <code>FALSE</code>. It is possible to <code>sum(TRUE)</code> or a vector of logicals, for example.<br>
</li>
<li>R also understands <code>T</code>, <code>True</code>, and <code>true</code> for <code>TRUE</code>, and the corresponding representations for <code>FALSE</code>.</li>
<li>Importantly, logical comparisons are used for <strong>indexing</strong>. You will use logical comparisons when cleaning and checking your data, or running analyses, e.g., if you want to see if your variable <code>x</code> is greater than 5, then the R command <code>x &gt; 5</code> will return either TRUE or FALSE, based on the value of <code>x</code>.</li>
<li>
<em>Note: reserved words are understood as constants and should not be “quoted”</em>.</li>
</ul></section><section id="derived-data-types" class="level2"><h2 class="anchored" data-anchor-id="derived-data-types">Derived data types</h2>
<p>R also allows derived data types called <strong>classes</strong> that are built up from atomic data types. There are R base classes as well as new classes that can be defined as needed by programmers (maybe you?).</p>
<p><strong>Factors:</strong> Are Rʻs class for categorical variables.</p>
<ul>
<li>
<strong>Factors</strong> have <strong>names</strong> and <strong>values</strong>.</li>
<li>For example, a <strong>size</strong> factor may have <code>names</code> (or <code>levels</code>) of <code>small</code>, <code>medium</code>. and <code>large</code> with values 0,1,2. Here, the values simply indicate the different categories, with the names being the human-friendly labels for the values.<br>
</li>
<li>Factors can be ordered/ordinal or not.</li>
<li>Factors could be numeric values, e.g., the number of offspring.</li>
<li>Or it could be a factor coding for 3 types of habitat (unordered),</li>
<li>Or 3 levels of life history stage (ordered).</li>
<li>An excellent package to work with factors is the <a href="https://forcats.tidyverse.org/"><code>forcats</code> package</a>.</li>
</ul>
<p>For more about factors, work through the <a href="https://r4ds.had.co.nz/factors.html"><em>Factors</em> chapter of R4DS</a>, and do the exercises.</p>
<p><strong>Date/time:</strong> Dates in base R are of the class <code>Date</code> (and are called <code>POSIX</code> variables). The <a href="https://lubridate.tidyverse.org/"><code>lubridate</code> package</a> is a tidyverse package to work with dates, which many people find easier. There are other packages as well.</p>
<p>Additional resources are the <a href="https://r4ds.had.co.nz/dates-and-times.html"><em>Dates and times</em> chapter of R4DS</a> and the <a href="https://rafalab.github.io/dsbook/parsing-dates-and-times.html"><em>Parsing Dates and Times</em> chapter of IDS</a>.</p>
<p><strong>Programmer-defined classes</strong> Many packages define their own classes. For example class <code>phylo</code> is used to represent phylogenetic trees in the <code>ape</code> package.</p>
<section id="there-are-several-functions-that-can-show-you-the-data-type-of-an-r-object" class="level3"><h3 class="anchored" data-anchor-id="there-are-several-functions-that-can-show-you-the-data-type-of-an-r-object">There are several functions that can show you the data type of an R object</h3>
<p>such as <code><a href="https://rdrr.io/r/base/typeof.html">typeof()</a></code>, <code><a href="https://rdrr.io/r/base/mode.html">mode()</a></code>, <code><a href="https://rdrr.io/r/base/mode.html">storage.mode()</a></code>, <code><a href="https://rdrr.io/r/base/class.html">class()</a></code> and <code><a href="https://rdrr.io/r/utils/str.html">str()</a></code>.</p>
</section></section></section><section id="data-structures-in-r" class="level1"><h1>Data structures in R</h1>
<p>Data in R are stored in data structures called <strong>objects</strong>.</p>
<p><strong>Vectors:</strong> vectors are the simplest object, a collection of data elements in a single sequence.</p>
<ul>
<li>One way to create vectors is with the <code>concatenate</code> command, <code><a href="https://rdrr.io/r/base/c.html">c()</a></code>.<br>
</li>
<li>
<code>1:3</code> is shorthand for a numeric sequence <code>=c(1,2,3)</code>
</li>
</ul>
<div class="cell">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  3 12  5</code></pre>
</div>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">y</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1 2 3</code></pre>
</div>
</div>
<ul>
<li>
<strong>A single vector can contain only one type</strong> (e.g., all characters or all numeric).</li>
<li>If you try to mix and match, everything will default to the lowest common denominator, typically a character (anything can be a character).</li>
</ul>
<div class="cell">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dog"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/class.html">class</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "numeric"</code></pre>
</div>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/class.html">class</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "character"</code></pre>
</div>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x1</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "3"   "1"   "dog"</code></pre>
</div>
</div>
<p>What happened?</p>
<p><strong>Matrices:</strong> A matrix is a rectangular collection of data elements in rows and columns.</p>
<ul>
<li>A matrix can contain only one type.</li>
<li>Internally, R stores matrices as a long vector, keeping track of where the columm breaks are.</li>
<li>Matrices are really important for the matrix math used to solve many statistical models.</li>
</ul>
<p><strong>Data frames:</strong> A data frame is a rectangular data structure that is designed to store records of individual subjects.</p>
<ul>
<li>A data frame has rows and columns.</li>
<li>Columns are allowed to be of different data types (for example, “character” for the subject names and “numeric” for measured variables for each subject, and “factors” for categories such as sex, etc.).</li>
<li>Internally, data frames are stored as a list of vectors, one for each column. This allows each column to have a different type.</li>
<li>Each columm must have the same number of elements or rows, i.e., it must be rectangular.</li>
<li>Typically, the columms of data frames have names corresponding to variable names.</li>
</ul>
<p><strong>Lists:</strong> Lists do not have to be rectangular and are the most flexible data type in R. A list is a vector possibly composed of different structures and of varying length (this is the only type where that is allowed!). &gt; - Lists are commonly used for model fits in statistical functions. For example, you may want to store the model (an expression), the input data (a dataframe), the output coefficients (a vector), - R has many powerful functions that operate on lists.</p>
<p>Other types of data structures exist; they are often introduced by specific R packages. An important one to know is the <code>tibble</code> which is a type of data frame used in the <code>tidyverse</code>. It is similar, but not exactly like a data frame. You can read more about <code>tibbles</code> <a href="https://tibble.tidyverse.org/">on its package website</a> and in <a href="https://r4ds.had.co.nz/tibbles.html">R4DS chapter 10</a>.</p>
<section id="other-derived-data-types" class="level2"><h2 class="anchored" data-anchor-id="other-derived-data-types">Other derived data types</h2>
<p><strong>Timeseries:</strong> A very useful set of tools for times-series analysis in R is the set of packages called <a href="https://tidyverts.org/">the tidyverts</a>. CRAN also has a <a href="https://cran.r-project.org/web/views/TimeSeries.html">Task View for <em>Time Series Analysis</em>.</a> (A <em>Task View</em> on CRAN is a site that tries to combine and summarize various R packages for a specific topic). Another task view that deals with longitudinal/time-series data is the <a href="https://cran.r-project.org/web/views/Survival.html"><em>Survival Analysis</em> Task View</a>.</p>
<p><strong>Omics:</strong> The <a href="https://www.bioconductor.org/">bioconductor</a> website is your source for (almost) all tools and resources related to omics-type data analyses in R.</p>
<p><strong>Text:</strong> Working with and analyzing larger sections of text is different from the simple string manipulation discussed above. These days, analysis of text often goes by the term <em>natural language processing</em>. Such text analysis will continue to increase in importance, given the increasing data streams of that type. If you are interested in doing full analyses of text data, the <a href="https://juliasilge.github.io/tidytext/"><code>tidytext</code> R package</a> and the <a href="https://www.tidytextmining.com/">Text mining with R book</a> are great resources. A short introduction to this topic is <a href="https://rafalab.github.io/dsbook/text-mining.html">The <em>text mining</em> chapter (27) of IDS.</a></p>
<p><strong>Images:</strong> Images are generally converted into multiple matrices of values for different pixels of an image. For instance, one could divide an image into a 100x100 grid of pixels, and assign each pixel a RGB values and intensity. That means one would have 4 matrices of numeric values, each of size 100x100. One would then perform operations on those values. We won’t do anything with images here, there are some R packages for analyzing image data.</p>
<p><strong>Videos:</strong> Are a time-series of images. Analysis of videos therefore has an extra layer of complexity.</p>
</section></section><section id="attributes-of-objects" class="level1"><h1>Attributes of Objects</h1>
<p>Each object in R has certain characteristics called <strong>attributes</strong>. You can think of this as the metadata for R objects. These attributes are what allow functions written by anyone to be reusable by others, so long as the object is of the correct class.</p>
<p>The common attributes of objects (the most helpful to know are <strong>class, mode, length, dimension</strong>, and <strong>names</strong>:</p>
<ul>
<li>
<code>class</code> Describes the derived type of object, it may be a built-in class or written by a package author or user. Classes are used for methods dispatch.</li>
<li>
<code>mode</code> Often describes the atomic type of object. Sometimes called <em>storage mode</em>. Can be the same as the class, if it is an atomic type.</li>
<li>
<code>length</code> The number of fundamental elements of a vector.</li>
<li>
<code>dimension</code> Rectangular objects such as matrices and data frames have two dimensions, for the numbers of rows and columns (or the length of the vectors and numbers of vectors). 3D and higher dimensional arrays have 3 or more dimensions.</li>
<li>
<code>names</code> Names are optional but often useful to apply labels to internal elements of objects. If no names are given, the internal values can be referenced by their position (index).</li>
</ul></section><section id="helpful-functions-for-creating-objects" class="level1"><h1>Helpful functions for creating objects</h1>
<table class="caption-top table">
<thead><tr class="header">
<th>Functions</th>
<th style="text-align: left;">Actions</th>
</tr></thead>
<tbody>
<tr class="odd">
<td>c(n1, n2, n3)</td>
<td style="text-align: left;">combines elements into an object</td>
</tr>
<tr class="even">
<td>cbind(x, y)</td>
<td style="text-align: left;">binds objects together by column</td>
</tr>
<tr class="odd">
<td>rbind(x, y)</td>
<td style="text-align: left;">binds objects together by row</td>
</tr>
</tbody>
</table>
<section id="for-sequences" class="level2"><h2 class="anchored" data-anchor-id="for-sequences">For sequences</h2>
<table class="caption-top table">
<thead><tr class="header">
<th>Functions</th>
<th style="text-align: left;">Actions</th>
</tr></thead>
<tbody>
<tr class="odd">
<td>seq()</td>
<td style="text-align: left;">generate a sequence of numbers</td>
</tr>
<tr class="even">
<td>1:10</td>
<td style="text-align: left;">sequence from 1 to 10 by 1</td>
</tr>
<tr class="odd">
<td>rep(x, times)</td>
<td style="text-align: left;">replicates x</td>
</tr>
<tr class="even">
<td>sample(x, size, replace=FALSE)</td>
<td style="text-align: left;">sample size elements from x</td>
</tr>
<tr class="odd">
<td>rnorm(n, mean=0, sd=1)</td>
<td style="text-align: left;">draw n samples from normal distribution</td>
</tr>
</tbody>
</table></section><section id="creating-or-coercing-objects-to-different-class" class="level2"><h2 class="anchored" data-anchor-id="creating-or-coercing-objects-to-different-class">Creating or Coercing objects to different class</h2>
<table class="caption-top table">
<thead><tr class="header">
<th>Functions</th>
<th style="text-align: left;">Actions</th>
</tr></thead>
<tbody>
<tr class="odd">
<td>vector()</td>
<td style="text-align: left;">create a vector</td>
</tr>
<tr class="even">
<td>matrix()</td>
<td style="text-align: left;">create a matrix</td>
</tr>
<tr class="odd">
<td>data.frame()</td>
<td style="text-align: left;">create a data frame</td>
</tr>
<tr class="even">
<td>as.vector(x)</td>
<td style="text-align: left;">coerces x to vector</td>
</tr>
<tr class="odd">
<td>as.matrix(x)</td>
<td style="text-align: left;">coerces to matrix</td>
</tr>
<tr class="even">
<td>as.data.frame(x)</td>
<td style="text-align: left;">coerces to data frame</td>
</tr>
<tr class="odd">
<td>as.character(x)</td>
<td style="text-align: left;">coerces to character</td>
</tr>
<tr class="even">
<td>as.numeric(x)</td>
<td style="text-align: left;">coerces to numeric</td>
</tr>
<tr class="odd">
<td>factor(x)</td>
<td style="text-align: left;">creates factor levels for elements of x</td>
</tr>
<tr class="even">
<td>levels()</td>
<td style="text-align: left;">orders the factor levels as specified</td>
</tr>
</tbody>
</table></section></section><section id="examples" class="level1"><h1>Examples</h1>
<section id="various-ways-to-create-vectors" class="level3"><h3 class="anchored" data-anchor-id="various-ways-to-create-vectors">Various ways to create vectors:</h3>
<div class="cell">
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># numeric</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1 5 7 2 6</code></pre>
</div>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/rep.html">rep</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span>, times<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] 1 5 7 2 6 1 5 7 2 6</code></pre>
</div>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/stats/Normal.html">rnorm</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">y</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  0.70831083  0.02616606  0.76951907  0.49269606  0.17509325  2.23678382
[7] -0.07900867  0.89378805</code></pre>
</div>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">goodanswer</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># logical</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">goodanswer</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  TRUE  TRUE FALSE</code></pre>
</div>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">species</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">letters</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># special stored data object: lower case letters a - d</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">species</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "a" "b" "c" "d"</code></pre>
</div>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">LETTERS</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A B C  # character</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "A" "B" "C"</code></pre>
</div>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">treatment</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"low"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"low"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"high"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"med"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"high"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># character vector</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">treatment</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "low"  "low"  "high" "med"  "high"</code></pre>
</div>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">treat</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/factor.html">factor</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">treatment</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create a factor</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">treat</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] low  low  high med  high
Levels: high low med</code></pre>
</div>
</div>
<p>The vector <code>treat</code> has five elements, it is factor with levels of <code>low</code>, <code>med</code>, or <code>high</code>.</p>
<p>It is simple to do arithmetic on numeric vectors:</p>
<div class="cell">
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1 5 7 2 6</code></pre>
</div>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 3 7 9 4 8</code></pre>
</div>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  1 25 49  4 36</code></pre>
</div>
</div>
<p>Typically the class of a vector is returned as the type of information contained, so that return values of the atomic types “numeric”, “character”, “factor”, or “logical” indicate that the object is a vector:</p>
<div class="cell">
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/class.html">class</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "numeric"</code></pre>
</div>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/mode.html">mode</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "numeric"</code></pre>
</div>
</div>
</section><section id="factors-are-categorical-data" class="level3"><h3 class="anchored" data-anchor-id="factors-are-categorical-data">Factors are categorical data</h3>
<p>For example, <code>large</code> and <code>small</code>, or <code>blue</code>, <code>red</code>, and <code>yellow</code>. Factors may be ordered, which means that the order of the categories has meaning (like income categories). By default, factors are unordered. Levels are the categories that the factor can take on.</p>
<p>You can easily coerce one type to another:</p>
<div class="cell">
<div class="sourceCode" id="cb37" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/numeric.html">as.numeric</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">treat</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># coerce to numeric</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2 2 1 3 1</code></pre>
</div>
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/character.html">as.character</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># coerce to character</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "0.708310834684403"   "0.0261660569479235"  "0.769519071353493"  
[4] "0.49269605923231"    "0.17509324974742"    "2.23678382276967"   
[7] "-0.0790086663337881" "0.893788053618042"  </code></pre>
</div>
</div>
<p>Note that when values are quoted, they are of type character.</p>
<div class="cell">
<div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/class.html">class</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pony"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "character"</code></pre>
</div>
</div>
<p>However, notice that factors return different values for class and mode:</p>
<div class="cell">
<div class="sourceCode" id="cb43" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/class.html">class</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">treat</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "factor"</code></pre>
</div>
<div class="sourceCode" id="cb45" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/mode.html">mode</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">treat</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "numeric"</code></pre>
</div>
</div>
<p>And sometimes, when doing ordinary manipulations such as coercing to numeric or combining vectors together to create a matrix, we get:</p>
<div class="cell">
<div class="sourceCode" id="cb47" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/numeric.html">as.numeric</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">treat</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2 2 1 3 1</code></pre>
</div>
<div class="sourceCode" id="cb49" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/cbind.html">cbind</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">treat</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     x treat
[1,] 1     2
[2,] 5     2
[3,] 7     1
[4,] 2     3
[5,] 6     1</code></pre>
</div>
<div class="sourceCode" id="cb51" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/graphics/plot.default.html">plot</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">treat</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure"><p><img src="https://mbutler808.github.io/posts/2025-02-13-data/index_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>This is because internally, factors are stored as digits, 1, 2, etc. to the number of categories. The characters that you see are actually labels for the factor categories called “levels”. Look at the help page for factor (<code><a href="https://rdrr.io/r/base/factor.html">?factor</a></code>) and read the entry for levels. If nothing is specified for the order of the levels, then they are numbered alphabetically! This explains the weird behavior. So if you want the order of the levels to be a more logical “low, medium, high”, you can do so by specifying the order of the levels explicitly when you create the factor:</p>
<div class="cell">
<div class="sourceCode" id="cb52" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">treat</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/factor.html">factor</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">treat</span>, levels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"low"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"med"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"high"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">treat</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] low  low  high med  high
Levels: low med high</code></pre>
</div>
<div class="sourceCode" id="cb54" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/graphics/plot.default.html">plot</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">treat</span>,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure"><p><img src="https://mbutler808.github.io/posts/2025-02-13-data/index_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>If you get frustrated because youʻre trying to treat a factor as a character, itʻs sometimes safer to manipulate factors by coercing to character first before doing anything else.</p>
<p>Hereʻs another illustration of methods dispatch - The plot function by default accepts arguments in x, y order. If x is a factor as above, the plot assumes a categorial format for the x-axis. However, if you switch the order:</p>
<div class="cell">
<div class="sourceCode" id="cb55" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/graphics/plot.default.html">plot</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span>,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">treat</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure"><p><img src="https://mbutler808.github.io/posts/2025-02-13-data/index_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>It is treated as a continuous x-axis. This is because methods dispatch for the plot function will be guided by the class of the objects that you supply. With x as a factor, R assumes you want a discrete x-axis, with the x as a continuous variable and y as the factor level, it will plot on the internal codes for the factor levels (if you want a horizontal bar plot use <code>barplot(..., horiz=TRUE)</code>. If you want histograms use <code><a href="https://rdrr.io/r/graphics/hist.html">hist()</a></code>.</p>
<p>If you name a vector, the names are attached to each value:</p>
<div class="cell">
<div class="sourceCode" id="cb56" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/names.html">names</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">treatment</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> low  low high  med high 
   1    5    7    2    6 </code></pre>
</div>
<div class="sourceCode" id="cb58" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/names.html">names</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "low"  "low"  "high" "med"  "high"</code></pre>
</div>
</div>
</section><section id="matrices" class="level3"><h3 class="anchored" data-anchor-id="matrices">Matrices</h3>
<p>Data are often rectangular. For example, you might have height and weight columns for each subject (rows), or you might have a matrix describing the genetic relatedness between each pair of individuals in a family. Whether it is a square or a rectangular matrix, you will have a series of vectors of equal length. In fact, in R you can think of it as a single long vector with breaks at the end of each column.</p>
<p>Creating a matrix:</p>
<div class="cell">
<div class="sourceCode" id="cb60" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">xy</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/cbind.html">cbind</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span>,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># column bind</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in cbind(x, y): number of rows of result is not a multiple of vector
length (arg 1)</code></pre>
</div>
<div class="sourceCode" id="cb62" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">xy</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     x           y
[1,] 1  0.70831083
[2,] 5  0.02616606
[3,] 7  0.76951907
[4,] 2  0.49269606
[5,] 6  0.17509325
[6,] 1  2.23678382
[7,] 5 -0.07900867
[8,] 7  0.89378805</code></pre>
</div>
<div class="sourceCode" id="cb64" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">z</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/matrix.html">matrix</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, nrow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#create a matrix with 2 rows</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">z</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3]
[1,]    1    3    5
[2,]    2    4    6</code></pre>
</div>
<div class="sourceCode" id="cb66" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/matrix.html">matrix</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, nrow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, byrow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3]
[1,]    1    2    3
[2,]    4    5    6</code></pre>
</div>
<div class="sourceCode" id="cb68" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/class.html">class</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">z</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "matrix" "array" </code></pre>
</div>
<div class="sourceCode" id="cb70" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/mode.html">mode</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">z</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "numeric"</code></pre>
</div>
</div>
<p>Names applied to a matrix will attach the names to each value. If you want to name the rows and columns of a matrix you must use <code><a href="https://rdrr.io/r/base/colnames.html">rownames()</a></code> or <code><a href="https://rdrr.io/r/base/colnames.html">colnames()</a></code></p>
<div class="cell">
<div class="sourceCode" id="cb72" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/names.html">names</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">z</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">letters</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>  </span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">z</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3]
[1,]    1    3    5
[2,]    2    4    6
attr(,"names")
[1] "a" "b" "c" "d" "e" "f"</code></pre>
</div>
<div class="sourceCode" id="cb74" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">z</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>c 
3 </code></pre>
</div>
<div class="sourceCode" id="cb76" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">z</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"f"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>f 
6 </code></pre>
</div>
<div class="sourceCode" id="cb78" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/colnames.html">colnames</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">z</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tom"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dick"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"harry"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">z</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     tom dick harry
[1,]   1    3     5
[2,]   2    4     6
attr(,"names")
[1] "a" "b" "c" "d" "e" "f"</code></pre>
</div>
</div>
<p>Matrices have rows and columns, and are all of the same type whether it is numeric or character. There is a full suite of matrix math facilities in R to operate on numeric matrices.</p>
<div class="cell">
<div class="sourceCode" id="cb80" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">z</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     tom dick harry
[1,]   3    5     7
[2,]   4    6     8</code></pre>
</div>
<div class="sourceCode" id="cb82" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">z</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ordinary element-by-element multiplication</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     tom dick harry
[1,]   2    6    10
[2,]   4    8    12</code></pre>
</div>
<div class="sourceCode" id="cb84" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">z</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/matmult.html">%*%</a></span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># matrix multiplication</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1]
[1,]   27
[2,]   34</code></pre>
</div>
</div>
</section><section id="data-frames" class="level3"><h3 class="anchored" data-anchor-id="data-frames">Data Frames</h3>
<p>Dataframes are superficially similar to matrices. They are rectangular. However, a major difference is that the vectors that comprise a dataframe can have vectors of different type. For example, one column can contain species names, whereas the other columns might contain numerical data.</p>
<div class="cell">
<div class="sourceCode" id="cb86" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">species</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">letters</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/stats/Normal.html">rnorm</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">dat</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/data.frame.html">data.frame</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">species</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
</div>
<p>Internally, it is no longer a single vector but actually a list of vectors:</p>
<div class="cell">
<div class="sourceCode" id="cb87" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/class.html">class</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">dat</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "data.frame"</code></pre>
</div>
<div class="sourceCode" id="cb89" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/mode.html">mode</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">dat</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "list"</code></pre>
</div>
<div class="sourceCode" id="cb91" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/names.html">names</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">dat</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "species" "x"       "y"      </code></pre>
</div>
<div class="sourceCode" id="cb93" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/length.html">length</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">dat</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 3</code></pre>
</div>
<div class="sourceCode" id="cb95" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/dim.html">dim</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">dat</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 3 3</code></pre>
</div>
</div>
<p>This is why the length of a dataframe is the number of columns. The names are the names of the columns, etc.</p>
<p>You can access the columns of dataframes using the <code>$</code> operator, or using brackets, or by index number: and the name of the element, by the index number and double brackets, or by name and double bracket. Or a single value by using indexing on the row and column number separated by a comma. More on this later in the indexing chapter.</p>
<div class="cell">
<div class="sourceCode" id="cb97" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">dat</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">species</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "a" "b" "c"</code></pre>
</div>
<div class="sourceCode" id="cb99" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">dat</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  species
1       a
2       b
3       c</code></pre>
</div>
<div class="sourceCode" id="cb101" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">dat</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] -1.027375</code></pre>
</div>
</div>
</section><section id="lists" class="level3"><h3 class="anchored" data-anchor-id="lists">Lists</h3>
<p>Lists are vectors of arbitrary objects. You can string any kind of objects together in a list. Sometimes the objects are identical, such as when you are doing a massive simulation study and each list element may be a simulated dataset in form of a dataframe. Alternatively, each element of a list may contain a different type of object. This is especially useful for model fitting output, for example, where you may want to store the input data in one list element, and in other list elements: the expression for the model, the fitted parameters, and the information criteria. All of these items are logically related, and if you name the list elements you can easily access the information wanted.</p>
<div class="cell">
<div class="sourceCode" id="cb103" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mylist</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/list.html">list</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">species</span>,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span>,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">y</span>,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">z</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/names.html">names</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mylist</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"species"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"z"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/class.html">class</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mylist</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "list"</code></pre>
</div>
<div class="sourceCode" id="cb105" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/mode.html">mode</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mylist</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "list"</code></pre>
</div>
<div class="sourceCode" id="cb107" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/length.html">length</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mylist</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 4</code></pre>
</div>
<div class="sourceCode" id="cb109" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/dim.html">dim</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mylist</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>NULL</code></pre>
</div>
</div>
<p>Note that lists have no <strong>dimension</strong> (because they are more flexible vectors - kinda like stretchy christmas stockings). However, if you have a matrix or a dataframe within a list those will have vectors. The object within lists have their own attributes.</p>
<p>You can access the z element of mylist in a number of ways, using the <code>$</code> operator and the name of the element, by the index number and double brackets, or by name and double bracket:</p>
<div class="cell">
<div class="sourceCode" id="cb111" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mylist</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">z</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     tom dick harry
[1,]   1    3     5
[2,]   2    4     6
attr(,"names")
[1] "a" "b" "c" "d" "e" "f"</code></pre>
</div>
<div class="sourceCode" id="cb113" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/names.html">names</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mylist</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">z</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "a" "b" "c" "d" "e" "f"</code></pre>
</div>
<div class="sourceCode" id="cb115" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/names.html">names</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mylist</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "a" "b" "c" "d" "e" "f"</code></pre>
</div>
<div class="sourceCode" id="cb117" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/names.html">names</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mylist</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"z"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "a" "b" "c" "d" "e" "f"</code></pre>
</div>
</div>
<p>To see the structure of the list object, use <code><a href="https://rdrr.io/r/utils/str.html">str()</a></code></p>
<div class="cell">
<div class="sourceCode" id="cb119" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/utils/str.html">str</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mylist</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>List of 4
 $ species: chr [1:3] "a" "b" "c"
 $ x      : num [1:3] 1 2 4
 $ y      : num [1:3] -1.03 -1.39 1.72
 $ z      : int [1:2, 1:3] 1 2 3 4 5 6
  ..- attr(*, "names")= chr [1:6] "a" "b" "c" "d" ...
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : NULL
  .. ..$ : chr [1:3] "tom" "dick" "harry"</code></pre>
</div>
</div>
<p>You can see that there are four elements of <code>mylist</code>, a character vector named <code>species</code>, two numeric vectors named <code>x</code> and <code>y</code>, and a integer matrix called <code>z</code>. Is it starting to make sense?</p>


</section></section><div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>
<ol>
<li id="fn1"><p>For example, logistic regression (a regression to predict a binary [yes/no] outcome) is used for classification. The underlying model predicts a quantitative outcome (a value between 0 and 1 usually interpreted as a probability), which is then binned to make categorical predictions.↩︎</p></li>
</ol></section></div> ]]></description>
  <category>module 2</category>
  <category>week 4</category>
  <category>data</category>
  <category>data structures</category>
  <category>objects</category>
  <guid>https://mbutler808.github.io/posts/2025-02-13-data/</guid>
  <pubDate>Thu, 13 Feb 2025 10:00:00 GMT</pubDate>
</item>
<item>
  <title>Saving your work as R scripts</title>
  <dc:creator>Marguerite Butler</dc:creator>
  <link>https://mbutler808.github.io/posts/2025-02-11-scripts/</link>
  <description><![CDATA[ <!-- Add interesting quote --><section id="pre-lecture-materials" class="level1"><h1>Pre-lecture materials</h1>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Watch ahead
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>Before class, you can prepare by watching this podcast:</strong></p>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/DDInqjxUnS4" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
</div>
</div>
<!-- R emoji aliases:  https://gist.github.com/rxaviers/7360908 -->
<p>✏️</p>
</section><section id="learning-objectives" class="level1"><h1>Learning objectives</h1>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Learning objectives
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>At the end of this lesson you will:</strong></p>
<ul>
<li>Know how to build good scripts</li>
<li>Be able to run source code</li>
<li>Be able to verify your script</li>
<li>Know how to start debugging scripts</li>
<li>Know how to clear your workspace</li>
<li>Know how to use <code><a href="https://rdrr.io/r/base/print.html">print()</a></code> and <code><a href="https://rdrr.io/r/base/cat.html">cat()</a></code>, functions and use your history file</li>
</ul>
</div>
</div>
</section><section id="introduction" class="level1"><h1>Introduction</h1>
<p>Because R is interactive, it is tempting to simply play with code until you get the results you want. The problem with this is that you may not be able to <strong>reproduce</strong> it. Also, you may have made many manipulations of your data, some of which you’ve lost track of, and so your data objects may not really be what you think they are. This makes it impossible to repeat your analysis with confidence.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
A key part of any analysis is verification:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Did you do what you really think you did?</li>
<li>Was the input free of error?</li>
<li>Did the steps of your analysis work without error?</li>
<li>And perhaps most importantly – can you reproduce it?</li>
</ul>
</div>
</div>
</section><section id="clean-scripts" class="level1"><h1>Clean Scripts</h1>
<p>Writing <strong>clean scripts</strong> help you to accomplish these goals. <em>Scripts are lines of code saved in an ordinary text file with a <code>.R</code> or <code>.r</code> ending.</em> (Make sure it is plain text, and NOT an <code>.rtf</code>, <code>.doc</code>, or other type of binary file.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
All good script follows the first three R’s, as you increase along the path of R jedi-hood, you will add on the 4th R
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>
<strong>Readable</strong> – If you look at the script in a month or 6 months, will you be able to easily understand it?</li>
<li>
<strong>Right</strong> – Does it run free of error, and does it produce correct results?</li>
<li>
<strong>Repeatable</strong> – Can you reproduce your results from your input data?</li>
<li>
<strong>Reusable</strong> – Is your coding modular and designed well so that your code can interact with other scripts, and/or use it for other purposes?</li>
</ul>
</div>
</div>
<p>The mac interface has a very nice text editor, and the newer Windows R interfaces are getting better too (or install Notepad++). From the R menu, choose File &gt; New Document (or command-N). Simply type or cut and paste your code from your history file into here. Let’s make a script for the analyses we’ve done thus far.</p>
</section><section id="script-template" class="level1"><h1>Script Template</h1>
<p>First, make sure that you are in the directory that you want the script to execute from (<code>Documents/git/rclass/rclassdata</code>). Start off with any packages that you wish to load, then begin to cut and paste your code.</p>
<p>Make sure to add comments indicated by the <code>#</code> symbol so that you know what the code does:</p>
<p>Here is the basic structure of a script:</p>
<div class="cell">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#library( ...addonpackage... )    # anything between ... needs to be changed </span></span>
<span>      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if none, then you don't need that line</span></span>
<span></span>
<span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#dat &lt;- read.csv(..."your input file.csv"... )       # input data</span></span>
<span></span>
<span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Your lines of code to run analyses</span></span>
<span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># You may have output or processed data that you want to save, </span></span>
<span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create an object for it and write it out to a csv file at the end </span></span>
<span></span>
<span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot graphics</span></span>
<span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/utils/write.table.html">write.csv</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">out</span>, file<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"myoutput.csv"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># output data </span></span></code></pre></div>
</div>
<p>Here is an example example script that reads in data, calculates summary statistics, a linear regression, and a couple of figures.</p>
<div class="cell">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#library(stats)        # stats is part of the base package and doesn't need to be loaded, </span></span>
<span>    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># but if you need an add-on package, you would use library or require here.</span></span>
<span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">dat</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/utils/read.table.html">read.csv</a></span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Data/morphpre.csv"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># read in data</span></span>
<span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">lm.HLSVL</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/stats/lm.html">lm</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">dat</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">HandL</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">dat</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">SVL</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># run a linear model</span></span>
<span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/summary.html">summary</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">lm.HLSVL</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get summary statistics</span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/utils/str.html">str</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">lm.HLSVL</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># look at the linear model object</span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/stats/coef.html">coef</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">lm.HLSVL</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get the slope of the regression</span></span>
<span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/graphics/plot.default.html">plot</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">dat</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">HandL</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">dat</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">SVL</span>, cex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># make a plot with big dots (cex controls size of symbols)</span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/graphics/abline.html">abline</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">lm.HLSVL</span>, col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>              <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plots the regression line, in red</span></span>
<span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/graphics/title.html">title</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Microhylid Hand Length vs Body Size"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add a title</span></span>
<span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/graphics/text.html">text</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/paste.html">paste</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"slope = "</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/stats/coef.html">coef</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">lm.HLSVL</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>   </span>
<span>      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add important info to the text</span></span>
<span></span>
<span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">###</span></span>
<span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># please insert your other lines of code here -- enough </span></span>
<span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   to save a meaningful analysis</span></span>
<span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">###</span></span></code></pre></div>
</div>
<p>Note that I have used spacing and indents to increase the <strong>readability</strong> of the code. Use it to set of blocks of code that accomplish one task, with indents to indicate heirarchy. We will talk more about this in the functions section.</p>
<p>Save the script file as <code>testScript.R</code> or a title of your choice in your <code>rclassdata</code> folder. Now if you want to run the code, you simply type at the R console (from within your Rclass directory):</p>
<div class="cell">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;"><a href="https://rdrr.io/r/base/source.html">source</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"testScript.R"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
</div>
<p>When I am trying to develop a script, I often work by having the script window open next to the R console, and once a bit of code is working, I cut and paste it directly into the script. Save the script and source it. Once you have a good amount of code, you can work by making changes to the script, saving, and sourcing, over and over again.</p>
</section><section id="writing-pdf-to-file" class="level1"><h1>Writing pdf to file</h1>
<p>If you’d like to print your pdf to a file instead of to the screen, you can add the following code into your script:</p>
<div class="cell">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/grDevices/pdf.html">pdf</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>file<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MicrohylidHandLvsSize.pdf"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># open pdf device for printing</span></span>
<span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/graphics/plot.default.html">plot</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">dat</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">HandL</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">dat</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">SVL</span>, cex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remake plot as before</span></span>
<span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/graphics/abline.html">abline</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">lm.HLSVL</span>, col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>              </span>
<span>    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/graphics/title.html">title</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Microhylid Hand Length vs Body Size"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>  </span>
<span>    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/graphics/text.html">text</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/paste.html">paste</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"slope = "</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/stats/coef.html">coef</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">lm.HLSVL</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>  </span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/grDevices/dev.html">dev.off</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># turn off pdf device so future plots go back to screen</span></span></code></pre></div>
</div>
<p>Just to clarify, the syntax is:</p>
<div class="cell">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/grDevices/pdf.html">pdf</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># open pdf device for printing</span></span>
<span> </span>
<span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># lines of code that print to pdf such as a plot</span></span>
<span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   any additional plot elements such as title, text, etc. </span></span>
<span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/grDevices/dev.html">dev.off</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># close pdf device, completing the file</span></span></code></pre></div>
</div>
<p>If you forget <code><a href="https://rdrr.io/r/grDevices/dev.html">dev.off()</a></code> your pdf will be corrupted. If you donʻt print anythying to the pdf, it may be blank or it may also be corrupted.</p>
</section><section id="history-file" class="level1"><h1>History file</h1>
<p>Another handy feature of R is that it automatically saves a history file. That is, a file that has a list of every command you’ve executed in your sessions.</p>
<p>It is saved by default as <code>.history</code> in your working directory. Because the file name begins with a period, it is not visible normally (although it is there – you can see it from the terminal by using the <code>ls -a</code> command). It is great to have in case you are in a bind, but a better practice is to save any important history explicitly with your own filename, either click on the history button on the R gui (box with yellow and blue lines), and click on “save history” at the bottom of the side window, or type the code:</p>
<div class="cell">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/utils/savehistory.html">savehistory</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date_today.Rhistory"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
</div>
<p>This is an ordinary text file, which you can open up and edit (removing all the mistakes), and save as a <code>scriptname.R</code> file.</p>
<p>Another helpful tip when writing source code is to use <code><a href="https://rdrr.io/r/base/print.html">print()</a></code> and <code><a href="https://rdrr.io/r/base/cat.html">cat()</a></code> functions to print out your output to the console. When you are using R in interactive mode, when you type the name of a variable, you get a print of its contents. However, when you source the same code, the variable does not print to the screen. You have to explicitly put a <code><a href="https://rdrr.io/r/base/print.html">print()</a></code> or <code><a href="https://rdrr.io/r/base/cat.html">cat()</a></code> function around it.</p>
<p>Let’s use a built-in dataset called <code>iris</code>, which is the famous Fisher iris dataset. Make a test script file and save it as <code>test.R</code> (or pull it down from the <code>rclassdata</code> repo:</p>
<div class="cell">
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/utils/head.html">head</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">iris</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># iris is a built-in dataset. Print first few lines to screen</span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/names.html">names</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">iris</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># will not print to console when sourced</span></span>
<span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/graphics/plot.default.html">plot</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">iris</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">Sepal.Length</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">iris</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">Sepal.Width</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">spp</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/unique.html">unique</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">iris</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">Species</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># only unique values</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">spp</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/character.html">as.character</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">spp</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># factor -&gt; character</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">spp</span>            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># will not print to console when sourced</span></span>
<span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/print.html">print</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Species names'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># will print</span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/print.html">print</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">spp</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>              <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># will print</span></span>
<span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/cat.html">cat</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'\n'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Species names ='</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">spp</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># concatenate </span></span>
<span>              <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># \n is a carriage return character</span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/summary.html">summary</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">iris</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>             </span></code></pre></div>
</div>
<p>Then test it by running:</p>
<div class="cell">
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;"><a href="https://rdrr.io/r/base/source.html">source</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test.R"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
</div>
<p>You can see that <code><a href="https://rdrr.io/r/base/print.html">print()</a></code> just makes a rough dump of the variables onto the screen. I added a character string so that we would know what variable was being printed to screen. <code><a href="https://rdrr.io/r/base/cat.html">cat()</a></code> makes a nicer, more customized display (it turns everything into a character vector, then pastes them together [i.e., concatenates them] before printing). They both do the same basic job, however. Notice also that <code><a href="https://rdrr.io/r/base/summary.html">summary()</a></code> does print to screen. Usually you only need to use these explicit print statements to see the contents of your variables as you are debugging.</p>
</section><section id="remember-the-workspace" class="level1"><h1>Remember the workspace</h1>
<p>Finally, remember that R is interactive, and the objects you create during a session are still around even after you’ve run your source code and forgotten about them. So to really check that your script is complete, you should shut down R (don’t save the workspace), double click on the name of your script to restart R in the correct directory, and then source the program again. Does it work? Great!!</p>
<p>You could also try clearing all the objects from your workspace using the command:</p>
<div class="cell">
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/rm.html">rm</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/ls.html">ls</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remove a list of objects consisting of the entire workspace</span></span></code></pre></div>
</div>
<p>But this doesn’t unload your packages, and there is still a danger that the script won’t run in a fresh session if you forgot to include loadig the packages in your script. It’s OK to use for minor incremental changes, but the best thing for a real test when you are done drafting your script is to quit R and retry with a blank slate.</p>
<p>In general, most of my analyses are pretty quick in terms of computer time (not coding and debugging time!). So I never save my workspace, because I don’t want to deal with any <strong>ghost</strong> objects I have forgotten about. Instead, I write a nice script that will generate the whole analysis. If it’s a really big complex analysis, you can save intermediate output as R data files (more on this later).</p>
<p>Try to create a script file for all the analyses we’ve done so far (and for every session throughout the course).</p>
</section><section id="letʻs-get-organized" class="level1"><h1>Letʻs get Organized</h1>
<section id="make-sure-you-can-see-file-endings" class="level2"><h2 class="anchored" data-anchor-id="make-sure-you-can-see-file-endings">Make sure you can see file endings</h2>
<p>Does your MacOS or Windows environment show you the file endings (i.e., <code>.R</code>, <code>.pdf</code>, <code>.csv</code>, etc.)? If not be sure to turn them on. Try the instructions below or you can google for “show all file exensions in” (Mac or Windows, etc.).</p>
<section id="mac-os" class="level4"><h4 class="anchored" data-anchor-id="mac-os">Mac OS</h4>
<p>This is a Finder preference. From any Finder window, click on the menu bar: <code>Finder &gt;  Preferences &gt; Advanced &gt;</code> Click on <em>Show all finename extensions</em>.</p>
</section><section id="windows" class="level4"><h4 class="anchored" data-anchor-id="windows">Windows</h4>
<p>This is in File Explorer (Windows key + E). Click on the menu: <code>View &gt; Show &gt; File Name Extensions</code>. You can also choose to show all hidden files if you wish. For pictures <a href="https://pureinfotech.com/show-file-extensions-windows-11/">see here</a></p>
</section></section><section id="text-editor-environment" class="level2"><h2 class="anchored" data-anchor-id="text-editor-environment">Text editor environment</h2>
<p>While I love the R text editor for writing R scripts, for working with multiple .qmd and other files I find it helpful to have a full-featured plain text editor. A new tool that I discovered is the Sublime text editor. If youʻd like to try it out, you can download it here: <a href="https://www.sublimetext.com" class="uri">https://www.sublimetext.com</a></p>
<p>A couple of features I like is that you can have multiple panes open. For example if you want to copy text from an old script to a new script, you can easily see and do that.</p>
<p>It also allows you to organize <em>Projects</em>, various folders that will appear on the sidebar to preserve your workspace. This helps when you are writing text documents across folders. So for example if you have your Rclass folder in one place and your website folder in another, you can have both open within the Sublime project. When you finish working on it you can save the project and reopen it later.</p>
<p>To create a project start by opening a new file. Then choose the <code>Project &gt; Add folder to Project...</code> on the menu bar. You can load mulitple folders.</p>
<p>It has contextual highlighting for Quarto as well as GitHub markdown.</p>
<p>It also has integration with command line R <a href="https://bishwarup-paul.medium.com/a-guide-to-using-r-in-sublime-text-27f78b33f872" class="uri">https://bishwarup-paul.medium.com/a-guide-to-using-r-in-sublime-text-27f78b33f872</a>. You can run R commands in a lower terminal pane, sent directly from your text document in sublime.</p>
</section><section id="different-desktop-windows" class="level2"><h2 class="anchored" data-anchor-id="different-desktop-windows">Different Desktop Windows</h2>
<p>Itʻs also nice to have multiple desktops to organize your work. - It makes it easier to find your different apps. - You may have one workspace for your text editor, and another for your Terminal or CMD prompt, for example. - If I am working with multiple git repos, I might have one desktop just for my Terminal windows with a separate Terminal open for each one.</p>
<p>To use multiple desktops: <a href="https://support.microsoft.com/en-us/windows/multiple-desktops-in-windows-36f52e38-5b4a-557b-2ff9-e1a60c976434">On Windows</a> <a href="https://support.apple.com/guide/mac-help/work-in-multiple-spaces-mh14112/mac">On Mac</a></p>
<p>One the Mac, you can open new desktops by using three fingers to swipe up on the trackpad. Switch between them by swiping left or right with three fingers.</p>
</section><section id="organize-your-projects-into-folders" class="level2"><h2 class="anchored" data-anchor-id="organize-your-projects-into-folders">Organize your Projects into Folders</h2>
<p>Weʻve been learning about reproducibility. One important aspect is file organization. Each project should be organized into one folder that contains:</p>
<ul>
<li>All input data (usually in a Data folder)</li>
<li>All code and documentation</li>
<li>All output</li>
</ul>
<p>The idea is to keep everything complete, self-contained, and clear. Move old versions into a “Trash” folder. If you donʻt end up looking back at it, then delete it! (Or if you are bold, delete it right away!)</p>
<p>A really useful UNIX/CMD command is <code>tree</code>. It shows you the directory structure contained within any folder. It works on both MacOS and Windows.</p>
<p>This is in ASCII – so you can copy and paste it into your README.md file!</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal/CMD</strong></pre>
</div>
<div class="sourceCode" id="cb10" data-filename="Terminal/CMD" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">tree</span> myfolder</span></code></pre></div>
</div>
<p>If it is not pre-installed on your mac, you may need to install it with homebrew:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb11" data-filename="Terminal" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">brew</span> install tree</span></code></pre></div>
</div>
</section></section><section id="exercises" class="level1"><h1>Exercises</h1>
<ol type="1">
<li>Create a script of the work we’ve done so far.</li>
<li>R has great diagnostic plots for linear models. Read about them in the help page for <code><a href="https://rdrr.io/r/stats/plot.lm.html">?plot.lm</a></code> and incorporate a multi-panel figure by adding two lines of code to the script you’ve already made:</li>
</ol>
<div class="cell">
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/graphics/par.html">par</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>mfrow <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set the plot environment to have two rows and two columns</span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/graphics/plot.default.html">plot</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">lmHLSVL</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># or the name of your linear model object          </span></span></code></pre></div>
</div>
<ol start="3" type="1">
<li>Save output to a file.</li>
<li>Modify <code>test.R</code> so that a summary of the iris data prints to the console when sourced.</li>
<li>Explore other datasets in R. At the R command prompt type <code><a href="https://rdrr.io/r/utils/data.html">data()</a></code> to see what is available.</li>
</ol>


</section> ]]></description>
  <category>module 1</category>
  <category>week 3</category>
  <category>R</category>
  <category>scripts</category>
  <category>reproducibility</category>
  <guid>https://mbutler808.github.io/posts/2025-02-11-scripts/</guid>
  <pubDate>Tue, 11 Feb 2025 10:00:00 GMT</pubDate>
</item>
<item>
  <title>Data IO</title>
  <dc:creator>Marguerite Butler</dc:creator>
  <link>https://mbutler808.github.io/posts/2025-02-04-reading-data/</link>
  <description><![CDATA[ <!-- Add interesting quote --><section id="acknowledgements" class="level3"><h3 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h3>
<p>Material for this lecture was borrowed and adopted from</p>
<ul>
<li><a href="http://rafalab.dfci.harvard.edu/dsbook/importing-data.html" class="uri">http://rafalab.dfci.harvard.edu/dsbook/importing-data.html</a></li>
<li><a href="https://www.stephaniehicks.com/jhustatcomputing2022" class="uri">https://www.stephaniehicks.com/jhustatcomputing2022</a></li>
</ul></section><section id="learning-objectives" class="level1"><h1>Learning objectives</h1>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Learning objectives
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>At the end of this lesson you will:</strong></p>
<ul>
<li>Be able to read and write text / csv files in R</li>
<li>Diagnose some common problems importing data and troubleshoot</li>
<li>Be able to identify different file types and encodings</li>
<li>Plan using best practices for data management and spreasheet design</li>
<li>Be able to calculate memory requirements for R objects</li>
<li>Be aware of various packages to read in other types of data</li>
</ul>
</div>
</div>
</section><section id="introduction" class="level1"><h1>Introduction</h1>
<!-- Sweave2knitr() -->
<p>So far we have either typed data in directly into R or used R functions to generate data. In order to analyze your own data, you have to load data from an external file into R. Similarly, to save your work, you’ll want to write files to your hard drive. Both of these require interacting with your computer’s operating system. In this chapter, we’ll practice doing it, so you learn the mechanics. Please be patient and we’ll talk more about what’s going on in the next lesson on scripts and the R Environment.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
There are many different ways to access data in R
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li>Built-in datasets - useful for practice</li>
<li>Text files, importing from .csv is especially easy</li>
<li>Files in other formats, e.g., .xls</li>
<li>readLines from a connection including files</li>
<li>Data not on your local computer, e.g., piped via a url</li>
<li>Special connections, e.g., google sheets</li>
</ol>
</div>
</div>
</section><section id="built-in-datasets" class="level1"><h1>Built-in datasets</h1>
<p>R has many built-in datasets that come distributed with R. They are very useful for demonstrating Rʻs many functions for statistics, plotting, and other uses.</p>
<p>To see a list of them, you can type <code><a href="https://rdrr.io/r/utils/data.html">data()</a></code> at the command line. To see the contents, type the name of the dataset. To see the help page type a ? in front of the name:</p>
<div class="cell">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/utils/data.html">data</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">cars</span></span>
<span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">cars</span></span></code></pre></div>
</div>
<p>You can use built-in data in R by referring to the names of the objects.</p>
<div class="cell">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/utils/head.html">head</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">cars</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  speed dist
1     4    2
2     4   10
3     7    4
4     7   22
5     8   16
6     9   10</code></pre>
</div>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/graphics/plot.default.html">plot</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">cars</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure"><p><img src="https://mbutler808.github.io/posts/2025-02-04-reading-data/index_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section><section id="the-biggest-issue-for-fairly-new-users" class="level1"><h1>The biggest issue for fairly new users</h1>
<p>In order for R to read in data, it needs to know (1) where it the data stream, and (2) what in the datastream it is looking for. In the case of built-in datasets, both problems are solved as it is already imported into R.</p>
<p>The biggest issue most new-ish users experience when the path or filename is incorrect. For example, I donʻt have a file called “dat.csv” here, so this is a common error:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>R</strong></pre>
</div>
<div class="sourceCode" id="cb5" data-filename="R" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> read.csv<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dat.csv"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb5-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Error</span> in file<span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rt"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> cannot open the connection</span>
<span id="cb5-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">In</span> addition: Warning message:</span>
<span id="cb5-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">In</span> file<span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rt"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> cannot open file <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dat.csv'</span>: No such file or directory</span></code></pre></div>
</div>
<p>The <code>cannot open the conection</code> is a pipe or path error. It cannot open a pipe or a connection to the file. <code>No such file or directory</code> is just that. R doesnʻt know where the file is. Is there a typo? Is it the correct path?</p>
<p>Once we are in the correct working directory and fixed all typos, most of the time we are good, but we may have some surprises in the file format which weʻll go into below.</p>
<p>The issue is basically that R is parsing the information stream as it reads the file and filtering what counts as data, and what is not data (also called “delimeters” or the things that separate your data). Once you understand how to specify delimeters, you are in great shape!</p>
</section><section id="reading-in-text-files" class="level1"><h1>Reading in Text Files</h1>
<p>The most convenient way to read data into R is using the <code><a href="https://rdrr.io/r/utils/read.table.html">read.csv()</a></code> function. This requires that your data is saved in <code>.csv</code> format, which is possible from Microsoft Excel (save as… csv) or any spreadsheet format. It is a text format with data separated by commas. (Open it in a plain text editor and take a look).</p>
<p>It is very nice because it is unambiguous, not easily corruptible, and non-proprietary. Thus it is readable by nearly every program that reads in data.</p>
<section id="get-the-files-onto-your-computer" class="level2"><h2 class="anchored" data-anchor-id="get-the-files-onto-your-computer">Get the files onto your computer</h2>
<p>First, get the data files from the <a href="https://github.com/mbutler808/rclassdata"><code>rclassdata</code></a> GitHub repo by cloning the repo to your <code>Documents/git/rclass</code> folder.</p>
<p>Open R by double clicking on an R script within your <code>rclassdata</code> folder. Which working directory are you in? If necessary, use <code><a href="https://rdrr.io/r/base/getwd.html">setwd()</a></code> to get move into the <code>rclassdata</code> folder.</p>
<div class="cell">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/getwd.html">getwd</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/getwd.html">setwd</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/Documents/git/rclass/rclassdata"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>  </span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/list.files.html">list.files</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># will tell us which files are in this folder</span></span></code></pre></div>
</div>
</section><section id="read.csv" class="level2"><h2 class="anchored" data-anchor-id="read.csv">read.csv</h2>
<p>Getting the file into R is easy. If it is in csv format, you just use:</p>
<div class="cell">
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/utils/read.table.html">read.csv</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"anolisSSD.csv"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># look for the file in the working directory</span></span></code></pre></div>
</div>
<p>This is an <em>Anolis</em> lizard sexual size dimorphism dataset. It has values of dimorphism by species for different ecomorphs, or microhabitat specialists.</p>
<p>To save the data as an R object, give it a name and save it:</p>
<div class="cell">
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">anolis</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/utils/read.table.html">read.csv</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"anolisSSD.csv"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
</div>
<p>It is a good practice to <em>always</em> check that the data were read in properly. If it is a large file, you’ll want to at least check the beginning and end were read in properly:</p>
<div class="cell">
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/utils/head.html">head</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">anolis</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  species   logSSD    ecomorph
1      oc -0.00512        twig
2      eq  0.08454 crown-giant
3      co  0.24703 trunk-crown
4     aln  0.24837 trunk-crown
5      ol  0.09844  grass-bush
6      in  0.06137        twig</code></pre>
</div>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/utils/head.html">tail</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">anolis</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   species  logSSD     ecomorph
18      cr 0.39796 trunk-ground
19      st 0.15737  trunk-crown
20      cy 0.26024 trunk-ground
21     alu 0.08216   grass-bush
22      lo 0.13108        trunk
23      an 0.13547         twig</code></pre>
</div>
</div>
<p>Which prints out the first six and last six lines of the file.</p>
<p>Voila! Now you can plot, take the mean, etc. For example:</p>
<div class="cell">
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/graphics/plot.default.html">plot</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/factor.html">as.factor</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">anolis</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">ecomorph</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">anolis</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">logSSD</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure"><p><img src="https://mbutler808.github.io/posts/2025-02-04-reading-data/index_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>(Aside) You probably didn’t understand the line of code above, but we will get into this very soon in the next lectures. But you can break it down bit by bit.</p>
<p>Now try reading in <code>anolisSSDsemicolon.csv</code> what did you get? Try reading it in with <code><a href="https://rdrr.io/r/utils/read.table.html">read.table()</a></code> - check out the help page.</p>
<p>R can read in many other formats as well, including database formats, excel native format (although it is easier in practice to save as .csv), fixed width formats, and scanning lines. For more information see the R manual “R Data Import/Export” which you can get from <code><a href="https://rdrr.io/r/utils/help.start.html">help.start()</a></code> or at <a href="http://www.r-project.org" class="uri">http://www.r-project.org</a>.</p>
</section><section id="input-files-generated-by-data-loggers" class="level2"><h2 class="anchored" data-anchor-id="input-files-generated-by-data-loggers">Input files generated by data loggers</h2>
<p>Files that are generated by computer, even if they are not separated by commas (.csv) are not too bad to deal with. Take, for example, the file format generated from our hand-held Ocean Optics specroradiometer. It is very regular in structure, and we have tons of data files, so it is well worth the programming effort to code a script for automatic file input.</p>
<p>First, you can open the file below in a text editor. If you’d rather open it in R, you can use:</p>
<div class="cell">
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/readLines.html">readLines</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"20070725_01forirr.txt"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
</div>
<p>Notice that there is a very large header, in fact the first 17 lines. Notice also that the last line will cause a problem. Also, the delimiter in this file is tab (backslash t).</p>
<div class="cell">
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">temp</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/readLines.html">readLines</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"20070725_01forirr.txt"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/utils/head.html">head</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">temp</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/utils/head.html">tail</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">temp</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
</div>
<p>We can solve these issues using the <code>skip</code> and the <code>comment.char</code> arguments of <code>read.table</code> to ignore both types of lines, reading in only the “good stuff”. Also, the default delimiter in this function is the tab:</p>
<div class="cell">
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">dat</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/utils/read.table.html">read.table</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>file<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"20070725_01forirr.txt"</span>, skip<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span>, comment.char<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&gt;"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/names.html">names</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">dat</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lambda"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"intensity"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/utils/head.html">head</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">dat</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  lambda intensity
1 177.33         0
2 177.55         0
3 177.77         0
4 177.99         0
5 178.21         0
6 178.43         0</code></pre>
</div>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/utils/head.html">tail</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">dat</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     lambda intensity
3643 888.21   0.29491
3644 888.38   0.31306
3645 888.54   0.28153
3646 888.71   0.28245
3647 888.87   0.18988
3648 889.04   0.18988</code></pre>
</div>
</div>
<p>The file produces (useless) rows of data outside of the range of accuracy of the spectraradiometer. We can get rid of these by subsetting the data, selecting only the range 300-750nm:</p>
<div class="cell">
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">dat</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">dat</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">dat</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">lambda</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># cut off rows below 300nm</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">dat</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">dat</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">dat</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">lambda</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">750</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#cut off rows above 750nm</span></span></code></pre></div>
</div>
<p>Or do both at once:</p>
<div class="cell">
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">dat</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">dat</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">dat</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">lambda</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">dat</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">lambda</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">750</span>,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div>
</div>
<p>If we are going to be doing this subsetting over and over, we might want to save this as an index vector which tells us the position of the rows of data we want to keep in the dataframe (don’t worry, we’ll cover this again in the workhorse functions chapter).</p>
<div class="cell">
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">oo</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">dat</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">lambda</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">dat</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">lambda</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">750</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">dat</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">dat</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">oo</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># same as longer version above</span></span></code></pre></div>
</div>
<p>We can now save the cleaned up version of the irradiance data:</p>
<div class="cell">
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/utils/write.table.html">write.csv</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">dat</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"20070725_01forirr.csv"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
</div>
</section></section><section id="read-from-url" class="level1"><h1>Read from URL</h1>
<p>A URL is just another datastream or pipe. If it is a .csv file on the internet, R supports reading it in directly:</p>
<div class="cell">
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">anolis2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/utils/read.table.html">read.csv</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://raw.githubusercontent.com/mbutler808/rclassdata/main/2023-01-31-DataIO/anolisSSD.csv"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/utils/head.html">head</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">anolis2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  species   logSSD    ecomorph
1      oc -0.00512        twig
2      eq  0.08454 crown-giant
3      co  0.24703 trunk-crown
4     aln  0.24837 trunk-crown
5      ol  0.09844  grass-bush
6      in  0.06137        twig</code></pre>
</div>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/cbind.html">cbind</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">anolis</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">anolis2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   species   logSSD     ecomorph species   logSSD     ecomorph
1       oc -0.00512         twig      oc -0.00512         twig
2       eq  0.08454  crown-giant      eq  0.08454  crown-giant
3       co  0.24703  trunk-crown      co  0.24703  trunk-crown
4      aln  0.24837  trunk-crown     aln  0.24837  trunk-crown
5       ol  0.09844   grass-bush      ol  0.09844   grass-bush
6       in  0.06137         twig      in  0.06137         twig
7       cu  0.09501  crown-giant      cu  0.09501  crown-giant
8       ri  0.08947  crown-giant      ri  0.08947  crown-giant
9       sa  0.28893 trunk-ground      sa  0.28893 trunk-ground
10      op  0.15963   grass-bush      op  0.15963   grass-bush
11      va  0.14766         twig      va  0.14766         twig
12      li  0.38873 trunk-ground      li  0.38873 trunk-ground
13      ga  0.28768  crown-giant      ga  0.28768  crown-giant
14      gr  0.39786  trunk-crown      gr  0.39786  trunk-crown
15      br  0.17106        trunk      br  0.17106        trunk
16      di  0.13801        trunk      di  0.13801        trunk
17      kr  0.23478   grass-bush      kr  0.23478   grass-bush
18      cr  0.39796 trunk-ground      cr  0.39796 trunk-ground
19      st  0.15737  trunk-crown      st  0.15737  trunk-crown
20      cy  0.26024 trunk-ground      cy  0.26024 trunk-ground
21     alu  0.08216   grass-bush     alu  0.08216   grass-bush
22      lo  0.13108        trunk      lo  0.13108        trunk
23      an  0.13547         twig      an  0.13547         twig</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Use the correct file format
</div>
</div>
<div class="callout-body-container callout-body">
<p>Make sure that your URL leads to a raw <code>.csv</code> file, and not the <code>.html</code> rendering of your csv file!</p>
</div>
</div>
</section><section id="what-to-do-when-your-spreadsheet-is-malformed" class="level1"><h1>What to do when your spreadsheet is malformed</h1>
<p>You will inevitably run into malformed spreadsheets. If there are unexpected characters used as delimiters, irregular delimiters, or uneven numbers of elements, these will all cause problems reading in data smoothly into any software.</p>
<p>Most of the time, these issues are inadvertent. For example, if you cut and paste off the web, extra characters can easily be introduced. Try reading in <code>species_list_IUCN.csv</code>. It is a large spreadsheet of every species of subfamily Asteriorphinae frog in the world (over 330). Does it look OK?</p>
<div class="cell">
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">temp</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/utils/read.table.html">read.csv</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"species_list_IUCN.csv"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/utils/head.html">head</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">temp</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                                                                   SPECIES.OF.ASTEROPHRYINAE.REPRESENTED.IN.IUCN.SHAPEFILE.LIST.
1   Aphantophryne minuta                                                                                                        
2   Aphantophryne nana                                                                                                          
3   Aphantophryne pansa                                                                                                         
4   Aphantophryne parkeri                                                                                                       
5   Aphantophryne sabini                                                                                                        
6   Asterophrys eurydactyla                                                                                                     
   X X.1 X.2 X.3
1 NA  NA  NA  NA
2 NA  NA  NA  NA
3 NA  NA  NA  NA
4 NA  NA  NA  NA
5 NA  NA  NA  NA
6 NA  NA  NA  NA</code></pre>
</div>
</div>
<p>Itʻs hard to tell from this output what the problem is. Try <code>readLines</code>, which will show you the entire line of data:</p>
<div class="cell">
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">tempL</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/readLines.html">readLines</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"species_list_IUCN.csv"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in readLines("species_list_IUCN.csv"): incomplete final line found on
'species_list_IUCN.csv'</code></pre>
</div>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/utils/head.html">head</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">tempL</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "SPECIES OF ASTEROPHRYINAE REPRESENTED IN IUCN SHAPEFILE LIST:,,,,"                                                                 
[2] "Aphantophryne minuta                                                                                                        ,,,,"  
[3] "Aphantophryne nana                                                                                                          ,,,,"  
[4] "  Aphantophryne pansa                                                                                                         ,,,,"
[5] "  Aphantophryne parkeri                                                                                                       ,,,,"
[6] "  Aphantophryne sabini                                                                                                        ,,,,"</code></pre>
</div>
</div>
<p>Now you can clearly see that it is extra whitespace. Extra blank columns, and a huge long line of white space after each species name. Starting from <em>Aphantophryne pansa</em>, there are two extra spaces in front of each species name.</p>
<p>The easiest thing to do here is to open up the spreadsheet in your spreadsheet program (or plain text editor) and read it back in. Delete the extra columns, and do search and replace on the two leading spaces and trailing multiple spaces. Also change that very long name to something more reasonable like “gensp”. (This is an example of using variable names as annotations or comments - donʻt do it.)</p>
<p>Alternatively, you can solve these problems within R. We will learn these object and string manipulation skills later, but here is one way to solve the problems once you have diagnosed them.</p>
<section id="read-in-and-select-only-the-first-columns" class="level4"><h4 class="anchored" data-anchor-id="read-in-and-select-only-the-first-columns">Read in and select only the first columns</h4>
<p>The rest of the columns are blank, so we really only need the first one. Also lets give it a shorter name.</p>
<div class="cell">
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">dat</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/utils/read.table.html">read.csv</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"species_list_IUCN.csv"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">dat</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">dat</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># select only the first column and resave dat</span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/names.html">names</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">dat</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gensp"</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># give the column a shorter name</span></span></code></pre></div>
</div>
</section><section id="use-function-trimws" class="level4"><h4 class="anchored" data-anchor-id="use-function-trimws">Use function <code>trimws</code>
</h4>
<p>R has a handy function <code>trimws</code> that trims white space</p>
<div class="cell">
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">gensp</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/trimws.html">trimws</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">dat</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">gensp</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/utils/head.html">head</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">gensp</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Aphantophryne minuta"    "Aphantophryne nana"     
[3] "Aphantophryne pansa"     "Aphantophryne parkeri"  
[5] "Aphantophryne sabini"    "Asterophrys eurydactyla"</code></pre>
</div>
</div>
<p>How you deal with cleaning the data will depend on what the issue is. But the first step is always diagnosing the problem. Weʻll learn many more strategies as we go.</p>
</section></section><section id="entering-data-with-spreadsheets" class="level1"><h1>Entering data with spreadsheets</h1>
<p>Data management is a major issue for any scientist, so it is worthwhile to develop some best practices. Entering data into spreadsheets is a fundamental step in any study using field data or any type of information that is gathered by humans. Some of the issues to consider are:</p>
<ol type="1">
<li>How can we best minimize human error?</li>
<li>What dataset structures are best for analyzing the data using software?</li>
<li>Compatability with other datasets in the lab, or commonly used in the field.</li>
</ol>
<p>In the best case, we want to make our data available to the world, which means that it will have a permanence. We may also want to build on this data year after year, so it is worth thinking about a good design.</p>
<section id="human-error" class="level2"><h2 class="anchored" data-anchor-id="human-error">Human Error</h2>
<p>It is very easy to make a typo, and humans are really bad at catching our own typos in real time. Right? They creep in despite our best efforts. This is why even though it is possible to measure specimens and enter the numbers directly into the computer, itʻs not something I would do.</p>
<p>I always write my measurements down into a notebook or a datasheet using pencil and paper. This has saved me many errors in three ways (1) sometimes my brain is still processing what I just wrote and I will catch a typo. (2) I write my data in rows for specimens and columns for the different measurements. As the dataset builds, it is easy to notice errors if some number is really off. (3) If you have any doubts, you can quickly look over your page and re-measure anything suspicous. If you have the person-power, you can also have one person taking the measurements and calling them out, and another writing them down and repeating them back. It is a very effective way to check on the spot.</p>
<p>I had my first post-college job at an insurance rating board. This is a business that deals with reams and reams of data. We did work a lot with Fortran code and spreadsheets, but surprisingly, some of it does actually have to get manually checked. The protocol was simple, a paper printout of the old version was put next to the new version and a person went along with a ruler, literally putting a check mark after verifying the number. A second check was done as well, and then I finally understood the meaning of “double checking” 😝. When I got to grad school, it was eye-opening to find that checking any personʻs data entry was a rare practice 😲. Please, whenever possible check your data entry.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Here are some tips:
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li>
<strong>Record data in a notebook</strong> (paper and pencil). It serves as a <strong>permanent record</strong>.</li>
<li>Write it down in a <strong>data table format</strong> in an <strong>order that minimizes error</strong>. For example, if it is convenient to take five measurements in a particular order, then organize your table that way and always take the measurements in the same order.</li>
<li>
<strong>Organize your spreadsheet</strong> to <em>mirror</em> the hand-written data. This will minimize data entry errors.</li>
<li>
<strong>Have another person check</strong> your data entry against the <em>notebook</em> (data source).</li>
</ol>
</div>
</div>
</section><section id="organizing-your-spreadhseet" class="level2"><h2 class="anchored" data-anchor-id="organizing-your-spreadhseet">Organizing your spreadhseet</h2>
<p>When it comes time to enter your data in a spreadsheet, there are many things you can do to improve organization. Below is a summary of the recommendations made in paper by Karl Broman and Kara Woo <span class="citation" data-cites="Broman:2018">(Broman and Woo 2018)</span>.</p>
<ul>
<li>
<strong>Be Consistent</strong> - Have a plan before you start entering data. Be consistent and stick to it.</li>
<li>
<strong>Choose Good Names for Things</strong> - You want the names you pick for objects, files, and directories to be memorable, easy to spell, descriptive, but concise. This is actually a hard balance to achieve and it does require time and thought.
<ul>
<li>One important rule to follow is do not use spaces, use underscores _ or dashes instead -.</li>
<li>Also, avoid symbols; stick to letters and numbers.</li>
</ul>
</li>
<li>
<strong>Write Dates as YYYY-MM-DD</strong> - To avoid confusion, we strongly recommend using this global ISO 8601 standard.</li>
<li>
<strong>No Empty Cells</strong> - Fill in all cells and use some common code for missing data.</li>
<li>
<strong>Put Just One Thing in a Cell</strong> - It is better to add columns to store the extra information rather than having more than one piece of information in one cell.</li>
<li>
<strong>Make It a Rectangle</strong> - The spreadsheet should be a rectangle.</li>
<li>
<strong>Create a Data Dictionary</strong> - If you need to explain things, such as what the columns are or what the labels used for categorical variables are, do this in a separate file. This is an excellent use for a README.md file</li>
<li>
<strong>No Calculations in the Raw Data Files</strong> - Excel permits you to perform calculations. Do not make this part of your spreadsheet. Code for calculations should be in a script.</li>
<li>
<strong>Do Not Use Font Color or Highlighting as Data</strong> - Most import functions are not able to import this information. Encode this information as a variable (a “comment” column) instead.</li>
<li>
<strong>Make Backups</strong> - Make regular backups of your data.</li>
<li>
<strong>Use Data Validation to Avoid Errors</strong> - Leverage the tools in your spreadsheet software so that the process is as error-free and repetitive-stress-injury-free as possible. Think of checks you can do for “reality checks”.</li>
<li>
<strong>Save the Data as Text Files</strong> - Save files for sharing in comma or tab delimited format. An unambiguous text format is the best for archiving your data.</li>
</ul></section></section><section id="a-few-words-about-encodings" class="level1"><h1>A few words about Encodings</h1>
<section id="text-versus-binary-files" class="level2"><h2 class="anchored" data-anchor-id="text-versus-binary-files">Text versus binary files</h2>
<p>For data science purposes, files can generally be classified into two categories: text files (also known as <strong>ASCII</strong> files) and <strong>binary</strong> files. You have already worked with text files. All your R scripts are text files and so are the Quarto files used to create this website. The .csv tables you have read are also text files. One big advantage of these files is that we can easily “look” at them using a plain text editor, without having to purchase any kind of special software.</p>
<p>Any text editor can be used to examine a text file, including freely available editors such as <strong>R</strong>, <strong>RStudio</strong>, <strong>Atom</strong>, <strong>Notepad</strong>, <strong>TextEdit</strong>, <strong>vi</strong>, <strong>emacs</strong>, <strong>nano</strong>, and <strong>pico</strong>. However, if you try to open, say, an Excel xls file, jpg or png file, you will not be able to see anything immediately useful. These are binary files. Excel files are actually compressed folders with several text files inside. But the main distinction here is that text files can be easily examined.</p>
<p>Although R includes tools for reading widely used binary files, such as xls files, <em>in general you will want to find data sets stored in text files</em>. If necessary, use the proprietary software to export the data into text files and go from there.</p>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>The problem with using propietary formats for data management is that htey are poor formats for achival purposes. These formats may change or they donʻt copy well, so that eventually you can no longer open them.</p>
</div>
</div>
<p>Similarly, when sharing data you want to make it available as text files as long as storage is not an issue (binary files are much more efficient at saving space on your disk). In general, plain-text formats make it easier to share data since commercial software is not required for working with the data, and they are more reliable.</p>
<p>Technically, html and xml files are text files too, but they have complicated tags around the information. In the Data Wrangling part of the book we learn to extract data from more complex text files such as html files.</p>
</section><section id="unicode-versus-ascii" class="level2"><h2 class="anchored" data-anchor-id="unicode-versus-ascii">Unicode versus ASCII</h2>
<p>A pitfall in data science is assuming a file is an ASCII text file when, in fact, it is something else that can look a lot like an ASCII text file, for example, a Unicode text file.</p>
<p>To understand the difference between these, remember that everything on a computer needs to eventually be converted to 0s and 1s (binary format). ASCII is an encoding that maps bits to characters that are easier for humans to read.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Binary data can take on only two values - 0 or 1
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>a <strong>bit</strong> is the smallest unit, a single binary character (0 or 1).</li>
<li>a <strong>byte</strong> is eight bits.</li>
<li>a <strong>megabyte</strong> or MB is one million bytes.</li>
<li>a <strong>gigabyte</strong> or GB is one billion bytes.</li>
<li>You can roughly calculate the size of your data by the numbers of bytes per each observation.</li>
</ul>
</div>
</div>
<p>ASCII uses 7 bits – seven variables that can be either 0 or 1 – which results in 2<sup>7</sup> = 128 unique items, enough to encode all the characters on an English language keyboard (all characters, numbers, and symbols, Figure&nbsp;1, Figure&nbsp;2). However, we need to expand the possibilities if we want to include support for other languages or additional characters.</p>
<div id="fig-ascii" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure"><div aria-describedby="fig-ascii-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://mbutler808.github.io/posts/2025-02-04-reading-data/ascii1.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-ascii-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: Binary encodings in ACII, with some of the most used escape sequences like <code>\t</code> for tab and <code>\n</code> for new line.
</figcaption></figure>
</div>
<div id="fig-ascii2" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure"><div aria-describedby="fig-ascii2-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://mbutler808.github.io/posts/2025-02-04-reading-data/ascii2.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-ascii2-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;2: Some examples of ASCII encodings for A-E and a-e.
</figcaption></figure>
</div>
<p>For this reason, a new encoding, using more than 7 bits, was defined: Unicode. When using Unicode, one can chose between 8, 16, and 32 bits abbreviated UTF-8, UTF-16, and UTF-32 respectively. RStudio actually defaults to UTF-8 encoding.</p>
<p>Although we do not go into the details of how to deal with the different encodings here, it is important that you know these different encodings exist so that you can better diagnose a problem if you encounter it. One way problems manifest themselves is when you see “weird looking” characters you were not expecting.</p>
<p>Many plain text editors (Atom, Sublime, TextWrangler, Notepad++) will detect encodings and tell you what they are and may also convert between them. Also from the command line the <code>file</code> command will reveal the encoding (should also work on Windows if you have <code>git</code> installed:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb37" data-filename="Terminal" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb37-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file</span> filename</span></code></pre></div>
</div>
<p>This StackOverflow discussion is an example: <a href="https://stackoverflow.com/questions/18789330/r-on-windows-character-encoding-hell" class="uri">https://stackoverflow.com/questions/18789330/r-on-windows-character-encoding-hell</a>.</p>
</section><section id="line-endings" class="level2"><h2 class="anchored" data-anchor-id="line-endings">Line endings</h2>
<p>One last potential headache is the character used for line endings. The line ending is the invisible (to us) character that is added to your file when you press the <code>return</code> key.</p>
<p>It is all one stream of informatin to the computer, but the computer will interpret the information as a new line when it detects one of these characters. When software is provided a file with an unexpected line ending, it is not able to properly detect the lines of information (maybe it sees only one huge line). See?</p>
<p>There are two types of line endings in use today:</p>
<ul>
<li><p><strong>On UNIX and MacOS</strong>, text file line-endings are terminated with a newline character (ASCII 0x0a, represented by the <code>\n</code> escape sequence in most languages), also referred to as a linefeed (LF).</p></li>
<li><p><strong>On Windows</strong>, line-endings are terminated with a combination of a carriage return (ASCII 0x0d or <code>\r</code>) and a newline(<code>\n</code>), also referred to as CR/LF.</p></li>
</ul>
<p>If your computer complains about line endings, the easiest thing to do is to open it in one of the good plain text editors and save it with the line endings it is expecting (usually as LF instead of CR/LF).</p>
</section></section><section id="calculating-memory-requirements-for-r-objects" class="level1"><h1>Calculating Memory Requirements for R Objects</h1>
<p>Because <strong>R stores all of its objects in physical memory</strong>, it is important to be aware of how much memory is being used up by all of the data objects residing in your workspace.</p>
<p>It is easy to make a back of the envelope calculation of how much memory will be required by a new dataset. For example, suppose I have a data frame with 1,500,000 rows and 120 columns, all of which are numeric data. Roughly, how much memory is required to store this data frame?</p>
<p>Well, on most modern computers <a href="http://en.wikipedia.org/wiki/Double-precision_floating-point_format">double precision floating point numbers</a> are stored using 64 bits of memory, or 8 bytes. Given that information, you can do the following calculation</p>
<p>1,500,000 × 120 × 8 bytes/numeric = 1,440,000,000 bytes</p>
<p>= 1,440,000,000 bytes / 2<sup>20</sup> bytes/MB</p>
<p>= 1,373 MB</p>
<p>= 1.37 GB</p>
<p>So the dataset would require about 1.37 GB of RAM. Most computers these days have at least that much RAM. However, you need to be aware of</p>
<ul>
<li>what other programs might be running on your computer, using up RAM</li>
<li>what other R objects might already be taking up RAM in your workspace</li>
</ul>
<p>Reading in a large dataset for which you do not have enough RAM is one easy way to freeze up your computer (or at least your R session). When that happens you to kill the R process, in the best case scenario, or reboot your computer, in the worst case. So before opening up potentially huge datasets, make sure to do a rough calculation of memory requirements needed. You’ll thank me later.</p>
<p><em>Also, itʻs aways good to build a script as you go and save frequently.</em></p>
</section><section id="other-data-types" class="level1"><h1>Other data types</h1>
<p>Now, there are of course, many R packages that have been developed to read in all kinds of other datasets, and you may need to resort to one of these packages if you are working in a specific area.</p>
<p>For example, check out</p>
<ul>
<li>
<a href="https://github.com/r-dbi/DBI"><code>DBI</code></a> for relational databases</li>
<li>
<a href="https://haven.tidyverse.org"><code>haven</code></a> for SPSS, Stata, and SAS data</li>
<li>
<a href="https://github.com/r-lib/httr"><code>httr</code></a> for web APIs</li>
<li>
<a href="https://readxl.tidyverse.org"><code>readxl</code></a> for <code>.xls</code> and <code>.xlsx</code> sheets</li>
<li>
<a href="https://googlesheets4.tidyverse.org"><code>googlesheets4</code></a> for Google Sheets</li>
<li>
<a href="https://googledrive.tidyverse.org"><code>googledrive</code></a> for Google Drive files</li>
<li>
<a href="https://github.com/tidyverse/rvest"><code>rvest</code></a> for web scraping</li>
<li>
<a href="https://github.com/jeroen/jsonlite#jsonlite"><code>jsonlite</code></a> for JSON</li>
<li>
<a href="https://github.com/r-lib/xml2"><code>xml2</code></a> for XML.</li>
</ul></section><section id="ascii-art" class="level1"><h1>ASCII art</h1>
<div class="quarto-figure quarto-figure-center">
<figure class="figure"><p><a href="https://nl.wikipedia.org/wiki/Gebruiker:Wilinckx"><img src="https://upload.wikimedia.org/wikipedia/commons/4/45/BB-ASCII-art-screenshot-zebra.png" class="img-fluid figure-img" alt="Zebra in ASCII by Wilinckx, Wikimedia commons"></a></p>
<figcaption>Zebra in ASCII by Wilinckx, Wikimedia commons</figcaption></figure>
</div>



</section><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0">
<div id="ref-Broman:2018" class="csl-entry">
Broman, Karl W., and Kara H. Woo. 2018. <span>“Data Organization in Spreadsheets.”</span> <em>The American Statistician</em> 72 (1): 2–10. <a href="https://doi.org/10.1080/00031305.2017.1375989">https://doi.org/10.1080/00031305.2017.1375989</a>.
</div>
</div></section></div> ]]></description>
  <category>module 2</category>
  <category>week 3</category>
  <category>data</category>
  <category>input</category>
  <category>output</category>
  <category>formats</category>
  <guid>https://mbutler808.github.io/posts/2025-02-04-reading-data/</guid>
  <pubDate>Tue, 04 Feb 2025 10:00:00 GMT</pubDate>
</item>
<item>
  <title>Reference management</title>
  <dc:creator>Marguerite Butler</dc:creator>
  <link>https://mbutler808.github.io/posts/2025-01-30-reference-management/</link>
  <description><![CDATA[ <!-- Add interesting quote --><section id="pre-lecture-materials" class="level1"><h1>Pre-lecture materials</h1>
<section id="read-ahead" class="level3"><h3 class="anchored" data-anchor-id="read-ahead">Read ahead</h3>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Read ahead
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>Before class, you can prepare by skimming the following materials:</strong></p>
<ol type="1">
<li>R Markdown <a href="https://rmarkdown.rstudio.com/lesson-15.html">cheatsheet</a>
</li>
<li>Bibliographies and Citations in <a href="https://rmarkdown.rstudio.com/authoring_bibliographies_and_citations.html">pandoc</a>
</li>
<li>Citations from <a href="https://monashdatafluency.github.io/r-rep-res/citations.html">Reproducible Research in R</a> from the <a href="https://monashdatafluency.github.io">Monash Data Fluency</a> initiative</li>
<li>Citation style, appendix, etc. <a href="https://bookdown.org/yihui/rmarkdown-cookbook/bibliography.html">R Markdown Cookbook</a>
</li>
</ol>
</div>
</div>
</section><section id="acknowledgements" class="level3"><h3 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h3>
<p>Material for this lecture was borrowed and adopted from</p>
<ul>
<li><a href="https://www.stephaniehicks.com/jhustatcomputing2022/" class="uri">https://www.stephaniehicks.com/jhustatcomputing2022/</a></li>
<li><a href="https://andreashandel.github.io/MADAcourse" class="uri">https://andreashandel.github.io/MADAcourse</a></li>
<li><a href="https://rmarkdown.rstudio.com/authoring_bibliographies_and_citations.html" class="uri">https://rmarkdown.rstudio.com/authoring_bibliographies_and_citations.html</a></li>
<li><a href="https://bookdown.org/yihui/rmarkdown-cookbook/bibliography.html" class="uri">https://bookdown.org/yihui/rmarkdown-cookbook/bibliography.html</a></li>
<li><a href="https://monashdatafluency.github.io/r-rep-res/citations.html" class="uri">https://monashdatafluency.github.io/r-rep-res/citations.html</a></li>
</ul></section></section><section id="learning-objectives" class="level1"><h1>Learning objectives</h1>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Learning objectives
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>At the end of this lesson you will:</strong></p>
<ul>
<li>Know what types of bibliography file formats can be used in a R Markdown file</li>
<li>Learn how to add citations to a Quarto file</li>
<li>Know how to change the citation style (e.g.&nbsp;APA, Chicago, Evolution, etc)</li>
</ul>
</div>
</div>
</section><section id="introduction" class="level1"><h1>Introduction</h1>
<p>Your citation list is a critical aspect of research, as all research is built on the contribution in prior work. One of the most tedious tasks of science is hand-editing bibiolographies — and one of the great benefits of the LaTeX environment is the automated <em>formatting references for bibliographies</em>. 🎊</p>
<p>Itʻs worth taking a little time to learn how to use these tools, as citations are critical for every paper, project report, or academic website, and is often even required in paper assignments. Since R markdown and Quarto work nicely with LaTeX (and BibTeX, the associated reference management software), we get a bonus in having access to the power of BibTeX without writing any LaTeX, maing it easy to add citations to our Quarto markdown projects.</p>
<p>Quarto documentation currently doesnʻt include citations, but seems to support all the features presnt in R markdown. We will be using <code>.bib</code> format references in this tutorial, but R markdown (and presumably Quarto) supports other citation formats as well (<a href="https://rmarkdown.rstudio.com/authoring_bibliographies_and_citations.html">for more info see</a>).</p>
<section id="the-parts" class="level2"><h2 class="anchored" data-anchor-id="the-parts">The Parts</h2>
<p>There are three basic parts:</p>
<ol type="1">
<li>The <strong>citation data</strong> is stored in the <code>.bib</code> file Section&nbsp;4, and</li>
<li>
<strong>In-text citations</strong> added by the author into the <code>.qmd</code> document Section&nbsp;7, and</li>
<li>
<strong>Linking the ʻ.bibʻ file</strong> in the <code>YAML</code> header Section&nbsp;6.</li>
</ol>
<p>From this, both the <em>in-text citations</em> as well as the <em>citation list</em> at the end of the document will be rendered.</p>
<p>There are additional customization options. You can change the <em>style</em> of the bibliography using style and class files Section&nbsp;8. This is at the level of the entire document, it is easy to switch. Within the document, there are also many options for in-text citation styles Section&nbsp;9. You can also customize the style file by editing the LaTeX.</p>
<p><em>Reference managers</em> are helper software (independent of BibTeX) that are wonderful tools to help you collect and organize your citation data Section&nbsp;5.</p>
</section></section><section id="sec-bib" class="level1"><h1>The Bibliography is in <code>.bib</code> files</h1>
<p>The <strong>citation data</strong> are stored in a <code>.bib</code> file which is a text file. Most people donʻt type these entries themselves (unless itʻs for a new publication!) but rather download these through journal databases such as <em>Web of Science</em>, <em>PubMed</em>, directly from jornal websites, etc.</p>
<p>R provides nice function <code><a href="https://rdrr.io/r/utils/citation.html">citation()</a></code> that generating the citation blob for R packages. Let’s try generating citation text for the R environment by using the following command</p>
<div class="cell">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/utils/citation.html">citation</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"base"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>To cite R in publications use:

  R Core Team (2024). _R: A Language and Environment for Statistical
  Computing_. R Foundation for Statistical Computing, Vienna, Austria.
  &lt;https://www.R-project.org/&gt;.

A BibTeX entry for LaTeX users is

  @Manual{,
    title = {R: A Language and Environment for Statistical Computing},
    author = {{R Core Team}},
    organization = {R Foundation for Statistical Computing},
    address = {Vienna, Austria},
    year = {2024},
    url = {https://www.R-project.org/},
  }

We have invested a lot of time and effort in creating R, please cite it
when using it for data analysis. See also 'citation("pkgname")' for
citing R packages.</code></pre>
</div>
</div>
<p>You can replace “base” with any R package name, such as “rmarkdown” or my package “ouch”. You can see that the format is simple, the information is in a key = value format, and the various parts have tags.</p>
<p>Multiple citations are stored in your <code>.bib</code> file, with each citation separated by a blank line.</p>
</section><section id="sec-manager" class="level1"><h1>Reference Managers</h1>
<p>Personally, I really like [BibDesk]<a href="https://bibdesk.sourceforge.io" class="uri">https://bibdesk.sourceforge.io</a> for Mac OS to manage my citations. It is easy to use and has all the features I need. A cross-platform option that is popular now is JabRef <a href="https://github.com/JabRef/jabref" class="uri">https://github.com/JabRef/jabref</a>. <a href="https://en.wikipedia.org/wiki/JabRef">JabRef</a> is written in Java, is open source and has support for Linux, Windows, and MacOS.</p>
<section id="citation-management-software" class="level2"><h2 class="anchored" data-anchor-id="citation-management-software">Citation management software</h2>
<p>In addition to <code>.bib</code> (BibTeX) there are a lot of file formats in use including <code>.medline</code> (MEDLINE), <code>.ris</code> (RIS), and <code>.enl</code> (EndNote), among others. You can generally download the results of your literature search in the format of your choice (some citation manager software can convert formats as well).</p>
<p>If you recall the output from <code>citation("rmarkdown")</code> above, one option is to copy and paste the BibTeX output into a text file labeled <code>.bib</code> or into citation management software, but instead we can use Rʻs <code>write_bib()</code> function from the <code>knitr</code> package to create a bibliography file.</p>
<p>Let’s run the following code in order to generate a <code>my-refs.bib</code> file</p>
<div class="cell">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">knitr</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/pkg/knitr/man/write_bib.html">write_bib</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rmarkdown"</span>, file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my-refs.bib"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
</div>
<p>You can output multiple citations by passing a vector of package names:</p>
<div class="cell">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">knitr</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/pkg/knitr/man/write_bib.html">write_bib</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rmarkdown"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"base"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>, file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my-refs.bib"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
</div>
<p>Now we can see we have the file saved locally.</p>
<div class="cell">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/list.files.html">list.files</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "ButlerPapers.bib" "evolution.csl"    "index_files"      "index.qmd"       
[5] "index.rmarkdown"  "my-refs.bib"     </code></pre>
</div>
</div>
<p>If you open up the <code>my-refs.bib</code> file, you will see</p>
<pre><code>@Manual{R-base,
  title = {R: A Language and Environment for Statistical Computing},
  author = {{R Core Team}},
  organization = {R Foundation for Statistical Computing},
  address = {Vienna, Austria},
  year = {2022},
  url = {https://www.R-project.org/},
}

@Manual{R-rmarkdown,
  title = {rmarkdown: Dynamic Documents for R},
  author = {JJ Allaire and Yihui Xie and Jonathan McPherson and Javier Luraschi and Kevin Ushey and Aron Atkins and Hadley Wickham and Joe Cheng and Winston Chang and Richard Iannone},
  year = {2021},
  note = {R package version 2.8},
  url = {https://CRAN.R-project.org/package=rmarkdown},
}

@Book{rmarkdown2018,
  title = {R Markdown: The Definitive Guide},
  author = {Yihui Xie and J.J. Allaire and Garrett Grolemund},
  publisher = {Chapman and Hall/CRC},
  address = {Boca Raton, Florida},
  year = {2018},
  note = {ISBN 9781138359338},
  url = {https://bookdown.org/yihui/rmarkdown},
}

@Book{rmarkdown2020,
  title = {R Markdown Cookbook},
  author = {Yihui Xie and Christophe Dervieux and Emily Riederer},
  publisher = {Chapman and Hall/CRC},
  address = {Boca Raton, Florida},
  year = {2020},
  note = {ISBN 9780367563837},
  url = {https://bookdown.org/yihui/rmarkdown-cookbook},
}</code></pre>
<div class="resources">
<p><strong>Note there are three keys that we will use later on</strong>:</p>
<ul>
<li><code>R-rmarkdown</code></li>
<li><code>rmarkdown2018</code></li>
<li><code>rmarkdown2020</code></li>
</ul>
</div>
</section></section><section id="sec-linking" class="level1"><h1>Linking <code>.bib</code> file with <code>.rmd</code> or <code>.qmd</code> files</h1>
<p>In order to use references within a R Markdown file, you will need to specify the name and a location of a bibliography file using the bibliography metadata field in a YAML metadata section. For example:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb8-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">title</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"My top ten favorite R packages"</span></span>
<span id="cb8-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">output</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> html_document</span></span>
<span id="cb8-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bibliography</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> my-refs.bib</span></span>
<span id="cb8-5"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span></code></pre></div>
<p>You can include multiple reference files using the following syntax, alternatively you can concatenate two bib files into one.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb9-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bibliography</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my-refs1.bib"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my-refs2.bib"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]</span></span>
<span id="cb9-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span></code></pre></div>
</section><section id="sec-inline" class="level1"><h1>Inline citation</h1>
<p>Now we can start using those bib keys that we have learned just before, using the following syntax</p>
<ul>
<li>
<code>[@key]</code> for single citation</li>
<li>
<code>[@key1; @key2]</code> multiple citation can be separated by semi-colon</li>
<li>
<code>[-@key]</code> in order to suppress author name, and just display the year</li>
<li>
<code>[see @key1 p 12; also this ref @key2]</code> is also a valid syntax</li>
</ul>
<p>Let’s start by citing the <code>rmarkdown</code> package using the following code and press <code>Knit</code> button:</p>
<hr>
<p>I have been using the amazing Rmarkdown package <span class="citation" data-cites="R-rmarkdown">(Allaire et al. 2024)</span>! These look like great books to read <span class="citation" data-cites="rmarkdown2018 rmarkdown2020">(Xie, Allaire, and Grolemund 2018; and Xie, Dervieux, and Riederer 2020)</span>.</p>
<hr>
<p>Pretty cool, huh??</p>
</section><section id="sec-style" class="level1"><h1>Citation styles</h1>
<p>By default, Pandoc will use a Chicago author-date format for citations and references.</p>
<p>To use another style, for example, in ecology and evolution, we often use the <code>evolution.csl</code> style. You will need to specify a CSL (Citation Style Language) file in the <code>csl</code> metadata field, e.g.,</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb10-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb10-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">title</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"My top ten favorite R packages"</span></span>
<span id="cb10-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">output</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> html_document</span></span>
<span id="cb10-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bibliography</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> my-refs.bib</span></span>
<span id="cb10-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">csl</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> biomed-central.csl</span></span>
<span id="cb10-6"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span></code></pre></div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Resources
</div>
</div>
<div class="callout-body-container callout-body">
<p>The <a href="https://www.zotero.org/styles">Zotero Style Repository</a> makes it easy to search for and download your desired style. Just include it in the same directory as with your <code>.qmd</code> file.</p>
</div>
</div>
<p>CSL files also can be tweaked to meet custom formatting requirements. For example, we can change the number of authors required before “et al.” is used to abbreviate them. This can be simplified through the use of visual editors such as the one available at <a href="https://editor.citationstyles.org" class="uri">https://editor.citationstyles.org</a>.</p>
</section><section id="sec-options" class="level1"><h1>Other cool features</h1>
<section id="add-an-item-to-a-bibliography-without-using-it" class="level4"><h4 class="anchored" data-anchor-id="add-an-item-to-a-bibliography-without-using-it">Add an item to a bibliography without using it</h4>
<p>By default, the bibliography will only display items that are directly referenced in the document. If you want to include items in the bibliography without actually citing them in the body text, you can define a dummy nocite metadata field and put the citations there. They will be included in the references cited at the end, even though there is no in-text citation.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb11-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb11-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nocite</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb11-3">  @item1, @item2</span>
<span id="cb11-4"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span></code></pre></div>
</section><section id="add-all-items-to-the-bibliography" class="level4"><h4 class="anchored" data-anchor-id="add-all-items-to-the-bibliography">Add all items to the bibliography</h4>
<p>If we do not wish to explicitly state all of the items within the bibliography but would still like to show them in our references, we can use the following syntax:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb12-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb12-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nocite</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'@*'</span></span>
<span id="cb12-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span></code></pre></div>
<p>This will force all items to be displayed in the bibliography.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Resources
</div>
</div>
<div class="callout-body-container callout-body">
<p>You can also have an appendix appear after bibliography. For more on this, see:</p>
<ul>
<li><a href="https://bookdown.org/yihui/rmarkdown-cookbook/bibliography.html" class="uri">https://bookdown.org/yihui/rmarkdown-cookbook/bibliography.html</a></li>
</ul>
</div>
</div>
</section></section><section id="a-comment" class="level1"><h1>A Comment</h1>
<p>We have learned that within your bibliography file (e.g.&nbsp;<code>my-refs.bib</code>), each reference gets a key, which is a shorthand that is generated by the reference manager or by yourself.</p>
<p>For instance, I use a format of <code>author:year</code> for example <code>Butler:2023</code> because itʻs easy for me to remember the literature that I want to cite that way. It makes it easier to write the content.</p>
<p>When there are multiple citations in a year by the same author last name, my BibDesk software adds two unique letters after the year (I usually manually change it to one letter, i.e., <code>Butler:2023a</code>) so that each citation has a unique key.</p>
<p>You can choose any format you wish, just pick one and use it <em>forever</em>. As you write more papers, you can easily copy citations into your different bibliographies. You are building a database that is <em>reusable</em>.</p>
<p>In your R Markdown document, you can then cite the reference by adding the key, such as <code>...in the paper by Butler et al. [@Butler:2022]...</code>.</p>
</section><section id="post-lecture-materials" class="level1"><h1>Post-lecture materials</h1>
<section id="practice" class="level3"><h3 class="anchored" data-anchor-id="practice">Practice</h3>
<p>Here are some post-lecture tasks to practice some of the material discussed.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Questions
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>Try out the following:</strong></p>
<ol type="1">
<li><p>What do you notice that’s different when you run <code>citation("tidyverse")</code> (compared to <code>citation("rmarkdown")</code>)?</p></li>
<li><p>Install the following packages:</p></li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bibtex"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RefManageR"</span>)</span></code></pre></div>
</div>
<p>What do they do? How might they be helpful to you in terms of reference management?</p>
<ol start="3" type="1">
<li>Practice using a different CSL file to change the citation style.</li>
</ol>
</div>
</div>



</section></section><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0">
<div id="ref-R-rmarkdown" class="csl-entry">
Allaire, JJ, Yihui Xie, Christophe Dervieux, Jonathan McPherson, Javier Luraschi, Kevin Ushey, Aron Atkins, et al. 2024. <em>Rmarkdown: Dynamic Documents for r</em>. <a href="https://github.com/rstudio/rmarkdown">https://github.com/rstudio/rmarkdown</a>.
</div>
<div id="ref-rmarkdown2018" class="csl-entry">
Xie, Yihui, J. J. Allaire, and Garrett Grolemund. 2018. <em>R Markdown: The Definitive Guide</em>. Boca Raton, Florida: Chapman; Hall/CRC. <a href="https://bookdown.org/yihui/rmarkdown">https://bookdown.org/yihui/rmarkdown</a>.
</div>
<div id="ref-rmarkdown2020" class="csl-entry">
Xie, Yihui, Christophe Dervieux, and Emily Riederer. 2020. <em>R Markdown Cookbook</em>. Boca Raton, Florida: Chapman; Hall/CRC. <a href="https://bookdown.org/yihui/rmarkdown-cookbook">https://bookdown.org/yihui/rmarkdown-cookbook</a>.
</div>
</div></section></div> ]]></description>
  <category>module 1</category>
  <category>week 3</category>
  <category>Quarto</category>
  <category>authoring</category>
  <category>BibTeX</category>
  <category>programming</category>
  <guid>https://mbutler808.github.io/posts/2025-01-30-reference-management/</guid>
  <pubDate>Thu, 30 Jan 2025 10:00:00 GMT</pubDate>
</item>
<item>
  <title>Literate Statistical Programming and Quarto</title>
  <dc:creator>Marguerite Butler</dc:creator>
  <link>https://mbutler808.github.io/posts/2025-01-28-intro-quarto/</link>
  <description><![CDATA[ <!-- Add interesting quote --><section id="pre-lecture-materials" class="level1"><h1>Pre-lecture materials</h1>
<section id="install" class="level2"><h2 class="anchored" data-anchor-id="install">INSTALL</h2>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Before class, you can prepare by installing the following materials:
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li>Install <code>quarto</code> <a href="https://quarto.org/docs/get-started/" class="uri">https://quarto.org/docs/get-started/</a>
</li>
<li>Install <code>tinytex</code>, a version of <img src="https://latex.codecogs.com/png.latex?%5CLaTeX"> to render output. Open a Terminal window (<code>git-BASH</code> on Windows) and type:</li>
</ol>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb1" data-filename="Terminal" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">quarto</span> install tinytex</span></code></pre></div>
</div>
<p>Note: This will not add <code>tinytex</code> to the system <code>PATH</code> so if you would like to use <code>tinytex</code> with other applications, or you have a different installation of <code>TeX</code> that you prefer to use instead with quarto, see notes here <a href="https://quarto.org/docs/output-formats/pdf-engine.html" class="uri">https://quarto.org/docs/output-formats/pdf-engine.html</a>.</p>
<ol start="3" type="1">
<li>Install <code>pandoc</code>, which translates output to almost any format. <a href="https://pandoc.org/installing.html" class="uri">https://pandoc.org/installing.html</a> Follow instructions for whichever installer you prefer. If you are using homebrew on a mac:</li>
</ol>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb2" data-filename="Terminal" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">brew</span> install pandoc</span></code></pre></div>
</div>
<ol start="4" type="1">
<li>Install <code>rmarkdown</code> (“R Markdown), which <code>quarto</code> builds upon. <code>rmarkdown</code> also includes the package <code>knitr</code> which executes the R code and provides <img src="https://latex.codecogs.com/png.latex?%5CLaTeX"> formatting for the output. From within your R console:</li>
</ol>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>R_Console</strong></pre>
</div>
<div class="sourceCode" id="cb3" data-filename="R_Console" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">install.packages</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rmarkdown"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span></code></pre></div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Read ahead
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>Before class, you can prepare by reading the following materials:</strong></p>
<ol type="1">
<li>Creating a Website in Quarto quickstart <em>up to and including Render</em> <a href="https://quarto.org/docs/websites/" class="uri">https://quarto.org/docs/websites/</a>
</li>
<li>Publishing to GitHub <em>up to and including Render to docs</em> <a href="https://quarto.org/docs/publishing/github-pages.html" class="uri">https://quarto.org/docs/publishing/github-pages.html</a>
</li>
</ol>
</div>
</div>
</section><section id="acknowledgements" class="level2"><h2 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h2>
<p>Material for this lecture was borrowed and adopted from</p>
<ul>
<li><a href="https://www.stephaniehicks.com/jhustatcomputing2022/posts/2022-09-01-literate-programming/" class="uri">https://www.stephaniehicks.com/jhustatcomputing2022/posts/2022-09-01-literate-programming/</a></li>
<li><a href="http://users.stat.umn.edu/~geyer/Sweave/" class="uri">http://users.stat.umn.edu/~geyer/Sweave/</a></li>
<li><a href="https://rdpeng.github.io/Biostat776/lecture-literate-statistical-programming.html" class="uri">https://rdpeng.github.io/Biostat776/lecture-literate-statistical-programming.html</a></li>
<li><a href="https://statsandr.com/blog/tips-and-tricks-in-rstudio-and-r-markdown" class="uri">https://statsandr.com/blog/tips-and-tricks-in-rstudio-and-r-markdown</a></li>
</ul></section></section><section id="learning-objectives" class="level1"><h1>Learning objectives</h1>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Learning objectives
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>At the end of this lesson you will:</strong></p>
<ul>
<li>Be able to define literate programming</li>
<li>Know how to use R plus a text editor or Rstudio to practice literate programming</li>
<li>Create a Quarto markdown document</li>
</ul>
</div>
</div>
</section><section id="literate-programming" class="level1"><h1>Literate Programming</h1>
<p>Before there was widespread concern about “Reproducible Research”, the term <strong>literate programming</strong> was coined by <a href="https://www-cs-faculty.stanford.edu/~knuth/">Donald Knuth</a>, one of the true geniuses of computing, the author/inventor of <img src="https://latex.codecogs.com/png.latex?%5CTeX">, and the notion of structured programming, among other things. He wrote a book about it in 1984!</p>
<blockquote class="blockquote">
<p>Literate programming is a methodology that combines a programming language with a documentation language, thereby making programs more robust, more portable, more easily maintained, and arguably more fun to write than programs that are written only in a high-level language.</p>
</blockquote>
<blockquote class="blockquote">
<p>The main idea is to treat a program as a piece of literature, <em>addressed to human beings rather than to a computer</em>. The program is also viewed as a hypertext document, rather like the World Wide Web. (Indeed, I used the word WEB for this purpose long before CERN grabbed it!) —<em>Donald Knuth</em></p>
</blockquote>
<p>The basic idea is that:</p>
<ul>
<li>Programs are useless without descriptions.</li>
<li>Descriptions should be literate, not comments in code or typical reference manuals.</li>
<li>The <em>code</em> in the descriptions <em>should work</em>. Thus it is necessary to extract the real working code from the literary description.</li>
</ul>
<p>These concepts were baked into the R help pages. You will see that there are working code examples for every single function in R at the bottom of each help page. In fact it is required before a package will be published on CRAN.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Additional Reading
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Knuthʻs Webpage about his <a href="https://www-cs-faculty.stanford.edu/~knuth/lp.html">book on Literate Programming</a>
</li>
</ul>
</div>
</div>
</section><section id="the-data-science-pipeline" class="level1"><h1>The Data Science Pipeline</h1>
<p>The basic issue is when you read a description of a data analysis, such as in an article or a technical report, for the most part, what you get is the report and nothing else.</p>
<p>Of course, everyone knows that behind the scenes <strong>there’s a lot that went into this article</strong> and that is what I call the <strong>data science pipeline</strong>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure"><p><img src="https://mbutler808.github.io/images/dspipeline.png" class="img-fluid figure-img"></p>
<figcaption>The Data Science Pipeline</figcaption></figure>
</div>
</section><section id="literate-programming-in-practice" class="level1"><h1>Literate Programming in Practice</h1>
<p>One basic idea to make writing reproducible reports easier is what’s known as <em>literate statistical programming</em>. The idea is to <strong>think of a report or a publication as a stream of text and code</strong>.</p>
<ul>
<li><p><strong>The code and text remain together</strong> in a single source document. No more separate analysis files and word processing files. When code is edited, the report is automatically generated and updated.</p></li>
<li><p>The <strong><em>text</em> is readable by <em>people</em></strong> and the <strong><em>code</em> is readable by <em>computers</em>.</strong> It is actually a human-readable document that executes the entire analysis.</p></li>
<li><p><strong>Well Documented:</strong> The <em>analysis is described</em> in a series of text and code chunks.</p></li>
<li><p><strong>Modular:</strong> Each kind of <em>code chunk</em> will do something like <em>load some data</em> or <em>compute some results</em>.</p></li>
<li><p><strong>Readable:</strong> Each <em>text chunk</em> will relay something in a human readable language.</p></li>
</ul>
<p>There might also be a separation of <strong>raw data</strong> and <strong>processed data</strong>. To preserve the integrity of the raw data as it was collected or received, as well as a record of the data cleaning to produce processed data.</p>
<p>There might also be <strong>presentation code</strong> that formats tables and figures and there’s article text that explains what’s going on around all this code. This stream of text and code is a literate statistical program or a literate statistical analysis. All of the tools we describe here are open source projects.</p>
<section id="weaving-and-tangling" class="level2"><h2 class="anchored" data-anchor-id="weaving-and-tangling">Weaving and Tangling</h2>
<p>Literate programs by themselves are a bit difficult to work with, but they can be processed in two important ways.</p>
<p>Literate programs can be <strong>weaved</strong> to produce human readable documents like PDFs or HTML web pages, and they can <strong>tangled</strong> to produce machine readable code. To do this we need a documentation language.</p>
</section><section id="sweave-and" class="level2"><h2 class="anchored" data-anchor-id="sweave-and">Sweave and <img src="https://latex.codecogs.com/png.latex?%5CLaTeX">
</h2>
<p>The first literate programming system for R is called <strong>Sweave</strong>. <code>sweave</code> enables users to combine <code>R</code> code with a typesetting language called <img src="https://latex.codecogs.com/png.latex?%5CLaTeX">.</p>
<p><img src="https://latex.codecogs.com/png.latex?%5CLaTeX"> markup specifies how the text, mathematical equations, tables, and figures will be formatted, allowing the separation of content from formatting (as opposed to WYSYWIG word processors like Word or Google Docs).</p>
<p><img src="https://latex.codecogs.com/png.latex?%5CLaTeX"> is very powerful for:</p>
<ul>
<li>Laying out mathematical equations. <strong>This is its superpower!</strong>
</li>
<li>Fine-tuned control of formatting (all kinds!)</li>
<li>Powerful tools for integrating citations via <span style="font-variant: small-caps;">Bib</span><span style="letter-spacing:-2px;">T</span><sub style="font-size: inherit; letter-spacing:-1px;">E</sub>X and cross-references to Figures, Tables, Equations, Sections, anything you wish to label.</li>
</ul>
<p><img src="https://latex.codecogs.com/png.latex?%5CLaTeX"> was written by <a href="https://en.wikipedia.org/wiki/Leslie_Lamport">Leslie Lamport</a> when he was at the Stanford Research Institute, as a set of macros for <img src="https://latex.codecogs.com/png.latex?%5CTeX">, which is the underlying typesetting engine written by <a href="https://en.wikipedia.org/wiki/Donald_Knuth">Donald Knuth</a>. Lamport wanted to write a book using <img src="https://latex.codecogs.com/png.latex?%5CTeX">, so he wrote the <img src="https://latex.codecogs.com/png.latex?%5CLaTeX"> macros and a manual, which made it easier for many others to use <img src="https://latex.codecogs.com/png.latex?%5CTeX">.</p>
<p>Before <code>sweave</code>, one would write code to perform statistical analysis or modeling in <code>R</code>, and the manuscript in <code>latex</code> once the coding was complete. As projects develop, however, keeping these processes separate can lead to a lack of reproducibility.</p>
<p><code>sweave</code> revolutionized coding, and has become part of the R base code. <code>sweave</code> was written by <a href="https://documents.uow.edu.au/content/groups/public/@web/@commerce/documents/doc/uow012868.pdf">Friedrich Leisch</a>, who is on the R Core Development Team and the BioConductor Project. To see an example of LaTeX see [<a href="./small2e.tex">small2e.tex</a>] and for Sweave, check out [<a href="./Little_Sweave.Rnw">Little_Sweave.Rnw</a>].</p>
<p><strong>Sweave files have a <code>.Rnw</code> file ending</strong> and have R code weaved through the document, interspered with :</p>
<pre><code>&lt;&lt;plot1, height=4, width=5, eval=FALSE&gt;&gt;=
data(airquality)
plot(airquality$Ozone ~ airquality$Wind)
@</code></pre>
<p>Once you have created your <code>.Rnw</code> file containing code chunks for your R code, and <img src="https://latex.codecogs.com/png.latex?%5CLaTeX"> tags to format your text, from your R console you run the <code>sweave()</code> function to <strong>weave</strong> the file, executing the R chunks and replacing them with output as appropriate to typeset before creating the PDF document.</p>
<p>Sweaveʻs main limitation is that it requires knowledge of <img src="https://latex.codecogs.com/png.latex?%5CLaTeX">, which has a steep learning curve.</p>
<ul>
<li>Sweave also <strong>lacks a lot of features that people find useful</strong> like caching, and multiple plots per page and mixing programming languages.</li>
<li>For developers, Sweave is hard to extend with new functions.</li>
</ul>
<p>Inspired by Sweave, Yihui Xie wrote <a href="https://yihui.org/knitr/"><strong>knitr</strong></a> to extend literate programming capabilities in R even further by combining features of other add on packages into one package. It adds richer graphics features and importantly extends use of much simpler Markdown documents to take advantage of LaTeX without having to write it!</p>
</section><section id="rmarkdown" class="level2"><h2 class="anchored" data-anchor-id="rmarkdown">rmarkdown</h2>
<p><a href="https://en.wikipedia.org/wiki/Markdown">Markdown</a> is a much simpler document language. A markdown file is a plain text file that is typically given the extension <code>.md</code>. The <a href="https://CRAN.R-project.org/package=rmarkdown"><code>rmarkdown</code></a> R package takes a R Markdown file (<code>.Rmd</code>) and weaves together R code chunks Figure&nbsp;1, which can be output in a variety of different possible formats.</p>
<div id="fig-rmarkdown" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure"><div aria-describedby="fig-rmarkdown-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://mbutler808.github.io/images/Rmarkdown.png" class="img-fluid figure-img" style="width:80.0%">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-rmarkdown-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: R markdown can be used to translate text and code into many different output formats
</figcaption></figure>
</div>
<p>R chunks surrounded by text looks like this:</p>
<pre><code>```{r plot1, height=4, width=5, eval=FALSE, echo=TRUE}
data(airquality)
plot(airquality$Ozone ~ airquality$Wind)
```</code></pre>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>The best resource for learning about R Markdown this the book by Yihui Xie, J. J. Allaire, and Garrett Grolemund:</p>
<ul>
<li><a href="https://bookdown.org/yihui/rmarkdown" class="uri">https://bookdown.org/yihui/rmarkdown</a></li>
</ul>
<p>The R Markdown Cookbook by Yihui Xie, Christophe Dervieux, and Emily Riederer is really good too:</p>
<ul>
<li><a href="https://bookdown.org/yihui/rmarkdown-cookbook" class="uri">https://bookdown.org/yihui/rmarkdown-cookbook</a></li>
</ul>
<p>The authors describe the motivation for the 2nd book as:</p>
<blockquote class="blockquote">
<p>“However, we have received comments from our readers and publisher that it would be beneficial to provide more practical and relatively short examples to show the interesting and useful usage of R Markdown, because it can be daunting to find out how to achieve a certain task from the aforementioned reference book (put another way, that book is too dry to read). As a result, this cookbook was born.”</p>
</blockquote>
</div>
</div>
<p>Because this is lecture is built using a <code>.qmd</code> file (which is very similar to a <code>.Rmd</code> file), let’s demonstrate how this works. I am going to change <code>eval=FALSE</code> to <code>eval=TRUE</code>.</p>
<div class="cell" height="4" width="5">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/utils/data.html">data</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">airquality</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/graphics/plot.default.html">plot</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">airquality</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">Ozone</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">airquality</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">Wind</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure"><p><img src="https://mbutler808.github.io/posts/2025-01-28-intro-quarto/index_files/figure-html/plot2-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Questions
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li>Why do we not see the back ticks ``` anymore in the code chunk above that made the plot?</li>
<li>What do you think we should do if we want to have the code executed, but we want to hide the code that made it?</li>
</ol>
</div>
</div>
<p>Before we leave this section, I find that there is quite a bit of terminology to understand the magic behind <code>rmarkdown</code> that can be confusing, so let’s break it down:</p>
<ul>
<li>
<a href="https://pandoc.org">Pandoc</a>. Pandoc is a command line tool with no GUI that converts documents (e.g.&nbsp;from number of different markup formats to many other formats, such as .doc, .pdf etc). It is completely independent from R (but does come bundled with RStudio). If you donʻt have Rstudio installed, you will have to install <code>pandoc</code>.</li>
<li>
<a href="https://en.wikipedia.org/wiki/Markdown">Markdown</a> (<strong>markup language</strong>). Markdown is a lightweight <a href="https://en.wikipedia.org/wiki/Markup_language">markup language</a> with plain text formatting syntax designed so that it can be converted to HTML and many other formats. A markdown file is a plain text file that is typically given the extension <code>.md.</code> It is completely independent from R.</li>
<li>R Markdown (<strong>markup language</strong>). R Markdown is an extension of the markdown syntax for weaving together text with R code. R Markdown files are plain text files that typically have the file extension <code>.Rmd</code>.</li>
<li>
<a href="https://CRAN.R-project.org/package=rmarkdown"><code>rmarkdown</code></a> (<strong>R package</strong>). The R package <code>rmarkdown</code> is a library that uses pandoc to process and convert text and R code written in <code>.Rmd</code> files into a number of different formats. This core function is <code><a href="https://pkgs.rstudio.com/rmarkdown/reference/render.html">rmarkdown::render()</a></code>. <strong>Note</strong>: this package only deals with the markdown language. If the input file is e.g.&nbsp;<code>.Rhtml</code> or <code>.Rnw</code>, then you need to use <code>knitr</code> prior to calling pandoc (see below).</li>
</ul>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>Check out the R Markdown Quick Tour for more:</p>
<ul>
<li><a href="https://rmarkdown.rstudio.com/authoring_quick_tour.html" class="uri">https://rmarkdown.rstudio.com/authoring_quick_tour.html</a></li>
</ul>
</div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure"><p><img src="https://github.com/allisonhorst/stats-illustrations/raw/main/rstats-artwork/rmarkdown_rockstar.png" class="img-fluid figure-img" style="width:80.0%"></p>
<figcaption>Artwork by Allison Horst on RMarkdown</figcaption></figure>
</div>
<section id="knitr" class="level3"><h3 class="anchored" data-anchor-id="knitr">knitr</h3>
<p>One of the alternative that has come up in recent times is something called <code>knitr</code>.</p>
<ul>
<li>The <code>knitr</code> package for R takes a lot of these ideas of literate programming and updates and improves upon them.</li>
<li>
<code>knitr</code> still uses R as its programming language, but it allows you to mix other programming languages in.</li>
<li>
<code>knitr</code> is included in the installation of <code>rmarkdown</code>.</li>
<li>You can also use a variety of documentation languages now, such as <img src="https://latex.codecogs.com/png.latex?%5CLaTeX"> , markdown and HTML.</li>
<li>
<code>knitr</code> was developed by Yihui Xie while he was a graduate student at Iowa State and it has become a very popular package for writing literate statistical programs.</li>
</ul>
<p>Knitr takes a plain text document with embedded code, executes the code and ‘knits’ the results back into the document.</p>
<p>For for example, it converts</p>
<ul>
<li>An R Markdown (<code>.Rmd)</code> file into a standard markdown file (<code>.md</code>)</li>
<li>An <code>.Rnw</code> (Sweave) file into to <code>.tex</code> format.</li>
<li>An <code>.Rhtml</code> file into to <code>.html</code>.</li>
</ul>
<p>The core function is <code><a href="https://rdrr.io/pkg/knitr/man/knit.html">knitr::knit()</a></code> and by default this will look at the input document and try and guess what type it is e.g.&nbsp;<code>Rnw</code>, <code>Rmd</code> etc.</p>
<p>This core function performs three roles:</p>
<ul>
<li>A <strong>source parser</strong>, which looks at the input document and detects which parts are code that the user wants to be evaluated.</li>
<li>A <strong>code evaluator</strong>, which evaluates this code</li>
<li>An <strong>output renderer</strong>, which writes the results of evaluation back to the document in a format which is interpretable by the raw output type. For instance, if the input file is an <code>.Rmd</code>, the output render marks up the output of code evaluation in <code>.md</code> format.</li>
</ul>
<div class="cell" data-layout-align="center" data-preview="true">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure"><p><img src="https://d33wubrfki0l68.cloudfront.net/61d189fd9cdf955058415d3e1b28dd60e1bd7c9b/9791d/images/rmarkdownflow.png" class="img-fluid figure-img" style="width:60.0%"></p>
<figcaption>Converting a Rmd file to many outputs using knitr and pandoc</figcaption></figure>
</div>
</div>
</div>
<p>[<a href="https://rmarkdown.rstudio.com/authoring_quick_tour.html">Source</a>]</p>
<p>As seen in the figure above, from there <code>pandoc</code> is used to convert e.g.&nbsp;a <code>.md</code> file into many other types of file formats into a <code>.html</code>, etc.</p>
<p>So in summary:</p>
<blockquote class="blockquote">
<p>“R Markdown stands on the shoulders of knitr and Pandoc. The former executes the computer code embedded in Markdown, and converts R Markdown to Markdown. The latter renders Markdown to the output format you want (such as PDF, HTML, Word, and so on).”</p>
</blockquote>
<p>[<a href="https://bookdown.org/yihui/rmarkdown/">Source</a>]</p>
</section></section></section><section id="in-comes-quarto" class="level1"><h1>In comes Quarto</h1>
<p>The folks who developed R Markdown have moved on to a new package called <a href="https://quarto.org">Quarto</a>. Quarto contains many of the features of R Markdown, but importantly, is now separate from Rstudio. It is intentionally developed as a cross-platform, cross-language markup language. It works with R, Python, Julia, and Observable. And is rapidly catching on with the statistical coding community.</p>
<p>Quarto can render output to many formats of documents including html, pdf, docx, md. It can also layout websites, presentations, or even books. It supports interactive apps such as Rshiny among other things.</p>
<p>We are going to learn using Quarto. Letʻs start by getting a simple webpage up. Conceptually, there are three tasks:</p>
<ol type="1">
<li>Create your quarto website on your computer</li>
<li>Make your website folder into a GitHub repo</li>
<li>Publish your website via GitHub</li>
</ol>
<section id="create-your-website-locally-with-quarto" class="level2"><h2 class="anchored" data-anchor-id="create-your-website-locally-with-quarto">Create your website locally with Quarto</h2>
<p>In this section, I am adding a bit more explanation to the Quarto quickstart guide <em>up to and including Render</em>. If something is not clear, please consult <a href="https://quarto.org/docs/websites/" class="uri">https://quarto.org/docs/websites/</a></p>
<p>There are three main quarto commands we will use:</p>
<ul>
<li>
<code>quarto create-project</code>: Make a website project template</li>
<li>
<code>quarto preview</code>: Take a look at what the webite will look like</li>
<li>
<code>quarto render</code>: Render your <code>qmd</code> to <code>html</code>
</li>
</ul>
<section id="make-your-website-directory-and-template" class="level3"><h3 class="anchored" data-anchor-id="make-your-website-directory-and-template">Make your website directory and template</h3>
<p>Create your website (here called <code>mysite</code>) using the following command. It will make a directory of the same name and put the website contents within it.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb7" data-filename="Terminal" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">quarto</span> create-project mysite <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--type</span> website</span></code></pre></div>
</div>
<p>You should now see the following files in your <code>mysite</code> directory (Figure&nbsp;2):</p>
<div id="fig-webshell" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure"><div aria-describedby="fig-webshell-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://mbutler808.github.io/images/quarto_web_shell_terminal.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-webshell-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;2: Website files from the Terminal view
</figcaption></figure>
</div>
<p>This is the bare-bones version of your website. Check that the code is functional by looking at a preview:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb8" data-filename="Terminal" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">quarto</span> preview</span></code></pre></div>
</div>
<p>This should open up a browser window showing a temporary file made by quarto by rendering your website files.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>
<code>quarto preview</code> will refresh the preview every time you save your <code>index.qmd</code> (or any) website files. So itʻs a good idea to keep the preview open as you make edits and saves.</li>
<li>Check every edit, it is easier to debug in small steps.</li>
<li>Terminate <code>quarto preview</code> with <code>Control-c</code>
</li>
</ul>
</div>
</div>
</section><section id="render-your-website-to-html" class="level3"><h3 class="anchored" data-anchor-id="render-your-website-to-html">Render your website to html</h3>
<p>Use quarto to render your content to html, the format used by browsers. First navigate into your website directory then render:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb9" data-filename="Terminal" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> mysite</span>
<span id="cb9-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">quarto</span> render</span></code></pre></div>
</div>
<p>Take a look at the <code>mysite</code> contents after rendering, you should see a new directory <code>_site</code> (Figure&nbsp;3). The html was rendered and put in there (go ahead, open up the files and check it out):</p>
<div id="fig-afterrender" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure"><div aria-describedby="fig-afterrender-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://mbutler808.github.io/images/quarto_web_rendered.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-afterrender-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;3: Website files after rendering
</figcaption></figure>
</div>
</section><section id="personalize-your-content" class="level3"><h3 class="anchored" data-anchor-id="personalize-your-content">Personalize your content</h3>
<p>What is really nice is that you can personalize your website by simply editing the quarto markdown and yaml files.</p>
<section id="web-content-goes-in-.qmd" class="level4"><h4 class="anchored" data-anchor-id="web-content-goes-in-.qmd">Web content goes in <code>.qmd</code>
</h4>
<p>Using any text editor, edit the <code>index.qmd</code> to personalize your website.</p>
<p>The first section of your <code>index.qmd</code> is the header. You can change the title and add additional header information, including any cover images and website templates.</p>
<p>For example this is what I have in my course website <code>index.qmd</code> header. Note that my cover image is in a folder called <code>images</code> within at the top level of my website directory. If you want to try this out substitute or remove the image line and change the twitter/github handles.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>index.qmd</strong></pre>
</div>
<div class="sourceCode" id="cb10" data-filename="index.qmd" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb10-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">title:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Welcome to Introduction to Data Science in R for Biologists!"</span></span>
<span id="cb10-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">image:</span> images/mycoolimage.png</span>
<span id="cb10-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">about:</span></span>
<span id="cb10-5">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">template:</span> jolla</span>
<span id="cb10-6">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">links:</span></span>
<span id="cb10-7">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> icon: twitter</span>
<span id="cb10-8">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">text:</span> Twitter</span>
<span id="cb10-9">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">href:</span> https://twitter.com/mbutler808</span>
<span id="cb10-10">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> icon: github</span>
<span id="cb10-11">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">text:</span> Github</span>
<span id="cb10-12">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">href:</span> https://github.com/mbutler808</span>
<span id="cb10-13"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">---</span></span></code></pre></div>
</div>
<p>You should edit the body of your website as well. You simply edit the text.</p>
<p>The <a href="https://quarto.org/docs/authoring/markdown-basics.html">quarto markdown page</a> has great examples showing how to format your content. Take a look at how to specify header sizes, lists, figures and tables. <strong>You might want to bookmark this page!</strong></p>
<p>Try editing the <code>about.qmd</code> file as well. You will notice that this is another tab in your website. YOu can add more tabs by adding <code>.qmd</code> files.</p>
<p>With each addition, be sure to <code>quarto preview</code> your changes to make sure it works. When you are satisfied with your website, <code>quarto render</code> to render to html.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>When editing markdown, take care to note spaces and indents as they are interpreted for formatting.</li>
<li>Indentations are really important for formatting lists.</li>
<li>For example in a hyperlink, there is no space between the square brackets and parentheses. <code>[This is a cool link](http://mycoollink.com)</code>
</li>
</ul>
</div>
</div>
</section><section id="website-wide-settings-go-in-_quarto.yml" class="level4"><h4 class="anchored" data-anchor-id="website-wide-settings-go-in-_quarto.yml">Website-wide settings go in <code>_quarto.yml</code>
</h4>
<p>All Quarto projects include a <code>_quarto.yml</code> configuration file that sets the global options that apply across the entire website.</p>
<p><code>YAML</code> started off as “Yet Another Markup Language” 😜. It is clean, clear, and widely used. You can edit your YAML to add options or change the format of your website. Take a look at your <code>_quarto.yml</code>.</p>
<p>Here is an example for a simple website. <code>title:</code> is the parameter to set the websiteʻs title. <code>navbar:</code> sets the menu, in this case on the left sidebar. By default tabs will be named based on the names of the <code>.qmd</code> files, but you can set them manually. There are many <a href="https://quarto.org/docs/output-formats/html-themes.html">themes</a> you can choose from too, check them out. For something different try <code>cyborg</code>.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>_quarto.yml</strong></pre>
</div>
<pre class="bask" data-filename="_quarto.yml"><code>project:
  type: website

website:
  title: "today"
  navbar:
    left:
      - href: index.qmd
        text: Home
      - about.qmd

format:
  html:
    theme: minty
    css: styles.css
    toc: true</code></pre>
</div>
<p>Again, after saving your edits, <code>quarto preview</code> to see the effects. When you are satisfied with your website, <code>quarto render</code> to render to html.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb12" data-filename="Terminal" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">quarto</span> render</span></code></pre></div>
</div>
</section></section></section><section id="publishing-your-website-to-github" class="level2"><h2 class="anchored" data-anchor-id="publishing-your-website-to-github">Publishing your website to GitHub</h2>
<p>You can publish your website for free on GitHub, which is a very cool feature. In his section I am adding a bit more explanation to the Quarto quickstart guide <em>up to and including Render to docs</em> <a href="https://quarto.org/docs/publishing/github-pages.html" class="uri">https://quarto.org/docs/publishing/github-pages.html</a>. I describe the most important stpes below:</p>
<ol type="1">
<li>Render your html to a <code>docs</code> directory</li>
<li>Supress GitHub <code>jekyll</code> html processing by creating a <code>.nojekyll</code> file</li>
<li>Make your website directory into a repo, and link it to a GitHub repo</li>
<li>Edit the GitHub repo settings to publish your website</li>
</ol>
<section id="render-your-html-to-docs" class="level3"><h3 class="anchored" data-anchor-id="render-your-html-to-docs">Render your html to <code>docs</code>
</h3>
<p>Edit the <code>_quarto.yml</code> file at the top level of your website to send output to <code>docs</code>. This will also create the <code>docs</code> folder.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>_quarto.yml</strong></pre>
</div>
<div class="sourceCode" id="cb13" data-filename="_quarto.yml" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">project:</span></span>
<span id="cb13-2">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">type:</span> website</span>
<span id="cb13-3">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">output-dir:</span> docs</span></code></pre></div>
</div>
<p>The next time you <code>quarto render</code> it will create <code>docs</code> and all of its contents.</p>
</section><section id="supress-github-jekyll-html-processing" class="level3"><h3 class="anchored" data-anchor-id="supress-github-jekyll-html-processing">Supress GitHub <code>jekyll</code> html processing</h3>
<p>GitHub uses a sofware called <code>jekyll</code> to render html from markdown. Since weʻre using <code>quarto</code>, we want to supress that. Create an empty file named <code>.nojekyll</code> at the top level of your website directory to supress default <code>jekyll</code> processing.</p>
<table class="caption-top table">
<colgroup>
<col style="width: 16%">
<col style="width: 47%">
</colgroup>
<tbody>
<tr class="odd">
<td>Mac/Linux/ Git-bash</td>
<td><div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb14" data-filename="Terminal" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">touch</span> .nojekyll</span></code></pre></div>
</div></td>
</tr>
<tr class="even">
<td>Windows</td>
<td><div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>CMD</strong></pre>
</div>
<div class="sourceCode" id="cb15" data-filename="CMD" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb15-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">copy</span> NUL .nojekyll</span></code></pre></div>
</div></td>
</tr>
</tbody>
</table></section><section id="setup-a-github-repo-for-your-website" class="level3"><h3 class="anchored" data-anchor-id="setup-a-github-repo-for-your-website">Setup a GitHub repo for your website</h3>
<ol type="1">
<li>Turn your website directory into a git repo:</li>
</ol>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb16" data-filename="Terminal" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> init</span>
<span id="cb16-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> add .</span>
<span id="cb16-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> commit <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"first commit"</span></span></code></pre></div>
</div>
<ol start="2" type="1">
<li>Create a GitHub repo by the same name</li>
</ol>
<p>For example, mine might be <code>github.com/mbutler808/mysite</code>.</p>
<ol start="3" type="1">
<li>Link your local repo and GitHub repo together</li>
</ol>
<p>If you forgot how to do this, <a href="https://mbutler808.github.io/rclass/posts/2023-01-24-intro-git-github/#make-a-github-repo-started-from-your-local-files">go back here</a></p>
<ol start="4" type="1">
<li>Check your GitHub repo. Are your files there?</li>
</ol></section><section id="github-settings-to-serve-your-webpage" class="level3"><h3 class="anchored" data-anchor-id="github-settings-to-serve-your-webpage">GitHub settings to serve your webpage</h3>
<p>Almost there! A couple more steps.</p>
<p>From your GitHub repo, click on <code>Settings</code> in the top menu, and <code>Pages</code> on the left menu.</p>
<p>Your website should deploy from branch. Under <code>Select branch</code> choose <code>main</code> and under <code>Select folder</code> choose <code>docs</code>.</p>
<p>After clicking <code>save</code> GitHub will trigger a deployment of your website. After a few minutes, your URL will appear near the top at <code>Your site is live at...</code>:</p>
<p><img src="https://mbutler808.github.io/images/github_pages.png" class="img-fluid"></p>
<p>Congratulations! ⚡️ Your website is now live 🎉🎊😍</p>
</section></section><section id="now-make-more-changes" class="level2"><h2 class="anchored" data-anchor-id="now-make-more-changes">Now make more changes!</h2>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
The Quarto Workflow is
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Edit the content in .qmd</li>
<li>From the Command line:
<ul>
<li>
<code>quarto preview</code> to check that edits are correct</li>
<li>
<code>quarto render</code> to render <code>.qmd</code> to <code>.html</code>
</li>
<li><code>git add .</code></li>
<li><code>git commit -m "message"</code></li>
<li><code>git push origin main</code></li>
</ul>
</li>
<li>Check your website (this may take a beat)</li>
</ul>
</div>
</div>
</section><section id="for-fun" class="level2"><h2 class="anchored" data-anchor-id="for-fun">For fun</h2>
<p>You can have fun with emoji! Guangchuang Yu wrote the package <code>emojifont</code> (this is the same person who wrote the widely used <code>ggtree</code> package) and now you can bring your emoji out of your phone and into your quarto documents! Install the R package <code>emojifont</code>:</p>
<div class="cell">
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/utils/install.packages.html">install.packages</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"emojifont"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
</div>
<p>Then anywhere you want an emoji in the markdown file, you just type:</p>
<div class="cell">
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">`r emojifont::emoji('palm_tree')`</span></span></code></pre></div>
</div>
<p>🌴</p>
<p>Or if you want several, just line them up:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">r emojifont::emoji('balloon')</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">``</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">r emojifont::emoji('tada')</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">``</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">r emojifont::emoji('smiley')</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span></span></code></pre></div>
</div>
<p>🎈🎉😃</p>
<p>There is a handy cheat sheet of emoji names here <a href="https://gist.github.com/rxaviers/7360908" class="uri">https://gist.github.com/rxaviers/7360908</a></p>
</section><section id="final-tips" class="level2"><h2 class="anchored" data-anchor-id="final-tips">Final tips</h2>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>
<strong>Always always</strong> <code>quarto render</code> before you push up your changes to GitHub!</li>
<li>If your changes are not appearing, try <code>quarto preview</code> and check that your changes appear in the preview. Then <code>quarto render</code> before you use git to add, commit, and push</li>
<li>Note: It can take a few minutes to render on GitHub before your changes appear on your website</li>
</ul>
</div>
</div>
<p><strong>Please see <a href="https://www.stephaniehicks.com/jhustatcomputing2022/posts/2022-09-01-literate-programming/#create-and-knit-your-first-r-markdown-document">Stephanie Hicksʻ lecture</a></strong> for more literate programming examples and tips.</p>
</section></section><section id="post-lecture-materials" class="level1"><h1>Post-lecture materials</h1>
<section id="final-questions" class="level3"><h3 class="anchored" data-anchor-id="final-questions">Final Questions</h3>
<p>Here are some post-lecture questions to help you think about the material discussed.</p>
</section><section id="questions-1" class="level3 questions"><h3 class="anchored" data-anchor-id="questions-1">Questions</h3>
<ol type="1">
<li><p>What is literate programming?</p></li>
<li><p>What was the first literate statistical programming tool to weave together a statistical language (R) with a markup language (LaTeX)?</p></li>
<li><p>What is <code>knitr</code> and how is different than other literate statistical programming tools?</p></li>
<li><p>Where can you find a list of other commands that help make your code writing more efficient when using Quarto?</p></li>
</ol></section><section id="additional-resources" class="level3"><h3 class="anchored" data-anchor-id="additional-resources">Additional Resources</h3>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>
<a href="http://www.r-project.org/conferences/DSC-2001/Proceedings/Rossini.pdf">Literate statistical practice</a>)</li>
<li>The introduction of Sweave by Friedrich Leisch in <a href="https://cran.r-project.org/doc/Rnews/Rnews_2002-3.pdf">2001 pg. 28</a>
</li>
<li>
<a href="https://indrajeetpatil.github.io/RmarkdownTips/">RMarkdown Tips and Tricks</a> by Indrajeet Patil</li>
<li><a href="https://bookdown.org/yihui/rmarkdown" class="uri">https://bookdown.org/yihui/rmarkdown</a></li>
<li><a href="https://bookdown.org/yihui/rmarkdown-cookbook" class="uri">https://bookdown.org/yihui/rmarkdown-cookbook</a></li>
</ul>
</div>
</div>


</section></section> ]]></description>
  <category>module 1</category>
  <category>week 2</category>
  <category>Markdown</category>
  <category>Quarto</category>
  <category>programming</category>
  <guid>https://mbutler808.github.io/posts/2025-01-28-intro-quarto/</guid>
  <pubDate>Tue, 28 Jan 2025 10:00:00 GMT</pubDate>
</item>
<item>
  <title>Reproducible Research</title>
  <dc:creator>Marguerite Butler</dc:creator>
  <link>https://mbutler808.github.io/posts/2025-01-23-reproducible-research/</link>
  <description><![CDATA[ <blockquote class="blockquote">
<p>The shocking assertion will be that most statistics in most scientific papers has errors. —<em>Charles Geyer</em></p>
</blockquote>
<section id="pre-lecture-materials" class="level1"><h1>Pre-lecture materials</h1>
<section id="read-ahead" class="level3"><h3 class="anchored" data-anchor-id="read-ahead">Read ahead</h3>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Read ahead
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>Before class, you can prepare by reading the following materials:</strong></p>
<ol type="1">
<li>
<a href="https://rss.onlinelibrary.wiley.com/doi/epdf/10.1111/1740-9713.01522">Statistical programming, Small mistakes, big impacts</a> by Simon Schwab and Leonhard Held</li>
<li>
<a href="http://users.stat.umn.edu/~geyer/repro-paper.pdf">Reproducibility and Error</a> by Charles J. Geyer</li>
</ol>
</div>
</div>
</section><section id="acknowledgements" class="level3"><h3 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h3>
<p>Material for this lecture was borrowed and adopted from</p>
<ul>
<li><a href="http://users.stat.umn.edu/~geyer/Sweave/" class="uri">http://users.stat.umn.edu/~geyer/Sweave/</a></li>
<li><a href="http://users.stat.umn.edu/~geyer/repro.pdf" class="uri">http://users.stat.umn.edu/~geyer/repro.pdf</a></li>
<li><a href="https://rdpeng.github.io/Biostat776" class="uri">https://rdpeng.github.io/Biostat776</a></li>
<li>
<a href="https://www.annualreviews.org/doi/abs/10.1146/annurev-publhealth-012420-105110">Reproducible Research: A Retrospective</a> by Roger Peng and Stephanie Hicks</li>
</ul></section></section><section id="learning-objectives" class="level1"><h1>Learning objectives</h1>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Learning objectives
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>At the end of this lesson you will:</strong></p>
<ul>
<li>Know the difference between replication and reproducibility</li>
<li>Identify valid reasons why replication and/or reproducibility is not always possible</li>
<li>Identify the type of reproducibility</li>
<li>Identify key components to enable reproducible data analyses</li>
</ul>
</div>
</div>
</section><section id="introduction" class="level1"><h1>Introduction</h1>
<p>From a young age, we have learned that scientific conclusions should be <strong>reproducible</strong>. After all, isnʻt that what the methods section is for? We are taught to write methods sections so that any scientist could, in theory, repeat the experiment with the idea that if the phenomenon is true, they should obtain comparable results and more often than not should come to the same conclusions.</p>
<p><em>But how repeatable is modern science?</em> Many experiments are now so complex and so expensive that repeating them is not practical. However, it is even worse than that. As datasets get larger and analyses become ever more complex, there is a growing concern that even given the data, we still cannot necessarily repeat the analysis. This is called <strong>“the reproducbility crisis”</strong>.</p>
<p>Recently, there has been a lot of discussion of reproducibility in the media and in the scientific literature. The journal <em>Science</em> had a special issue on reproducibility and data replication.</p>
<ul>
<li><a href="https://www.science.org/toc/science/334/6060" class="uri">https://www.science.org/toc/science/334/6060</a></li>
</ul>
<p>Take for example a recent study by the <a href="https://doi.org/10.1073/pnas.2203150119">Crowdsourced Replication Initiative (2022)</a>. It was a massive effort by 166 coauthors published in PNAS to test repeatability:</p>
<ul>
<li>73 research teams from around the world analyzed the <strong>same social science data</strong>.</li>
<li>They investigated the <strong>same hypothesis</strong>: that more immigration will reduce public support for government provision of social policies.</li>
<li>Together they fit 1261 statistical models and came to widely varying concluisons.</li>
<li>A meta-analysis of the results by the PIs could not explain the variation in results. Even after accounting for the choices made by the research teams in designing their statistical tests, 95% of the total variation remained unexplained.</li>
<li>The authors claim that “a hidden universe of uncertainty remains.”</li>
</ul>
<div class="cell">
<div class="cell-output-display">
<div>
<figure class="figure"><p><img src="https://mbutler808.github.io/images/reproducible_study.png" class="img-fluid figure-img" style="width:100.0%"></p>
</figure>
</div>
</div>
</div>
<p><a href="https://www.pnas.org/doi/10.1073/pnas.2203150119">Source: Breznau et al., 2022</a></p>
<p>This should be very disturbing. It was very disturbing to me! <a href="http://users.stat.umn.edu/~geyer/repro-paper.pdf">Greyer</a> notes that the meta-analysis did not investigate how much of the variability of results was due to outright error. He furthermore notes that while the meta-analysis was done in a reproducibly, the original 73 analyses were not. What does he mean?</p>
</section><section id="some-of-the-issues-from-a-statisticianʻs-perspective" class="level1"><h1>Some of the issues from a statisticianʻs perspective</h1>
<p>Greyer provides nine ideas worth considering:</p>
<ol type="1">
<li>Most scientific papers that need statistics have conclusions that are not actually supported by the statistical calculations done, because of
<ol type="a">
<li>mathematical or computational error,</li>
<li>statistical procedures inappropriate for the data, or</li>
<li>statistical procedures that do not lead to the inferences claimed.</li>
</ol>
</li>
<li>Good computing practices — version control, well thought out testing, code reviews, literate programming — are essential to correct computing.</li>
<li>Failure to do all calculations from raw data to conclusions (every number or figure shown in a paper) in a way that is fully reproducible and available in a permanent public repository is, by itself, a questionable research practice.</li>
<li>Failure to do statistics as if it could have been pre-registered is a questionable research practice.</li>
<li>Journals that use P &lt; 0.05 as a criterion of publication are not scientific journals (publishing only one side of a story is as unscientific as it is possible to be).</li>
<li>Statistics should be adequately described, at least in the supplementary material.</li>
<li>Scientific papers whose conclusions depend on nontrivial statistics should have statistical referees, and those referees should be heeded.</li>
<li>Not all errors are describable by statistics. There is also what physicists call <em>systematic error</em> that is the same in every replication of an experiment. Physicists regularly attempt to quantify this. Others should too.</li>
</ol>
<p>A reasonable ideal for reproducible research today - Research should be reproducible. Anything in a scientific paper should be reproducible by the reader. - Whatever may have been the case in low tech days, this ideal has long gone. Much scientific research in recent years is too complicated and the published details to scanty for anyone to reproduce it. - The lack of detail is not entirely the author’s fault. Journals have severe page pressure and no room for full explanations. - For many years, the only hope of reproducibility is old-fashioned person-to-person contact. Write the authors, ask for data, code, whatever. Some authors help, some don’t. If the authors are not cooperative, tough. - Even cooperative authors may be unable to help. If too much time has gone by and their archiving was not systematic enough and if their software was unportable, there may be no way to recreate the analysis. - Fortunately, the internet comes to the rescue. No page pressure there! - Nowadays, many scientific papers also point to supplementary materials on the internet. Data, computer programs, whatever should be there, permanently. Ideally with a permanent Document Identifier or DOI. There are complaints that many Supplmentary Materials are incomprehensible, but that can be improved with practices of reproducible reserach.</p>
<p>Therefore, at the very least scientists should use in their statistical programming - version control, - software testing, - code reviews, - literate programming, and - all data and code available in a permanent public repository.</p>
<p>Some journals have specific policies to promote reproducibility in manuscripts that are published in their journals. For example, the Journal of American Statistical Association (JASA) requires authors to submit their code and data to reproduce their analyses and a set of Associate Editors of Reproducibility review those materials as part of the review process:</p>
<ul>
<li><a href="https://jasa-acs.github.io/repro-guide" class="uri">https://jasa-acs.github.io/repro-guide</a></li>
</ul></section><section id="recommendations" class="level1"><h1>Recommendations</h1>
<p><a href="https://rss.onlinelibrary.wiley.com/doi/epdf/10.1111/1740-9713.01522">Discuss Table 1</a></p>
<section id="authors-and-readers" class="level3"><h3 class="anchored" data-anchor-id="authors-and-readers">Authors and Readers</h3>
<p>It is important to realize that there are multiple players when you talk about reproducibility–there are different types of parties that have different types of interests. There are <strong>authors</strong> who produce research and they want to make their research reproducible. There are also <strong>readers</strong> of research and they want to reproduce that work. Everyone needs tools to make their lives easier.</p>
<p>One current <strong>challenge is that authors of research have to undergo considerable effort to make their results available to a wide audience</strong>.</p>
<ul>
<li>Publishing data and code today is not necessarily a trivial task. Although there are a number of resources available now, that were not available even five years ago, it is still a bit of a challenge to get things out on the web (or at least distributed widely).</li>
<li>Resources like <a href="https://github.com">GitHub</a>, <a href="https://kipoi.org">kipoi</a>, and <a href="http://rpubs.com">RPubs</a> and various data repositories have made a big difference, but there is still a ways to go with respect to building up the public reproducibility infrastructure.</li>
</ul>
<p>Furthermore, <strong>even when data and code are available</strong>, readers often have to download the data, download the code, and then they have to piece everything together, usually by hand. It’s <strong>not always an easy task to put the data and code together</strong>.</p>
<ul>
<li>Readers may not have the same computational resources that the original authors did.</li>
<li>If the original authors used an enormous computing cluster, for example, to do their analysis, the readers may not have that same enormous computing cluster at their disposal. It may be difficult for readers to reproduce the same results.</li>
</ul>
<p>Generally, the <strong>toolbox for doing reproducible research is small</strong>, although <strong>it’s definitely growing</strong>.</p>
<ul>
<li>In practice, authors often just throw things up on the web. There are journals and supplementary materials, but they are famously disorganized.</li>
<li>There are only a few central databases that authors can take advantage of to post their data and make it available. So if you are working in a field that has a central database that everyone uses, that is great. If you are not, then you have to assemble your own resources.</li>
</ul>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Summary
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><p>The process of conducting and disseminating research can be depicted as a “data science pipeline”</p></li>
<li><p>Readers and consumers of data science research are typically not privy to the details of the data science pipeline</p></li>
<li><p>One view of reproducibility is that it gives research consumers partial access to the raw pipeline elements.</p></li>
</ul>
</div>
</div>
</section></section><section id="post-lecture-materials" class="level1"><h1>Post-lecture materials</h1>
<section id="final-questions" class="level3"><h3 class="anchored" data-anchor-id="final-questions">Final Questions</h3>
<p>Here are some post-lecture questions to help you think about the material discussed.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Questions
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li><p>Why can replication be difficult to achieve? Why is reproducibility a reasonable minimum standard when replication is not possible?</p></li>
<li><p>What is needed to reproduce the results of a data analysis?</p></li>
</ol>
</div>
</div>
</section><section id="additional-resources" class="level3"><h3 class="anchored" data-anchor-id="additional-resources">Additional Resources</h3>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>
<a href="https://www.annualreviews.org/doi/abs/10.1146/annurev-publhealth-012420-105110">Reproducible Research: A Retrospective</a> by Roger Peng and Stephanie Hicks</li>
</ul>
</div>
</div>


</section></section> ]]></description>
  <category>module 1</category>
  <category>week 2</category>
  <category>R</category>
  <category>reproducibility</category>
  <guid>https://mbutler808.github.io/posts/2025-01-23-reproducible-research/</guid>
  <pubDate>Thu, 23 Jan 2025 10:00:00 GMT</pubDate>
</item>
<item>
  <title>Introduction to git/GitHub</title>
  <dc:creator>Marguerite Butler</dc:creator>
  <link>https://mbutler808.github.io/posts/2025-01-21-intro-git-github/</link>
  <description><![CDATA[ <!-- Add interesting quote --><section id="lecture-materials" class="level1"><h1>Lecture materials</h1>
<div id="nte-info" class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note&nbsp;1: Helpful references for this lecture
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li>
<a href="https://happygitwithr.com">Happy Git with R</a> from Jenny Bryan</li>
<li>
<a href="https://rafalab.github.io/dsbook/git.html">Chapter on git and GitHub in <code>dsbook</code></a> from Rafael Irizarry</li>
<li>
<a href="https://andreashandel.github.io/MADAcourse">GitHub introduction in module 1</a> from Andreas Handel</li>
<li>Either before or after Tuesday’s class, please watch the podcast <em>GitHub my Computer and me</em>. You can stop at ~11:15:</li>
</ol>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/2MjsHnNMp7o" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
</div>
</div>
<section id="acknowledgements" class="level2"><h2 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h2>
<p>Material for this lecture was borrowed and adopted from</p>
<ul>
<li><a href="https://www.stephaniehicks.com/jhustatcomputing2022/" class="uri">https://www.stephaniehicks.com/jhustatcomputing2022/</a></li>
<li><a href="https://andreashandel.github.io/MADAcourse/Tools_Github_Introduction.html" class="uri">https://andreashandel.github.io/MADAcourse/Tools_Github_Introduction.html</a></li>
</ul></section></section><section id="learning-objectives" class="level1"><h1>Learning objectives</h1>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Learning objectives
</div>
</div>
<div class="callout-body-container callout-body">
<p>Last time, you should have created and set up a GitHub account.</p>
<p><strong>At the end of this lesson you will:</strong></p>
<ul>
<li>Know what Git and GitHub are.</li>
<li>Know why one might want to use them.</li>
<li>Have created a repo and executed basic push/pull commands.</li>
</ul>
</div>
</div>
</section><section id="introduction-to-gitgithub" class="level1"><h1>Introduction to git/GitHub</h1>
<p>This document gives a brief explanation of GitHub and how we will use it for this course.</p>
<section id="git" class="level2"><h2 class="anchored" data-anchor-id="git">git</h2>
<p><strong>Git</strong> is software that implements what is called a <em>version control system</em> for a repository of files (also known as a <em>repo</em>). The main idea is that as you (and your collaborators) work on a project, the git software tracks, and records any changes made by anyone.</p>
<p><strong>GitHub</strong> is an online server and user interface that provides powerful tools for distribution of your repository, bug tracking, collaboration, and also allows you to create easy websites for each repository.</p>
<p><strong>Git</strong> and <strong>GitHub</strong> together provide an organized way to track your projects, and all of the tools you will need in this course are free.</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure"><p><img src="https://mbutler808.github.io/images/A-Solo-work-with-DIY-version-control-via-filename-B-Collaborative-work-with-DIY_W640.jpeg" class="img-fluid figure-img" style="width:80.0%"></p>
<figcaption>Figure 1. Whether working solo (A) or collaborating in a group (B) version tracking by naming files is a mess when you want to retrace the steps of the analysis (C). Git and GitHub track all changes and the complete branching tree of the project (D). The commit history is a powerful tool to retrace the development of the project or can be used to roll back to any prior version.</figcaption></figure>
</div>
</div>
</div>
<p>[<a href="https://peerj.com/preprints/3159/">Source: Jenny Bryan</a>]</p>
<p>It is very well suited for collaborative work, as it was developed by Linus Torvalds (in about 10 days of coding!) for collaborative software development of the Linux kernel <a href="https://www.linuxfoundation.org/blog/blog/10-years-of-git-an-interview-with-git-creator-linus-torvalds">pretty interesting interview with Torvalds</a>. What it did really well was <em>distributed control</em>, and allowing everyone to have their <em>own copy of the repository</em>.</p>
<p><em>Git</em>/<em>GitHub</em> is now the dominant version control system with <em>GitHub</em> hosting over 200 million repositories worldwide! It is used very broadly for all kinds of repos now including data science projects, book projects, courses, and anything that needs collaborative management of mostly text files.</p>
<p>Another great and fun read about Git/GitHub and why it is a great tool for data analysis is in this article by <a href="https://peerj.com/preprints/3159/">Jenny Bryan</a>.</p>
</section><section id="what-to-not-use-gitgithub-for" class="level2"><h2 class="anchored" data-anchor-id="what-to-not-use-gitgithub-for">What to (not) use Git/GitHub for</h2>
<p><strong>GitHub is ideal if</strong> you have a project with (possibly many) smallish files, and most of those files are text files (such as R code, LaTeX, Quarto/(R)Markdown, etc.) and different people work on different parts of the project.</p>
<p><strong>GitHub is less useful if</strong> you have a lot of non-text files (e.g.&nbsp;Word or PowerPoint) and different team members might want to edit the same document at the same time. In that instance, a solution like Google Docs, Word+Dropbox, Word+Onedrive, etc. might be better.</p>
<p><strong>GitHub also has a problem with <em>large files</em></strong>. Anything above around 50MB can lead to very slow syncing and sometimes outright failure. Unfortunately, once GitHub has choked on a large file, it can be quite tricky to fix the repository to work again. <em>This is because the ENTIRE history is saved, including the addition of the huge file.</em> Therefore keep large (&gt;50MB) files out of your GitHub repositories. If you have to work with such files, try to reduce them first before placing into the GitHub repository. Or as alternative, place those files in another sync service (e.g.&nbsp;Dropbox, OneDrive, GoogleDrive) and load them from there.</p>
<p><strong>Finally, if you have <em>data</em></strong>, you need to be careful since by default, GitHub repositories are public. You can set the repository to private, but you need to be careful that you don’t accidentally expose confidential data to the public. It is in general not a good idea to have confidential data on GitHub. First anonymize your data (ensure that it is not at risk of identifiability), then you can place it in a private repository. If you put it in a public repo, be very careful!! (And you may need IRB approval, check with your institutional research office.)</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Git/GitHub has version control features like a turbo-charged version of “track changes” but more rigorous, powerful, and scaled up to multiple files</li>
<li>Great for solo or collaborative work</li>
<li>Saves the entire history of every change made</li>
<li>Allows for multiple verisions or “branches” to be developed and later merged</li>
<li>GitHub allows distributed collaboration (potentially among complete strangers) and has greatly promoted open-source software development, collaboration, distribution, and bug/issue tracking for users to get help</li>
<li>GitHub allows <em>webpages</em> for your projects or repositories</li>
</ul>
</div>
</div>
<p>Note that other interfaces to <em>Git</em> exist, e.g., <em>Bitbucket</em>, but <em>GitHub</em> is the most widely used one.</p>
</section><section id="why-use-gitgithub" class="level2"><h2 class="anchored" data-anchor-id="why-use-gitgithub">Why use git/GitHub?</h2>
<p>You want to use <em>GitHub</em> to avoid this:</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure"><p><img src="https://mbutler808.github.io/images/phdversioncontrol.gif" class="img-fluid figure-img" style="width:50.0%"></p>
<figcaption>How not to use GitHub <a href="http://phdcomics.com/comics/archive_print.php?comicid=1531">image from PhD Comics</a></figcaption></figure>
</div>
</div>
</div>
<p>To learn a bit more about Git/GitHub and why you might want to use it, <a href="https://peerj.com/preprints/3159/">read this article by Jenny Bryan</a>.</p>
<p><strong>Note her explanation of what’s special with the <code>README.md</code> file on GitHub.</strong></p>
</section><section id="how-to-use-gitgithub" class="level2"><h2 class="anchored" data-anchor-id="how-to-use-gitgithub">How to use Git/GitHub</h2>
<p>Git/GitHub is fundamentally <strong>based on commands you type into the command line</strong>. Lots of online resources show you how to use the command line. This is the most powerful, and the way I almost always interact with git/GitHub. However, many folks find this the most confusing way to use git/GitHub. Alternatively, there are graphical interfaces.</p>
<ul>
<li>
<a href="https://desktop.github.com/">GitHub itself</a> provides a grapical interface with basic functionality.</li>
<li>RStudio also has <a href="https://happygitwithr.com/rstudio-git-github.html">Git/GitHub integration</a>. Of course this only works for R project GitHub integration.</li>
<li>There are also third party GitHub clients with many advanced features, most of which you won’t need initially, but might eventually.</li>
</ul>
<p><strong>Note</strong>: As student, you can (and should) upgrade to the Pro version of GitHub for free (i.e.&nbsp;access to unlimited private repositories is one benefit), see the <a href="https://education.github.com/pack">GitHub student developer pack</a> on how to do this.</p>
</section></section><section id="getting-started-with-git" class="level1"><h1>Getting Started with git</h1>
<p>One of my favorite resources for getting started with git/GitHub is the Happy Git with R from Jenny Bryan (especially for Rstudio users):</p>
<ul>
<li><a href="https://happygitwithr.com" class="uri">https://happygitwithr.com</a></li>
</ul>
<p>It is one of the <strong>most comprehensive resources</strong> out there for getting started with git/GitHub. I will encourage all of you to go read through the online book. Some of you may only need to skim it, others will need to spend some time reading through it. Either way, I hope you will agree it is a worthwhile investment to understand the basics as well as to know you can get help.</p>
<section id="sec-profile" class="level2"><h2 class="anchored" data-anchor-id="sec-profile">Set up your profile in git on your computer</h2>
<p>Before making changes to your repository, GitHub will want to verify your identity.</p>
<p>In order for your computer to talk to GitHub smoothly, you will need to set up your <strong>username</strong> and <strong>email</strong> in the <strong>git profile</strong> stored on your computer.</p>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>Be sure to match</strong> your GitHub account <code>username</code> and <code>email</code>! Otherwise <em>GitHub</em> wonʻt know who you are</p>
</div>
</div>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb1" data-filename="Terminal" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> config <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--global</span> user.name <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GitHubUsername'</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> config <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--global</span> user.email <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GitHub_email@example.com'</span></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> config <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--global</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--list</span></span></code></pre></div>
</div>
<p>That last line will show all of your current <code>git config</code> settings.</p>
<p>If you are using Rstudio, easy directions are provided here <a href="https://happygitwithr.com/hello-git.html" class="uri">https://happygitwithr.com/hello-git.html</a></p>
</section><section id="sec-token" class="level2"><h2 class="anchored" data-anchor-id="sec-token">Set up your Personal Authentication Token on your computer</h2>
<p>GitHub will also want to check your credentials to authenticate you are really you before writing changes to your repo.</p>
<p>There are several ways to do this, but the easiest is the protocol for HTTP authentication. You will generate a <em>Personal Access Token</em> for HTTPS from your GitHub account which will be stored on your personal machine.</p>
<p>I prefer the GithHub command line interface or <code>gh</code> to do this. To install the CLI, follow <a href="https://github.com/cli/cli#installation">the instructions here for your operating system</a>. For Mac users, I suggest that you install <code>homebrew</code>, it is a command-line general software manager for many different software packages.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Storing your Personal Access Token
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li>From GitHub: Generate your personal access token <a href="https://happygitwithr.com/https-pat.html#get-a-pat">instructions</a>
<ol type="a">
<li>Find the token generator on GitHub under your <em>User Icon &gt; settings &gt; developer settings (left side bar) &gt; Personal access tokens &gt; Tokens (classic) &gt; Generate new Token &gt; classic</em> <strong>note this menu may change</strong>
</li>
<li>Select at least these scopes: “admin:org”,“repo”, “user”, “gist”, and “workflow”</li>
</ol>
</li>
<li>From your Command Line: Use <code>gh auth login</code> to store your token and follow the prompts.
<ol type="a">
<li>select <code>HTTPS</code> for your preferred protocol</li>
<li>select <code>Y</code> for authenticate with GitHub credentials</li>
<li>Alternatively if you want to do this all from the command line you can run the following line (if your token is saved in <code>mytoken.txt</code>):</li>
</ol>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb2" data-filename="Terminal" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">gh</span> auth login <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--with-token</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> mytoken.txt</span></code></pre></div>
</div>
</li>
</ol>
</div>
</div>
<p>Many more details are explained nicely here <a href="https://happygitwithr.com/https-pat.html" class="uri">https://happygitwithr.com/https-pat.html</a></p>
<p>You only have to store your credentials once for each computer (or PAT expiration date), then you can push and pull from GitHub to your heartʻs content. It really is a nice way to do things securely.</p>
</section><section id="configuring-your-default-git-editor" class="level2"><h2 class="anchored" data-anchor-id="configuring-your-default-git-editor">Configuring your default git editor</h2>
<p>You may want to set your default git editor to something you know how to use (it will come up when you have a merge conflict).</p>
<p>For example the nano editor is easy to use on the command line for a Unix shell:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Mac/Linux</strong></pre>
</div>
<div class="sourceCode" id="cb3" data-filename="Mac/Linux" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> config <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--global</span> core.editor <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nano -w"</span></span></code></pre></div>
</div>
<p><em>The Carpentries</em> provide a <a href="https://swcarpentry.github.io/git-novice/02-setup/#line-endings">full list of editors</a> by operating system, a great resource.</p>
</section></section><section id="using-gitgithub-in-our-course" class="level1"><h1>Using git/GitHub in our course</h1>
<p>In this course, you will use git/GitHub in the following ways:</p>
<ol type="1">
<li>Project 0 (optional) - You will create a website introducing yourself to folks in the course and deploy it on GitHub.</li>
<li>Projects 1-3 - You can practice using git locally (on your compute environment) to track your changes over time and, if you wish (but highly suggested), you can practice pushing your project solutions to a private GitHub repository on your GitHub account (i.e.&nbsp;<code>git add</code>, <code>git commit</code>, <code>git push</code>, <code>git pull</code>, etc).</li>
</ol>
<p>Learning these skills will be useful down the road if you ever work collaboratively on a project (i.e.&nbsp;writing code with other people, or suggesting changes or bug fixes to other projects). In this scenario, you will use the skills you have been practicing in your projects to work together as a team in a single GitHub repository.</p>
</section><section id="clone-a-repo-to-your-local-directory---easy" class="level1"><h1>Clone a repo to your local directory - Easy!</h1>
<p>Cloning an existing repo from GitHub is easy. Letʻs clone the <strong>rclassdata</strong> repo to our local git folder within your Documents folder. 1. Go to <a href="https://github.com/mbutler808/rclassdata" class="uri">https://github.com/mbutler808/rclassdata</a> and click on the green <strong>&lt;&gt;Code</strong> button and copy the URL.</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure"><p><img src="https://mbutler808.github.io/images/github_cloning.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>Cloning from an existing repo</figcaption></figure>
</div>
</div>
</div>
<ol start="2" type="1">
<li>In your Terminal, Git-Bash, or CMD prompt, navigate to your git folder (create one in Documents if you donʻt have one already), and clone the repo:</li>
</ol>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal(Mac/Linux/Git-bash)</strong></pre>
</div>
<div class="sourceCode" id="cb4" data-filename="Terminal(Mac/Linux/Git-bash)" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">pwd</span></span>
<span id="cb4-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> ~/Documents/git  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># navigate to your git folder</span></span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> clone https://github.com/mbutler808/rclassdata.git</span></code></pre></div>
</div>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>CMD(Windows)</strong></pre>
</div>
<div class="sourceCode" id="cb5" data-filename="CMD(Windows)" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir</span></span>
<span id="cb5-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> ~/Documents/git  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># navigate to your git folder</span></span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> clone https://github.com/mbutler808/rclassdata.git</span></code></pre></div>
</div>
<p>If you set up your personal access token, it should appear on your computer! If not, go back to Section&nbsp;4.2 and try again.</p>
</section><section id="make-a-github-repo-started-from-your-local-files" class="level1"><h1>Make a GitHub repo started from your local files</h1>
<p>Suppose you have some files on your computer and youʻd like to make them into a repo. For this example, weʻre going to make a repo called <strong>test</strong></p>
<ol type="1">
<li>Create a folder in your <code>Documents/git</code> directory called <code>test</code> and copy some files there.</li>
<li>Go to your GitHub account and create a new repository. Click on the small black + on the top right corner</li>
</ol>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure"><p><img src="https://mbutler808.github.io/images/git_newrepo.png" class="img-fluid figure-img" style="width:50.0%"></p>
<figcaption>Create a new repo button</figcaption></figure>
</div>
</div>
</div>
<ol start="3" type="1">
<li>Give your new repo a name (“test”) and choose to create a blank repo with no README.md or .gitignore. We can add them later.</li>
</ol>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure"><p><img src="https://mbutler808.github.io/images/git_create_new_repo.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>Set up a blank repo</figcaption></figure>
</div>
</div>
</div>
<ol start="4" type="1">
<li>You will see the following page giving you helpful hints for linking your GitHub repo with your local repo. We will follow the first set of instructions, slightly modified.</li>
</ol>
<div class="cell">
<div class="cell-output-display">
<div>
<figure class="figure"><p><img src="https://mbutler808.github.io/images/github_quicksetup.png" class="img-fluid figure-img" style="width:100.0%"></p>
</figure>
</div>
</div>
</div>
<p>Explantations for each line of code:</p>
<ul>
<li>
<code>echo "# test" &gt;&gt; README.md</code> Write <code># test</code> to <code>README.md</code> which will be created since it doesnʻt already exist</li>
<li>
<code>git init</code> Intializes the local repo to set up git tracking (only need to to this once for each repo)</li>
<li>
<code>git add .</code> Adds (. = all) our files and commits any changes to the repo</li>
<li>
<code>git commit -m "first commit"</code> Commit message</li>
<li>
<code>git branch -M main</code> Renames the local branch to main</li>
<li>
<code>git remote add origin URL</code> Connect the remote repo (=“origin” on GitHub) to our local repo. Be sure to copy the appropriate URL for your own GitHub repo.</li>
<li>
<code>git push -u origin main</code> Push our local changes (in main) up to the remote (to a parallel branch “main” on origin).</li>
</ul>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb6" data-filename="Terminal" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"# test"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> README.md</span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> init</span>
<span id="cb6-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> add .</span>
<span id="cb6-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> commit <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"first commit"</span></span>
<span id="cb6-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> branch <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-M</span> main</span>
<span id="cb6-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> remote add origin https://github.com/mbutler808/test.git</span>
<span id="cb6-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> push <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-u</span> origin main</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
GitHub requires authentication to overwrite your repository (this is a good thing 😃👍)
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Did <em>GitHub</em> complain that it doesnʻt know your <strong>username</strong> or <strong>email</strong>?</li>
</ul>
<p>This might be because the defaults on your computer donʻt match what you used to register for your GitHub account. Not to worry, just set it to match your GitHub account here: Section&nbsp;4.1</p>
<ul>
<li>Did <em>GitHub</em> complain that your <strong>authentication</strong> failed?</li>
</ul>
<p>Donʻt worry, just try it again: Section&nbsp;4.2. Nice bonus, you only have to do it once for each computer.</p>
</div>
</div>
<ol start="5" type="1">
<li>Check your remote repo. The files from your computer should be there!</li>
<li>Now try pushing up another change. Make some edits to one or more local files.</li>
<li>Add, Commit, Push:</li>
</ol>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb7" data-filename="Terminal" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> add .</span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> commit <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"made a small change"</span></span>
<span id="cb7-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> push origin main</span></code></pre></div>
</div>
<p>Check your remote repo. Did it go up? Well done! 😍</p>
<p>Your local files and your GitHub repository files are now synced!</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure"><p><img src="https://mbutler808.github.io/images/With-Git-all-contributors-have-a-copy-of-the-repo-with-all-files-and-the-full-history_W640.jpeg" class="img-fluid figure-img" style="width:80.0%"></p>
<figcaption>Everyone is one with the repo</figcaption></figure>
</div>
</div>
</div>
<p>[<a href="https://peerj.com/preprints/3159/">Source: Jenny Bryan</a>]</p>
<ol start="8" type="1">
<li>The nuclear option</li>
</ol>
<p>If you need to start over you can delete and remake your repos. (For example if you canʻt get your local and remote repos to communicate and you canʻt figure out why.)</p>
<p>Since your GitHub repo is empty and youʻre just getting started, there is really no harm in deleting it and starting over. From your repo on github.com, go to <code>settings</code>, then scrolll all the way down until you reach <code>The Danger Zone</code> where you will find the <code>Delete this repository</code> button.</p>
<p>If you just want to delete your local git tracking without deleting all of the files you created, you can just delete your local hidden <code>.git</code> directory, leaving the rest of the files and directories in place. From your command line:</p>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
NOTE: This will delete your local git history, and is not reversible.
</div>
</div>
<div class="callout-body-container callout-body">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb8" data-filename="Terminal" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-rf</span> .git</span></code></pre></div>
</div>
</div>
</div>
</section><section id="a-word-about-merge-conflicts" class="level1"><h1>A word about merge conflicts</h1>
<p>Sooner or later, you will encounter a merge conflict. That happens if the same file(s) changed both locally and on GitHub.com. That can happen if multiple people work on the same files, or if you work on multiple computers and forget to always push/pull before and after you work on a project. Donʻt get discouraged, this is solvable!</p>
<p>Sometimes you have to do it manually. Moving the offending files out of your local repository, then doing the merge and after that adding the updates again can help. If you know that one source is the definite one, you can force a push or pull. A more advanced approach is to use branches.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb9" data-filename="Terminal" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> push <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--force</span></span></code></pre></div>
</div>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>The main danger is that a force push or pull will force git to write over a conflict, and can possibly destroy someone elseʻs work. If youʻre the only one on the repo, then itʻs only your changes that youʻll lose</li>
<li>Just be aware but donʻt be afraid to practice. You can always revert back.</li>
<li>See the help page for <a href="https://git-scm.com/docs/git-push">git push</a>. See the -f or –force flag. Itʻs terse computer help, but if you make the effort it will start to make sense.</li>
<li>Iʻll link a more tutorial type resource later</li>
</ul>
</div>
</div>
</section><section id="forking-a-repo" class="level1"><h1>Forking a repo</h1>
<p>When you want to build on someone elseʻs repo, that is a great time to <strong>fork</strong> a repo. This happens when you donʻt have write permission to the repo, but you want provide suggestions (for example if you want to fix a bug). Or if you want to use that repo as a template or a launching off point for your own project.</p>
<p>After you fork and clone the repo to your computer, you can edit, add, and commit the changes. When you are ready to submit the suggestions to the repo owner, start a <strong>pull request</strong>. They will then read over your suggested edits, and if they approve they can merge the changes into the working repo.</p>
<p><strong>Forks</strong> are nice because they remain connected to the parent repo in GitHub. So you can seamlessly work on your own private copy and send it back to the original project when you are ready.</p>
<p><strong>Branches</strong> work in a similar way. The idea is simple. If you have a working repo, you donʻt want to made edits or experimental changes to <strong>main</strong> that may break the functionality. Branches are a way to make a “development branch” where you can work on your ideas in private without breaking anything. When youʻre sure you have everything ironed out and working, you can merge your branch back to <strong>main</strong>, and delete your branch. They are meant to be an ephemeral scratch copy to keep the project clean, organized, and working perfectly.</p>
</section><section id="post-lecture-materials" class="level1"><h1>Post-lecture materials</h1>
<p>If you haven’t already done so, please watch the podcast <em>GitHub my Computer and me</em> (see Note&nbsp;1 #4).</p>
<section id="final-questions" class="level3"><h3 class="anchored" data-anchor-id="final-questions">Final Questions</h3>
<p>Here are some post-lecture questions to help you think about the material discussed.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Questions
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li><p>What is version control?</p></li>
<li><p>What is the difference between git and GitHub?</p></li>
<li><p>What are some benefits and case uses for repositories with version control using git and GitHub?</p></li>
</ol>
</div>
</div>
</section><section id="additional-resources" class="level3"><h3 class="anchored" data-anchor-id="additional-resources">Additional Resources</h3>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>
<a href="https://rafalab.github.io/dsbook/git.html">git and GitHub in the <code>dsbook</code></a> by Rafael Irizarry</li>
</ul>
</div>
</div>


</section></section> ]]></description>
  <category>module 1</category>
  <category>week 2</category>
  <category>programming</category>
  <category>version control</category>
  <category>git</category>
  <category>GitHub</category>
  <guid>https://mbutler808.github.io/posts/2025-01-21-intro-git-github/</guid>
  <pubDate>Tue, 21 Jan 2025 10:00:00 GMT</pubDate>
</item>
<item>
  <title>Introduction to your computerʻs terminal utilities</title>
  <dc:creator>Marguerite Butler</dc:creator>
  <link>https://mbutler808.github.io/posts/2025-01-16-your-computer-filesystems/</link>
  <description><![CDATA[ <!-- Add interesting quote --><section id="pre-lecture-materials" class="level1"><h1>Pre-lecture materials</h1>
<section id="read-ahead" class="level3"><h3 class="anchored" data-anchor-id="read-ahead">Read ahead</h3>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Read ahead
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>For future lectures, Iʻll give you some reading or podcasts to prepare</strong></p>
</div>
</div>
</section><section id="acknowledgements" class="level3"><h3 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h3>
<p>Material for this lecture was borrowed and adopted from</p>
<ul>
<li><a href="https://academind.com/tutorials/terminal-zsh-basics" class="uri">https://academind.com/tutorials/terminal-zsh-basics</a></li>
</ul></section></section><section id="learning-objectives" class="level1"><h1>Learning objectives</h1>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Learning objectives
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>At the end of this lesson you will:</strong></p>
<ul>
<li>Know the shell used in your computer`s operating system.</li>
<li>Know basic shell commands and when you might want to use them.</li>
<li>Know how to traverse your computer`s filesystem, grab input or put output anywhere.</li>
<li>Understand the difference between relative and absolute file paths.</li>
<li>Know how to create and manipulate files through the shell.</li>
</ul>
</div>
</div>
</section><section id="introduction-to-the-shell" class="level1"><h1>Introduction to the shell</h1>
<p>This document gives a brief explanation of your computerʻs filesystems and how we will use the command line for this course.</p>
<section id="the-kernel" class="level2"><h2 class="anchored" data-anchor-id="the-kernel">The kernel</h2>
<p>The <em>kernel</em> is the part of your computerʻs operating system that loads first once you start up. It is kind of like your computerʻs autonomic nervous system. It recognizes all of the physical hardware attached to it, enables communication between components (and device drivers), and monitors maintenance functions like turning on the fan when it gets hot, manages virtual memory, gives warnings when the hard drive gets full, manages multitasking, and manages security and file permissions. In the mac this is the XNU kernel (“X is not UNIX”), in modern Windows machines it is the Windows NT kernel.</p>
<div class="cell fig-cap-location-top">
<div class="cell-output-display">
<div>
<figure class="figure"><p><img src="https://www.linuxandubuntu.com/content/images/wordpress/2019/07/macos-kernel-resources.jpg?ssl=1" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>[<a href="https://www.linuxandubuntu.com/home/difference-between-linux-kernel-mac-kernel">Source: Map of MacOS: the heart of everything is called Darwin; and within it, we have separate system utilities (the shell) and the XNU kernel, which is composed in parts by the Mach kernel and by the BSD kernel.</a>]</p>
</section><section id="the-shell" class="level2"><h2 class="anchored" data-anchor-id="the-shell">The shell</h2>
<p>The <strong>shell</strong> is another key part of the core operating system (note in the diagram above it is part of the <strong>System Utilities</strong>, and the partner of the kernel). The shell is a software (an app) that allows humans to control the computer. You are already familiar with the <em>GUI</em> interface, or the <em>Graphical User Interface</em>. It is important that you are comfortable using the <em>Command Line Interface</em> as well.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
There are many reasons to be proficient in the shell:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Data analysis increasingly uses many files. The shell provides a simple but very powerful means to do all kinds of operations on files: move, delete, organize, combine, rename, etc.</li>
<li>Using the shell encourages you to understand your computerʻs filesystem, and helps you to more precisely control input and output to any place along your file paths.</li>
<li>Shell operations are fast.</li>
<li>You can use wildcards to control matching or excluding many files.</li>
<li>The shell can be used to execute (run) software.</li>
<li>The shell is probably the oldest app, so it is very stable with lasting power.</li>
<li>It is part of the OS, so when your apps fail or you are having some issues, you would turn to the shell to kill troublesome processes (programs) or diagnose and fix the issues.</li>
</ul>
</div>
</div>
<p>Macs use the same terminal utilities as UNIX/Linux systems. On the Mac, the command line interface app is called <em>Terminal</em>, which you will find in your <em>Application</em> folder, in the <em>Utilities</em> subfolder (here is a screentshot of our GUI Interface).</p>
<div class="cell fig-cap-location-top">
<div class="cell-output-display">
<div>
<figure class="figure"><p><img src="https://mbutler808.github.io/images/terminal.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>On a PC if you installed <a href="https://happygitwithr.com/install-git">Git For Windows</a>, you can use <em>Git-Bash</em> (a UNIX emulator) and follow the UNIX instructions (this would be my personal preference). Otherwise you use the <em>Command Prompt</em> also known as the <em>Windows Command Processor</em> or <em>CMD</em>. If you used a pre-Windows machine, you would be familiar with MS-DOS. To open CMD:</p>
<ol type="1">
<li>Open the Start Menu and type “command prompt” or</li>
<li>Press <strong>Win + R</strong> and type “cmd” in the run box or</li>
<li>Press <strong>Win + X</strong> and select Command Prompt from the menu.</li>
</ol>
<p>Note: you may see <em>Windows PowerShell</em> or <em>Windows Terminal</em> instead, these are similar apps.</p>
</section></section><section id="the-working-directory" class="level1"><h1>The Working Directory</h1>
<p>By default, the working directory on a Mac and UNIX/Linux systems is your home user directory “~”. On a PC the default working directory may look something like a subdirectory of your C drive “C:[Username]".</p>
<p>This is where you currently are in your computerʻs file structure.</p>
<p>First, let’s check where we are by listing the files in our current directory. Note that some shell commands differ between different shells (i.e.&nbsp;UNIX vs.&nbsp;PC). Listing the contents of a directory is done with <strong>ls</strong> in UNIX and <strong>dir</strong> in PC:</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs">
<li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Mac/UNIX</a></li>
<li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">PC</a></li>
</ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span></span></code></pre></div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb2-1">dir</span></code></pre></div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
An important principle of programming is <strong>VERIFICATION</strong>
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>
<strong>Always check that it worked</strong> – at each step!</li>
<li>You should check the new commands that you are learning against something that you KNOW WORKS.</li>
<li>Here, since you are familiar with the GUI, as you are doing these new command line operations, keep a GUI window open to verify.</li>
<li>You should also check on the command line by listing the directory after you add or move files etc.</li>
</ul>
</div>
</div>
<p>Please make a folder for your work in a convenient place and call it “Rclass”. On a Mac you may want to put it in “Documents”. Start by navigating into your Documents folder or other such folder where you want your Rclass work to be saved. <strong>cd</strong> is for <em>change directory</em>, and the syntax is <strong>cd Foldername</strong>:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb3-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> Documents</span></code></pre></div>
</section><section id="making-a-new-folder-from-the-command-line" class="level1"><h1>Making a new folder from the command Line</h1>
<p>In both systems, the <strong>mkdir</strong> command for <em>make directory</em> will create a new folder, and <strong>cd</strong> will change directories. :</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs">
<li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">Mac/UNIX</a></li>
<li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">PC</a></li>
</ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> Rclass</span>
<span id="cb4-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> Rclass</span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># or dir in PC</span></span></code></pre></div>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb5-1">mkdir Rclass</span>
<span id="cb5-2">cd Rclass</span>
<span id="cb5-3">dir</span></code></pre></div>
</div>
</div>
</div>
<p>You have now created the Rclass directory, changed directory again into Rclass, and listed files. (It should be empty.)</p>
<p>This seems like a lot of trouble, when you can just point and click in the GUI. But the beauty of the shell is its power. We can automate actions, execute code, and use wildcards to do many at once (coming up below).</p>
<p>Letʻs say you wanted to create files in a new subfolder. <strong>touch</strong> is a command that creates a new (empty) file, or alters the timestamp of existing files.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs">
<li class="nav-item"><a class="nav-link active" id="tabset-3-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-1" aria-controls="tabset-3-1" aria-selected="true">Mac/UNIX</a></li>
<li class="nav-item"><a class="nav-link" id="tabset-3-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-2" aria-controls="tabset-3-2" aria-selected="false">PC</a></li>
</ul>
<div class="tab-content">
<div id="tabset-3-1" class="tab-pane active" aria-labelledby="tabset-3-1-tab">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> shell</span>
<span id="cb6-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> shell</span>
<span id="cb6-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">touch</span> dat.txt  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># PC does not have the touch function</span></span></code></pre></div>
</div>
<div id="tabset-3-2" class="tab-pane" aria-labelledby="tabset-3-2-tab">
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> shell</span>
<span id="cb7-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> shell</span>
<span id="cb7-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span> nul <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> dat.txt  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for PC use type nul with pipe instead of touch</span></span></code></pre></div>
</div>
</div>
</div>
<p>Check that you have a subfolder within Rclass that has one file named dat.txt.</p>
<p>Suppose we wanted to create 10 files. You can so easily in the UNIX shell:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">touch</span> dat<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">..</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span>.txt  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for PC type nul &gt; dat1.txt multiple times</span></span></code></pre></div>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs">
<li class="nav-item"><a class="nav-link active" id="tabset-4-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-1" aria-controls="tabset-4-1" aria-selected="true">Mac/UNIX</a></li>
<li class="nav-item"><a class="nav-link" id="tabset-4-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-2" aria-controls="tabset-4-2" aria-selected="false">PC</a></li>
</ul>
<div class="tab-content">
<div id="tabset-4-1" class="tab-pane active" aria-labelledby="tabset-4-1-tab">
<p>To check your files timestamps list files with the -l flag:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-l</span></span></code></pre></div>
<p>The -a flag shows hidden files. You can do both at once:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-la</span></span></code></pre></div>
</div>
<div id="tabset-4-2" class="tab-pane" aria-labelledby="tabset-4-2-tab">
<p>The <strong>dir</strong> command provides the timestamp as well as other information.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir</span></span></code></pre></div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Exercise:
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li>Create 20 files with the .jpg file extension.</li>
<li>List your files now.</li>
<li>Create 2 subdirectories, one called “Data” and one called “Images”</li>
</ol>
</div>
</div>
</section><section id="more-useful-commands-move-copy-remove-and-friends" class="level1"><h1>More useful commands: <strong>move</strong> <strong>copy</strong> <strong>remove</strong> and friends</h1>
<p>Some additional very useful commands are those for moving, copying, and removing (deleting) files. These can operate on your current directory, or you can add the <em>path</em> to your file. For example, to move your file into the Data subdirectory:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mv</span> dat1.txt Data/dat1.txt</span>
<span id="cb12-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span></span>
<span id="cb12-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span> Data</span></code></pre></div>
<p>Anywhere where you can indicate a filename, you can also add a path to that file.</p>
<table class="caption-top table">
<colgroup>
<col style="width: 22%">
<col style="width: 25%">
<col style="width: 33%">
<col style="width: 18%">
</colgroup>
<thead><tr class="header">
<th>function</th>
<th>UNIX</th>
<th>Windows CMD</th>
<th>example</th>
</tr></thead>
<tbody>
<tr class="odd">
<td>move</td>
<td>mv filename newlocation</td>
<td>move filename newlocation</td>
<td>mv dat1.txt Data</td>
</tr>
<tr class="even">
<td>copy</td>
<td>cp filename newfilename</td>
<td>copy filename newfilename</td>
<td>cp dat1.txt catcat.txt</td>
</tr>
<tr class="odd">
<td>remove</td>
<td>rm filename</td>
<td>del filename</td>
<td>rm dat1.txt</td>
</tr>
<tr class="even">
<td>remove directory</td>
<td>rmdir Directory</td>
<td>rmdir Directory</td>
<td>rmdir Data</td>
</tr>
<tr class="odd">
<td>concatenate (combine)</td>
<td>cat file1 file2</td>
<td>cat file1 file2</td>
<td>cat dat1.txt dat2.txt</td>
</tr>
<tr class="even">
<td>concatenate to new file</td>
<td>cat file1 file2 &gt; file3</td>
<td>cat file1 file2 &gt; file3</td>
<td>cat dat1.txt dat2.txt &gt; alldat.txt</td>
</tr>
<tr class="odd">
<td>list files</td>
<td>ls</td>
<td>dir</td>
<td></td>
</tr>
<tr class="even">
<td>get working directory</td>
<td>pwd</td>
<td>cd</td>
<td></td>
</tr>
</tbody>
</table>
<p><em>Note: UNIX commands are case-sensitive, Windows commands are not.</em> <em>Apologies in advance for any Windows command errors - Iʻm really not an expert. Please let me know so I can fix it. Thank you!</em></p>
</section><section id="wildcards" class="level1"><h1>Wildcards</h1>
<p>You can also select multiple files at once using wildcards. If you want to grab all of the .txt files, for example, you can do:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cp</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span>.txt Data</span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># PC: use dir</span></span>
<span id="cb13-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span> Data <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># PC: use dir Data</span></span></code></pre></div>
<p>And you should have copied <em>all</em> files that end in .txt into Data. You could alternatively used dat* which will select all files that begin with “dat” but can end in anything else. The * will match any characters (zero or more).</p>
<p>There are a lot of other wildcards that you can use.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Exercise:
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li>Move all of your data files into Data, and all of your image files into Images.</li>
<li>Remove any straggler files from the top level of shell, if you used the copy command.</li>
<li>List files from shell, Data, and Images.</li>
</ol>
</div>
</div>
</section><section id="relative-paths-vs.-absolute-paths" class="level1"><h1>Relative paths vs.&nbsp;Absolute paths</h1>
<p>In the Mac, there are two important <em>shortcuts</em>:</p>
<ul>
<li>“/” : The root directory of your entire computer, indicated by “/”.</li>
<li>“~” : The root of your user directory, which for me is “marguerite”. From the root directory, it will be “/Users/username”</li>
</ul>
<p>In PCs, your root user directory in CMD is usually something like:</p>
<ul>
<li>“C:\User\username" : this would be the root of your user Directory</li>
<li>The root of the C drive is “C:"</li>
</ul>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note:
</div>
</div>
<div class="callout-body-container callout-body">
<p>On PCs pay attention to the direction of the slashes when you type <strong>dir</strong> is it “/” or “\” ? When you type your filepaths, be sure to use the right type of slash.</p>
</div>
</div>
<p>Check out what is in these directories:</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs">
<li class="nav-item"><a class="nav-link active" id="tabset-5-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-5-1" aria-controls="tabset-5-1" aria-selected="true">Mac/UNIX</a></li>
<li class="nav-item"><a class="nav-link" id="tabset-5-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-5-2" aria-controls="tabset-5-2" aria-selected="false">PC</a></li>
</ul>
<div class="tab-content">
<div id="tabset-5-1" class="tab-pane active" aria-labelledby="tabset-5-1-tab">
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span> /</span>
<span id="cb14-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span> ~</span></code></pre></div>
</div>
<div id="tabset-5-2" class="tab-pane" aria-labelledby="tabset-5-2-tab">
<p>Shortcuts in Windows are called Windows Environment Path Variables:</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir</span> %UserProfile%  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># is this C:\\Users\\{username} ?</span></span>
<span id="cb15-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir</span> %SystemDrive%   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># is this C: ?</span></span></code></pre></div>
<p>With the advent of the OneDrive, there is now a parallel user directory in OneDrive that also has Documents, etc.</p>
<p>Donʻt get confused! “C:" drive is not the”OneDrive”. (the OneDrive is a location on your hard drive, sometimes on C:, sometimes on D:) Windows makes use of a lot of symbolic links to make it easier for the user. These are different directories, sometims on different drives or partitions, but to the user it looks like theyʻre in the same folder). Symbolic links can be generally used in filepaths, but it can be very confusing if you accidentally end up with a circular reference or when you need to find the actual location on the hard drive.</p>
<p>Use the “\ad” flag with <strong>dir</strong> to see all of the symbolic links too. They call these symbolic links <em>namespace junctions</em>.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir</span> %UserProfile% <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\\</span>ad</span></code></pre></div>
</div>
</div>
</div>
<p>You can use these as shortcuts as starting points for your path to basically write an absolute path. This becomes important when you write a script that may be moved to different locations or shared with different people on different computers.</p>
<p>For example, “cd ~/Documents” will take you to the Documents folder inside your user directory, regardless of where you are currently because it is an <strong>absolute path</strong>.</p>
<p>A <strong>relative path</strong> will traverse the file directory <em>relative</em> to where you are currently. For example “Documents” will start at current working directory and look for a subfolder called Documents:</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span> Documents  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># relative path, is there a Documents folder here?</span></span></code></pre></div>
<p>In contrast, an absolute path will start from the very beginning of your root directory and contain the complete path.</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span> ~/Documents <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this is an absolute path because ~ = "\Users\marguerite"</span></span></code></pre></div>
<p>On the Mac, an asbolute path will start with “/” (or a shortcut that contains a starting “/”), whereas on a PC an absolute path will start with “C:”</p>
</section><section id="navigating-your-file-directories" class="level1"><h1>Navigating your file directories</h1>
<section id="the-dots" class="level2"><h2 class="anchored" data-anchor-id="the-dots">The dots</h2>
<ul>
<li>“.” is the current working directory (where you are currently)</li>
<li>“..” is the directory one level up</li>
<li>“./foldername” will take you to the folder one level down, for example “./Data”</li>
</ul>
<p>You can use these paths to change directories using <em>cd</em> or to list <em>ls</em> the contents of the directories or to make new directories using <em>mkdir</em></p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span> .</span>
<span id="cb19-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span> ./Data</span>
<span id="cb19-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> ./Data/A</span></code></pre></div>
<p>Make multiple directories:</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb20-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> ./Data/B ./Data/C</span></code></pre></div>
<p>List the files one level up or two levels up:</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span> ..  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for PC use dir ..</span></span>
<span id="cb21-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span> ../..</span></code></pre></div>
<p>Up one level, and over to another directory:</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span> ../AnotherDirectory</span></code></pre></div>
<p>You can wander anywhere along your computerʻs file directory! Just add more steps to the path.</p>
</section></section><section id="executing-software-from-the-command-line" class="level1"><h1>Executing software from the command Line</h1>
<p>The command line is the OG (original) method for using your computer. You can of course run software from the command line as well, not just UNIX or shell commands. For example, you can run R from a unix shell using:</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-6-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-6-1" aria-controls="tabset-6-1" aria-selected="true">Mac/UNIX</a></li></ul>
<div class="tab-content">
<div id="tabset-6-1" class="tab-pane active" aria-labelledby="tabset-6-1-tab">
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb23-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">R</span></span></code></pre></div>
</div>
</div>
</div>
<p>Which will launch R within the console, and look something like this:</p>
<div class="cell fig-cap-location-top">
<div class="cell-output-display">
<div>
<figure class="figure"><p><img src="https://mbutler808.github.io/images/R_command.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Invoke help by typing:</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb24-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span> help.start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span></code></pre></div>
<p>And quit with:</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb25-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">q()</span></span></code></pre></div>
<p>Choose “n” when asked if you want to save workspace image.</p>
</section><section id="piping-commands" class="level1"><h1>Piping commands</h1>
<p>You can redirect output using <em>&gt;</em> and <em>&lt;</em> with the point indicating the direction. Here is an example. First letʻs put some contents into the files, and check the contents with the command “less” (there is also “more”):</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb26-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> dat1.txt</span>
<span id="cb26-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">less</span> dat1.txt</span></code></pre></div>
<p><em>&gt;</em> pipes (or sends) output to the file named “dat1.txt”. If the file doesnʻt exist, it will create it. If it already exists, it will <em>replace</em> the file.</p>
<p>If you want to add on to the file, use “&gt;&gt;”</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb27-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Another letter B"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> dat1.txt</span>
<span id="cb27-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">less</span> dat1.txt</span></code></pre></div>
<p>Output to multiple files:</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb28-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>dat2.txt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>dat3.txt</span>
<span id="cb28-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">less</span> dat2.txt</span>
<span id="cb28-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">less</span> dat3.txt</span></code></pre></div>
<p>Concatenate (combine) multiple files using <em>cat</em> and send it to file</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb29-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span> dat1.txt dat2.txt dat3.txt</span>
<span id="cb29-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span> dat1.txt dat2.txt dat3.txt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>all.txt</span>
<span id="cb29-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">less</span> all.txt</span></code></pre></div>
</section><section id="post-lecture-materials" class="level1"><h1>Post-lecture materials</h1>
<section id="final-questions" class="level3"><h3 class="anchored" data-anchor-id="final-questions">Final Questions</h3>
<p>Here are some post-lecture questions to help you think about the material discussed.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Questions
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li><p>What is a command line interface?</p></li>
<li><p>How can using the command line help with file organization or reorganization?</p></li>
<li><p>What is the importance of choosing a good file naming system?</p></li>
<li><p>What is the difference between a relative path and an absolute path?</p></li>
</ol>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
For additional practice:
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li><p>Practice making directories with subdirectories A, B, etc. with several levels A1 A2 etc.</p></li>
<li><p>Practice moving files between different directories and at different levels.</p></li>
<li><p>Practice moving junk lying around in your downloads folder into the trash using the command line (or at least putting them into a common folder “opala” folder which you can then manually put into the trash). (FYI on the Mac Trash is in “~/.Trash” so it is a hidden folder)</p></li>
</ol>
</div>
</div>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
In Preparation for Next Time:
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li><p>Install git. Follow instructions at for Mac or PC at [<a href="https://happygitwithr.com/install-git">Happy Git and GitHub for the useR</a>] For Windows install, installation of “Git-Bash” is highly recommended.</p></li>
<li><p>Create an account at GitHub [<a href="https://happygitwithr.com/github-acct">advice here</a>]</p></li>
</ol>
</div>
</div>
</section><section id="additional-resources" class="level3"><h3 class="anchored" data-anchor-id="additional-resources">Additional Resources</h3>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="https://academind.com/tutorials/terminal-zsh-basics">A tutorial for zsh on Macs</a></li>
<li><a href="https://www.educative.io/blog/bash-shell-command-cheat-sheet">Bash shell cheat sheet (mostly works for zsh too)</a></li>
<li><a href="https://www.makeuseof.com/tag/a-beginners-guide-to-the-windows-command-line/">A tutorial for CMD on PCs</a></li>
<li><a href="https://serverspace.us/support/help/windows-cmd-commands-cheat-sheet/">Windows CMD cheat sheet</a></li>
</ul>
</div>
</div>


</section></section> ]]></description>
  <category>module 1</category>
  <category>week 1</category>
  <category>programming</category>
  <category>filesystem</category>
  <category>shell</category>
  <guid>https://mbutler808.github.io/posts/2025-01-16-your-computer-filesystems/</guid>
  <pubDate>Thu, 16 Jan 2025 10:00:00 GMT</pubDate>
</item>
<item>
  <title></title>
  <dc:creator>Marguerite Butler</dc:creator>
  <link>https://mbutler808.github.io/posts/2025-01-14-the-big-picture/</link>
  <description><![CDATA[ undefined ]]></description>
  <category>module 1</category>
  <category>week 1</category>
  <category>introduction</category>
  <guid>https://mbutler808.github.io/posts/2025-01-14-the-big-picture/</guid>
  <pubDate>Tue, 14 Jan 2025 10:00:00 GMT</pubDate>
</item>
</channel>
</rss>
