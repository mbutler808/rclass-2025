{
  "hash": "4ab7417df8637bff62d2fc5a481a3b8e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Writing your own functions\"\nauthor:\n  - name: Marguerite Butler\n    url: https://butlerlab.org\n    affiliation: School of Life Sciences, University of Hawaii\n    affiliation_url: https://manoa.hawaii.edu/lifesciences/\ndescription: \"and all about functions in R\"\ndate: 2025-03-27\ncategories: [module 4, week 8, programming, functions, methods, scope]\n---\n\n\n\n\n# Learning objectives\n\n::: callout-note\n# Learning objectives\n\n**At the end of this lesson you will:**\n\n-   Understand the components of a function\n-   Be able to write your own functions\n-   Understand the scope of variables within functions\n-   Understand methods dispatch \n-   Have a better understanding of how packages work\n:::\n\n# Overview\n\nWe've learned how to write good scripts and debug at the console. You may have noticed that you sometimes have to do the same things over and over again. And you find yourself cutting and pasting bits of code and making minor changes to it. This is a situation where writing your own _function_ is a big help. \n\nFunctions help in several ways. Once you perfect a bit of code, they help achieve these goals of good programming by writing code that is:\n\n-  Reusable and Generic  \n-  Modular  \n-  Easy to Maintain  \n\nWhen do you want to write a function? Any time you find yourself cutting and pasting bits of your code (more than once or twice). Think ahead to making your function _reusable_. \n\n# Functions are wrappers for code that you want to reuse\n\nFunctions are just bits of code that you want to reuse. You can even build up your own function library in a script like `myfunctions.R` which you can source with every script you write. So in this way, you can save yourself a lot of trouble by designing and maintaining a __tight__ function library. \n\nA function is very easy to define. You need a name for your function, some arguments (the input), a valid R statement (i.e., some code to run), and output to return. You then put it together in this following format:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_function_name <- function( argument )  statement\n```\n:::\n\n\n\nThe only things that are actually required are the name of your function, and the word `function` followed by parentheses. Arguments are optional (well so are the statements, but what would be the point of that?). \n\nHere is a very simple function to calculate the square of a value:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmysq <- function( x ) {   # function name is mysq\n  x*x      # the function will return the square of x\n}\n```\n:::\n\n\n\nOnce you run the function definition through the console, your function will be stored in RAM. Then you can then use your function in the normal way that you use functions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmysq(2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\n\nYou can have multiple lines of R code to run, and you can even have functions within functions.The output from the function (the return value) is the last value computed. It is often best practice to explicitly use the `return` function as in the code below. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmysq <- function( x ) {\n  plot( x, x*x, ylab=\"Square of x\")   # plot x and x*x on the y axis\n  return (x*x)    # return the square of x\n  }\n  \nmysq(1:10)  \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]   1   4   9  16  25  36  49  64  81 100\n```\n\n\n:::\n:::\n\n\n\n# Arguments\n\nGenerally speaking, arguments are included in functions because you might want to change them. Things that stay the same are usually hard-coded into the function. But what if you want to change it sometimes but not others?In our little example, what if you wanted to be able to change the label on the y-axis sometimes, but most of the time  you wanted it to just say \"Square of x\"? \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmysq <- function( x, yylab=\"Square of x\" ) {   # default argument for the y-label\n\n  plot( x, x*x, ylab=yylab) \n  return (x*x)    \n\n  }\n  \nmysq(1:10, yylab=\"X times X\") \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]   1   4   9  16  25  36  49  64  81 100\n```\n\n\n:::\n:::\n\n\n\nWhat happens if you just run the following: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmysq(1:10)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]   1   4   9  16  25  36  49  64  81 100\n```\n\n\n:::\n:::\n\n\n\nThese arguments with default values are therefore _optional_. Because they will run just fine even if you don't put anything for them. Whenever I write functions, I try to make as many default arguments as I can so that I can run them with minimal brain power. When you look at it 6 months later, you don't want to have to reconstruct _why you wrote it in the first place just to make it go_. \n\nAnother cute trick is that if you don't want to have anything as your default value, but you still want to have the option to change it, set the default to `NULL`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmysq <- function( x, yylab=NULL) {   # default arg is no value for the y-label, \n\n  plot( x, x*x, ylab=yylab) # but you can specify it if you want to.\n  return (x*x)    \n\n  }\n  \nmysq(1:10, yylab=\"X times X\") \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]   1   4   9  16  25  36  49  64  81 100\n```\n\n\n:::\n:::\n\n\n\n# Order of arguments  \n\nYou may have noticed that you can run a function with or without naming the arguments. For example (here I have supressed printing the figure in quarto):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmysq(2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n\n```{.r .cell-code}\nmysq(x=2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\nwork just the same. \n\nThe reason is that R will assume that if you don't name the arguments, they are _in the same order_ as in the function definition. Therefore, \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmysq( c(1, 3, 5, 7), \"Squares of prime numbers\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  1  9 25 49\n```\n\n\n:::\n\n```{.r .cell-code}\nmysq( yylab = \"Squares of prime numbers\", x=c(1, 3, 5, 7))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  1  9 25 49\n```\n\n\n:::\n:::\n\n\nAre the same. Another way to put this, if you don't want to worry about the order that the arguments are defined in, _always use_ the `names=`.\n\n\n# Arbitrary numbers of arguments  \n\nR is very flexible with its arguments. You can also have an arbitrary number of arguments by adding `...` This is often used to pass additional arguments to `plot()`, such as below: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmyfun <- function(x, y,  ...) {\n  plot(x, y, ...)\n  }\n\n# optional args color and line plot are passed to plot()\nmyfun( 1:10, sqrt(1:10), col=\"red\", type=\"l\")   \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\nNote: We did not create arguments for color or type in `myfun`, but these are arguments for `plot`, so the `...` in the function definition is like the expandable suitcase that allows us to pass anything through.  This is for the `plot()` function, which has many optional arguments, but it can be used for anything.  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmyfun( 1:10, sqrt(1:10), cex=3)   # optional arg for point size passed to plot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\nAnother common place where variable numbers of arguments comes up is in database queries, where you may want to run a search on a number of terms. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nquery <- function( ... ) {\n  paste( ... )\n  }\n\nquery( \"cat\", \"dog\", \"rabbit\")  \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"cat dog rabbit\"\n```\n\n\n:::\n:::\n\n\n\nOr any situation where you are just not sure how many inputs you will have. For example, you could have a list builder (this is a real function! no joke):\n\n\n::: {.cell}\n\n```{.r .cell-code}\naddlist <- function( ... ) {\n  list( ... )\n  }\n\nmetadat <- addlist ( dataset = \"myeco\", date=\"Jan 20, 2023\")\nmetadat\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$dataset\n[1] \"myeco\"\n\n$date\n[1] \"Jan 20, 2023\"\n```\n\n\n:::\n\n```{.r .cell-code}\ndat <- addlist (ind=1:10, names=letters[1:10], eco=rnorm(10) )  \ndat\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$ind\n [1]  1  2  3  4  5  6  7  8  9 10\n\n$names\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"\n\n$eco\n [1] -0.63304339  1.88019912  0.69247124  0.17351381 -0.06021262 -1.99583818\n [7] -0.47746174  1.64469713 -0.24609117  0.12392035\n```\n\n\n:::\n:::\n\n\n\nThis may seem like a silly example (and it is), but it is kept simple so you can see what's going on. These default arguments are very useful for making your functions __flexible__ so that they can be more _generic_ and _reusable_ for many purposes. \n\n# Return value  \n\nAs you have seen in the examples, R will return the last value computed (by default) or whatever you specify in the `return()` function. One thing that is a little peculiar to R is that you can only return __one__ and __only one__ object. So what do you do if you have several pieces of information you want returned? Use a list:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmysq <- function( x, yylab=\"Square of x\" ) {   # default argument for the y-label\n\n  plot( x, x*x, ylab=yylab)\n  output <- list( input=x, output=x*x )   \n  return (output)     \n\n  }\n```\n:::\n\n\n\nThis is in fact what many model-fitting packages do. They return a list with the inputs, any fitted parameters, and model fit statistics, as well as characteristics of the objects such as names and factor levels, etc. \n\n# Looking inside R: functions that are inside packages  \n\nIf you want to look at how any particular function in R is written -- you can! R is open-source. You just type the name of the function with no parentheses:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nfunction (object, ...) \nUseMethod(\"summary\")\n<bytecode: 0x1469684b0>\n<environment: namespace:base>\n```\n\n\n:::\n:::\n\n\n\nYou can see that it is a generic function, and that it uses different `methods` depending on the `class` of the object. \n\nHere are all the methods that are defined for `summary`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmethods('summary')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] summary.aov                         summary.aovlist*                   \n [3] summary.aspell*                     summary.check_packages_in_dir*     \n [5] summary.connection                  summary.data.frame                 \n [7] summary.Date                        summary.default                    \n [9] summary.ecdf*                       summary.factor                     \n[11] summary.glm                         summary.infl*                      \n[13] summary.lm                          summary.loess*                     \n[15] summary.manova                      summary.matrix                     \n[17] summary.mlm*                        summary.nls*                       \n[19] summary.packageStatus*              summary.POSIXct                    \n[21] summary.POSIXlt                     summary.ppr*                       \n[23] summary.prcomp*                     summary.princomp*                  \n[25] summary.proc_time                   summary.rlang_error*               \n[27] summary.rlang_message*              summary.rlang_trace*               \n[29] summary.rlang_warning*              summary.rlang:::list_of_conditions*\n[31] summary.srcfile                     summary.srcref                     \n[33] summary.stepfun                     summary.stl*                       \n[35] summary.table                       summary.tukeysmooth*               \n[37] summary.warnings                   \nsee '?methods' for accessing help and source code\n```\n\n\n:::\n:::\n\n\n\nHere's how we find out what's inside `summary.factor` for example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary.factor\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nfunction (object, maxsum = 100L, ...) \n{\n    nas <- is.na(object)\n    ll <- levels(object)\n    if (ana <- any(nas)) \n        maxsum <- maxsum - 1L\n    tbl <- table(object)\n    tt <- c(tbl)\n    names(tt) <- dimnames(tbl)[[1L]]\n    if (length(ll) > maxsum) {\n        drop <- maxsum:length(ll)\n        o <- sort.list(tt, decreasing = TRUE)\n        tt <- c(tt[o[-drop]], `(Other)` = sum(tt[o[drop]]))\n    }\n    if (ana) \n        c(tt, `NA's` = sum(nas))\n    else tt\n}\n<bytecode: 0x146c44be0>\n<environment: namespace:base>\n```\n\n\n:::\n:::\n\n\n\nNote: __Internal__ functions are _hidden_ inside the namespace of a package -- the programmer has chosen to not make it available to the global environment. To find these, use `getAnywhere('functionname')`  ha!\n\n\n# Scope  \n\nIt is important to know that when you write a function, everything that happens inside the function is local in scope. It's like a big family secret -- \n\n> everything that is said in the family stays in the family. \n\nIf you try to go talking about it to the outside world, no one will know what you are talking about. For example, suppose you wrote a function with some internal variables like this:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmyfunc <- function( fattony, littlejimmy) {\n\n  canolis <- fattony*2 + littlejimmy\n  return(canolis)\n}\n\nmyfunc( 5, 4 )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 14\n```\n\n\n:::\n:::\n\n\nIf we try type the following on the command line, we will get an error `... object 'canolis' not found`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncanolis\n```\n:::\n\n\n\nEven though you ran the function, you can't _ask R how many canolis you need_ because _what's created in the function stays in the function_. When the function is over, poof! It's gone. That's because the objects used within the function are _local in scope_ and not available to the global environment. \n\nOf course, global variables are available to use inside of functions, just as family members are aware of what's going on in the outside world. So for example, it is perfectly valid to use `pi` or anything you've defined previously in the global environment inside a function:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmyfunc <- function( fattony, littlejimmy) {\n\n  canolis <- fattony*pi + littlejimmy+littlebit\n  return( round(canolis) )\n}\n\nlittlebit <- 1\nmyfunc( 5, 4 )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 21\n```\n\n\n:::\n:::\n\n\n\nThe code above worked because `littlebit` was defined prior to running our function. But you can see that it's often a good idea to actually pass into a function anything that is needed to make it go. \n\nSo you may be wondering why it works this way? Well in general, in most advanced programming languages, \n\n> the objects within functions are local in scope. This is to make it easier to program.  \n\nIf there is a clean separation between what goes on inside a function and what is outside of it, then you can write functions without worrying about every possibility regarding what could happen. You only have to worry about what is happening inside your little function. That's what helps to make it modular and extensible -- so your functions can play nice with other codes. \n\n# Search Paths and Environment\n\nRemember what we were saying about functions in R are objects? So if we look at our workspace, our functions should be there:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nls()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"addlist\"   \"dat\"       \"littlebit\" \"metadat\"   \"myfun\"     \"myfunc\"   \n[7] \"mysq\"      \"query\"    \n```\n\n\n:::\n:::\n\n\nAnd sure enough they are! As well as all of our data frames, lists, and other objects that we created.  Now I should note that it is possible to write a function in R __with the same name__ as a built-in function in R. For example, if for some crazy reason, we wanted to redefine the `mean` function, we can!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean <- function(...) {\n  return (\"dirty harry\")\n  }\n  \nmean( 1:10 )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"dirty harry\"\n```\n\n\n:::\n:::\n\n\n\nWhat happened? Well we wrote our own function for `mean`. Why is R only returning our new function, an not the built-in one? \n\n> Well, any object that we create (including our own functions) are in the __Global Environment__. \n\nWhereas functions in packages are in their further down the search path. R knows where things are by the order that they are attached. The global environment is first (containing any user-created objects), followed by attached packages:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsearch()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \".GlobalEnv\"        \"package:stats\"     \"package:graphics\" \n[4] \"package:grDevices\" \"package:utils\"     \"package:datasets\" \n[7] \"package:methods\"   \"Autoloads\"         \"package:base\"     \n```\n\n\n:::\n:::\n\n\n\nThe function `mean()` is in the `base` package, which is all the way at the end.  So when we type `mean()` R will first look to see if there is any function by that name in our global environment, then in any of the other attached packages before finally finding it in `base`. Needless to say, it's very confusing (and potentially dangerous!) to name objects by the same name as R key words or built-in functions. Don't do it!\n\nIf you need to get rid of the custom build mean function, just type `rm(mean)` at the console. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(mean)\nmean(1:10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5.5\n```\n\n\n:::\n:::\n\n\n\nWhew! Or just shut down and restart R. It's a clean slate after that! (Don't worry, you can't break R ;). \n\n# Exercises \n\n1.  Write your own function for calculating a mean of a vector, using only the `sum()` and the `length()` functions. The input should be a vector, and the output is the mean. \n2.  Write your own function for calculating the standard error. You can use the `sd()`, `sqrt()`, and the `length()` functions. The input should be a vector of values. \n3.  Go back to some of the class data Iʻve given you. Write a function that will read in the irradiance data, trim it to wavelengths between 300 and 750 nm, and plot the data. Then use that function to read in files for the different directions:  `up`,  `for` (forward),  `left`, and  `right`:    `20070725\\_01upirr.txt`, `20070725\\_01forirr.txt`, `20070725\\_01leftirr.txt`, `20070725\\_01rightirr.txt`.  Your function should take as input just the file name. Write a script that defines the function and then calls the function four times, once for each file. \n4. Now take the function you just made, and add optional arguments for the cut off values 300 and 750. You may want to trim the data to different values.  Try trimming it to different values and see what happens using your new function.\n\n## Longer exercise: Find All Open Reading Frames. \n\nWe want to write a script that will find potential coding regions in a given DNA sequence. To make sure it will work on any sequence, we will simulate random DNA.\n\nCoding regions begin with a start codon and end with a stop codon. Furthermore, since DNA is read in __triplets__, in order to define a coding region the __start codon__ and the __stop codon__ must be in the _same frame_ to be an __open reading frame__. For example, there are three related sequences below that are written by triplets in frame 1, frame 2, and frame 3.  All of the sequences contain a start codon `ATG` in frame 1, and stop codons `TAA` in frames 1, 2, and 3, respectively. You can see that when the DNA is read in triplets, only the first has an open reading frame because start and stop are in the same frame:\n\n\n1. Frame 1: `...A ATG TCT AAA ATG GGT TAA GCC...`\n2. Frame 2: `...AA TGT CTA AAA TGG GTT TAA CC...`\n3. Frame 3: `...AAT GTC TAA AAT GGG TTA TAA C...`\n\nIn order to find a potential gene, we want to find the longest open reading frame. To do this, we need to find all open reading frames in the six frames (3 forward and 3 reverse). \n\n### The data\n\nMake up random DNA sequence data. Make a vector of 500  base pairs sampled at random. In this _DNA data_ we want to find all possible coding regions. We are going to assume that there are no introns. \n\n### The problem \n\nYou recall from Molecular Biology class that coding regions are marked with a start codon `ATG` and one of three stop codons: _amber_ `TAG`, _ochre_ `TAA`, and _opal_ or _umber_ `TGA`. \n\nA script template is provided for you in the [`rclassdata` repo](https://github.com/mbutler808/rclassdata) called `Find_gene/find_gene_starter.R`.\n\nComplete the script to accomplish the following: \n1. Make up a random DNA sequence using lower case letters for the base pairs.\n2. Save your random sequence in file called `yourname_dna.csv`\n3. How to you find the start codon? Brainstorm. After figuring out the coding mechanics, turn this into a function.\n4. How do you find the stop codons? Brainstorm.\n5. Start and stop codons must be in the same frame. Write a function that tells us which frame each codon is in. Find all start and stop codons -- manually check that they are actually correct.\n6. Of the start and stop codons, which ones are in frames 1, 2, and 3? (because start and stop codons must be in the same frame to define an open reading frame). How can we do this? Brainstorm.\n7. Find all start and stop codons in the reverse direction. Think about an easy way to do this with the machinery you already have. First make the reverse complement of your DNA.\n8. For each of the six frames (3 forward and 3 reverse), find all of the possible open reading frames (from start to first stop codon, subsequent ones can be ignored). \n9. Which one is the longest ORF? Print this result to the screen. Tell us which frame it's in, and the start position, stop position, and it's sequence.\n10. Write output to a text file `yourname_orf.txt` using the `cat()` function which prints the following information for each open reading frame on separate lines: orf number, start position, stop position, and the sequence (\n`orf1 start:xx stop:xx sequence:atgaggtc.....taa`).  _Make sure you include the complete stop codon (all 3 base pairs) in the output_ so you can check that it worked.\n11. Save your script as `yourname_find_gene.R`. Make sure you clear your workspace, test it the code, clean it up and comment it before turning it in. Also save your data `yourname_dna.csv`, and output `yourname_orf.txt`.\n\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}