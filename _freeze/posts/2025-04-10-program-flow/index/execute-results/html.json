{
  "hash": "5704729e8366278e4d5a6c3111ee1417",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Program Flow\"\nauthor:\n  - name: Marguerite Butler\n    url: https://butlerlab.org\n    affiliation: School of Life Sciences, University of Hawaii\n    affiliation_url: https://manoa.hawaii.edu/lifesciences/\ndescription: \"Control the flow of your program using programming control statements\"\ndate: 2025-04-10\ncategories: [module 5, week 11, control structures, if else, (do) while, programming]\n---\n\n\n\n### Acknowledgements\n\nMaterial for this lecture was borrowed and adopted from\n\n-   <https://www.stephaniehicks.com/jhustatcomputing2022/posts/2022-09-22-control-structures>\n\n\n# Learning objectives\n\n::: callout-note\n# Learning objectives\n\n**At the end of this lesson you will:**\n\n-   Be able to use commonly used control structures including `if`, `while`, `repeat`, and `for`\n-   Be able to skip an iteration of a loop using `next`\n-   Be able to exit a loop immediately using `break`\n:::\n\n# Overview\n\n**R** is not only a collection of functions for data analysis and matrix math, but also a fully-featured programming language with all of the usual __conditional statements__. \n\nThere are times when we want to go beyond simply a linear step through the code, but to make execution conditional, in order to __control the flow of execution of the code__. \n\nA basic conditional statement:\n\n![](../../images/ProgramFlow_decision_point.png)\n\n# When conditional statements are needed:\n\nAnytime in the code where decisions need to be made:\n\n-  **Optimzation**: A common task is to decide when to exit out of a loop. For example when we are approximatig a solution and we donÊ»t know how many iterations it will take to get \"close enough\" to the true solution. In this case, we would want to repeat until we reach the condition then stop and return the answer. \n\n-  **Flexibility**: Depending on a value, you may want to execute different code. For example, if we are writing a function with multiple options. The function will do the same general computation but we may want to provide different options depending on the users needs. We can add optional arguments. If the user changes them, the function will execude the extra option. \n\n# Program Flow\n\nThe flow of execution can be diagrammed in a flowchart, and is really helpful for seeing the logical structure of the project. It also encourages __modularity__ and __reusablility__ of your code. \n\n_A flowchart can be really helpful for visualizing your computations_, and in particular where a function or loop would be helpful, or where variables need to be updated or sent to output. For example for computing the sum using a loop: \n\n![](../../images/ProgramFlow_flowchart.png)\n\nThe different types of actions are represented by shapes, with the direction of flow indicated by arrows connecting the shapes:\n\n-  __Executable statement__: rectangle  \n-  __Input/ Output__: usually a trapezoid (or a torn page, old-timey)\n-  __Conditional statement__ - a decision point: diamond\n-  __Start/End/connection to another subroutine__: circle\n\nImagine if you were to flowchart this code below. Anytime you find yourself cutting and pasting code, it is a clue that you should consider a loop or a function. \n\n![](../../images/ProgramFlowForLoops_repeated1.png)\n\n>\n> _You_ should __code it only once__, make the _computer_ repeat!\n>\n\n![](../../images/ProgramFlowForLoops_repeated2.png)\n\n\n\n# Conditional statements include: \n\n-   `if` and `else`: testing a condition and acting on it\n\n-   `ifelse`: a variant of `if` and `else` in one line\n\n-   `switch`: a convenience conditional for multiple executable options\n\n-   `for`: execute a loop a fixed number of times\n\n-   `while`: repeat a loop *while* a condition is true\n\n-   `repeat`: execute an infinite loop (must `break` out of it to stop)\n\n-   `break`: break the execution of a loop\n\n-   `next`: skip an interation of a loop\n\n\n## `if`-`else`\n\n`if`-`else` is the most commonly used conditional statement in programming. If a condition is true, a statement is executed:\n\n![](../../images/ProgramFlow_ifelse.png)\n\n`if`-`else` comes in many flavors: \n\n### Just `if`\n\nIf the condition is `TRUE`, execution happens. If `FALSE`, nothing happens:\n\n``` r\nif(<condition>) {\n        ## do something\n} \n## Continue with rest of code\n```\n\n### `if`-`else`\n\nIf-else allows for a different action when the condition is false:\n\n``` r\nif(<condition>) {\n        ## do something\n} \nelse {\n        ## do something else\n}\n```\n\n`if` and `else` can be daisy-chained:  \n\n### `if`-`else` `if`-`else` `if`-`else` etc.\n\nYou can have a series of tests, which will stop and execute the statement at the condition that is `TRUE`. (Everything following will be ignored):\n\n``` r\nif(<condition1>) {\n        ## do something\n} else if(<condition2>)  { \n        ## do something different\n} else if(<condition2>) {\n        ## do something different\n} else { \n        ## do this if none of the above is true\n}        \n```\n\n#### __Example__:  Draw a random value between zero and 10, then test for values greater than 3. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- runif(n=1, min=0, max=10)  \nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6.74453\n```\n\n\n:::\n\n```{.r .cell-code}\nif(x > 6) {\n    y <- 10\n  } else if (x > 3){\n    y <- 5\n  } else { y <- 0 }\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6.74453\n```\n\n\n:::\n\n```{.r .cell-code}\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n:::\n\n\n\nWith the if-else structure we can test multiple conditions on the same variable. Here, three ranges of values for x. \nOf course, the `else` conditional is not necessary. You could just have a string of ifs:\n\n``` r\nif(<condition1>) {\n\n}\n\nif(<condition2>) {\n\n}\n```\n\nAs long as your logic is sound (and you have them in the right order), you could be OK.  \n\n::: callout-tip\n### Note-TESTING\n\nNOTE it is always important to ___TEST your code against several datasets for which you can verify the answers___. Be sure to try cases where your code might get tripped up. Anticipating the errors will have you a lot of headache. \n:::\n\n\n## `while` Loops\n\n**`while` loops** begin by **testing a condition**.\n\n-  If it is `TRUE`, then they execute the code contained within the loop.  \n-  If `FALSE` the loop is exited (no execution).\n\n\n![](../../images/ProgramFlow_while.png)\n\n\n### Example: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncount <- 0\nwhile(count < 10) {\n        print(count)\n        count <- count + 1\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n[1] 6\n[1] 7\n[1] 8\n[1] 9\n```\n\n\n:::\n:::\n\n\n\n`while` loops can potentially result in infinite loops if not written properly. **Use with care!**\n\nSometimes there will be more than one condition in the test.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nz <- 5\nset.seed(1)\n\nwhile(z >= 3 && z <= 10) {\n        coin <- rbinom(1, 1, 0.5)\n        \n        if(coin == 1) {  ## random walk\n                z <- z + 1\n        } else {\n                z <- z - 1\n        } \n}\nprint(z)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n\n::: callout-tip\n### Pro-tip\n\n`&` is the logical __and__ - both conditions must be true in order to return `TRUE`\n\n`|` is the logical __or__ - only one condition must be true in order to return `TRUE`\n\nWhat's the difference between using one `&` or two `&&` (or one `|` vs. `||`)?\n\nIf you use only one `&`, these are __vectorized__ operations, meaning they will evaluate the _logical conditional on the vector_, and can **return a vector**, like this:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n-2:2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -2 -1  0  1  2\n```\n\n\n:::\n\n```{.r .cell-code}\n((-2:2) >= 0) & ((-2:2) <= 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE FALSE  TRUE FALSE FALSE\n```\n\n\n:::\n:::\n\n\n\nIf you use two `&&`, then these are operations on single values.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2 >= 0\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n(2 >= 0) && (-2 <= 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n(-2 >= 0) && (-2 <= 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n:::\n\n## `repeat` Loops\n\n**`repeat` initiates an infinite loop** right from the start. These are **not commonly used** in statistical or data analysis applications, but they do have their uses.\n\n::: callout-tip\n### IMPORTANT (READ THIS AND DON'T FORGET... I'M SERIOUS... YOU WANT TO REMEMBER THIS.. FOR REALZ PLZ REMEMBER THIS)\n\nThe only way to exit a `repeat` loop is to call `break`.\n:::\n\nOne possible paradigm might be in an iterative algorithm where you may be searching for a solution and you do not want to stop until you are close enough to the solution.\n\nIn this kind of situation, you often don't know in advance how many iterations it's going to take to get \"close enough\" to the solution.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx0 <- 1\ntol <- 1e-8\n\nrepeat {\n        x1 <- computeEstimate()\n        \n        if(abs(x1 - x0) < tol) {  ## Close enough?\n                break\n        } else {\n                x0 <- x1\n        } \n}\n```\n:::\n\n\n\n::: callout-tip\n### Note\n\nThe above code will not run if the `computeEstimate()` function is not defined (I just made it up for the purposes of this demonstration).\n:::\n\n::: callout-tip\n### Pro-tip\n\nThe loop above is a bit **dangerous** because there is no guarantee it will stop.\n\nYou could get in a situation where the values of `x0` and `x1` oscillate back and forth and never converge.\n\nBetter to set a hard limit on the number of iterations by using a `for` loop and then report whether convergence was achieved or not.\n:::\n\n## `next`, `break`\n\n`next` is used to skip an iteration of a loop.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor(i in 1:100) {\n        if(i <= 20) {\n                ## Skip the first 20 iterations\n                next                 \n        }\n        ## Do something here\n}\n```\n:::\n\n\n\n`break` is used to exit a loop immediately, regardless of what iteration the loop may be on.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor(i in 1:100) {\n      print(i)\n\n      if(i > 20) {\n              ## Stop loop after 20 iterations\n              break  \n      }   \n}\n```\n:::\n\n\n\n### Another example\n\nBoth flowcharts and pseudocode can help to diagram the logic and modularity of the code:\n\n![](../../images/ProgramFlow_flowchart_pseudocode.png)\n\n\n# Summary\n\n-   Control structures like `if`, `while`, and `for` allow you to control the flow of an R program\n-   Infinite loops should generally be avoided, even if (you believe) they are theoretically correct.\n-   Control structures mentioned here are primarily useful for writing programs; for command-line interactive work, the \"apply\" functions are more useful.\n-    Flow charts and pseudocode can help you diagram the logic of your program. \n\n\n# Exercise\n\nLetÊ»s write a program to calculate the square root of a number, following the Fortran Coloring Book:\n\n![](../../images/sqrtN_flowchart.png)\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}