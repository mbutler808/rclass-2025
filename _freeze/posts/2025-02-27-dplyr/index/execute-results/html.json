{
  "hash": "97200d964fde120f4370f41db606e105",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Getting data in shape with dplyr\"\nauthor:\n  - name: Marguerite Butler\n    url: https://butlerlab.org\n    affiliation: School of Life Sciences, University of Hawaii\n    affiliation_url: https://manoa.hawaii.edu/lifesciences/\ndescription: \"Add\"\ndate: 2025-02-27\ncategories: [module 3, week 7, tidyr, tidyverse, dplyr, tibble, pipe]\n---\n\n\n\n<!-- Add interesting quote -->\n\n# Pre-lecture materials\n\n<!-- R emoji aliases:  https://gist.github.com/rxaviers/7360908 -->\nüå¥\n\n### Read ahead\n\n::: callout-note\n## Read ahead\n\n**Before class, you can prepare by reading the following materials:**\n\n1.  <https://r4ds.had.co.nz/tibbles>\n2.  <https://jhudatascience.org/tidyversecourse/wrangle-data.html#data-wrangling>\n3.  [dplyr cheat sheet from RStudio](http://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf)\n:::\n\n\n### Acknowledgements\n\nMaterial for this lecture was borrowed and adopted from\n\n-   <https://www.stephaniehicks.com/jhustatcomputing2022/posts/2022-09-06-managing-data-frames-with-tidyverse/>\n-   <https://rdpeng.github.io/Biostat776/lecture-managing-data-frames-with-the-tidyverse>\n-   <https://jhudatascience.org/tidyversecourse/get-data.html#tibbles>\n\n\n# Learning objectives\n\n::: callout-note\n# Learning objectives\n\n**At the end of this lesson you will:**\n\n-   Understand the tools available to get data into the proper structure and shape for downstream analyses\n-   Learn about the dplyr R package to manage data frames\n-   Recognize the key verbs (functions) to manage data frames in dplyr\n-   Use the \"pipe\" operator to combine verbs together\n:::\n\n# Overview\n\nIt is still important to understand base R manipulations, particularly for things such as cleaning raw data, troubleshooting, and writing custom functions. But the tidyverse provides many useful tools for data manipuation and analysis of cleaned data. In this session we will learn about __dplyr__ and friends.  \n\n\n# Tidy data\n\nThe tidyverse has many slogans. A particularly good one for all data analysis is the notion of **tidy data**.\n\nAs defined by Hadley Wickham in his 2014 paper published in the *Journal of Statistical Software*, a [tidy dataset](https://www.jstatsoft.org/article/view/v059i10) has the following properties:\n\n1.  Each variable forms a column.\n\n2.  Each observation forms a row.\n\n3.  Each type of observational unit forms a table.\n\n![Artwork by Allison Horst on tidy data](https://github.com/allisonhorst/stats-illustrations/raw/main/rstats-artwork/tidydata_1.jpg){width=\"80%\"}\n\n\\[**Source**: [Artwork by Allison Horst](https://github.com/allisonhorst/stats-illustrations)\\]\n\n\n# What shapes does the data need to be in?\n\nBeyond the data being tidy, however, we also need to think about what shape it needs to be in. We ªll review concepts and tools in the next two lessons. \n\nNow that we have had some experience plotting our data, we can see the value of having rectangular dataframes.  We can also see that for particular graphics and analyses, we need to have the data arranged in particular ways. \n\nFor example, take a look at this elegant graphic below.  This single graphic is packed with information on fat, BMR, TEE, and activity levels, all for mulitple species. Is it more effective that individual bar plots?  This arrangement is so helpful because you can imagine questions that can be answered with it by comparing the different aspects of the data. \n\n:::{.callout-note}\n# A very informative figure! \n![Human total energy expenditure compared with other primates.](../../images/humanTEE.png)\n[Source: Gibbons, 2022 based on data of H. Ponzer et al., NATURE, 533:90, 2016](https://www.science.org/content/article/scientist-busts-myths-about-how-humans-burn-calories-and-why?fbclid=IwAR3fzOwd09LBUOR9ely2t4om0-CtYcuT8ux_f46OopQnpiAVENgX_24bWpY)\n\n:::\n\n:::{.callout-note}\n# Can you imagine what this dataset looks like in terms of organization? \n1. First imagine what it would look like variable by variable. \n2. How might you intially plot the data?\n3. What organization would you need to make a single figure such as this? \n:::\n\nWe often do not know exactly what we need at the start of a data analysis. We have to play around with different data structures, rearrange the data, look for interesting plots to try, rerrange to fit the input requirements of new functions we ªve discovered, and so on. \n\n\n\n# Tibbles\n\nThe __tidyverse__ uses as its central data structure, the __tibble__ or __tbl_df__.  Tibbles are a variation on data frames, claimed to be *lazy* and *surly*:\n\n- They don‚Äôt change variable names or types when you construct the tibble.\n- Don‚Äôt convert strings to factors (the default behavior in `data.frame()`).\n- Complain more when a variable doesn ªt exist.\n- No `row.names()` in a tibble. Instead, you must create a new variable. \n- Display a different summary style for its `print()` method.\n- Allows non-standard R names for variables\n- Allows columns to be lists. \n\nHowever, most tidyverse functions also work on data frames. It ªs up to you. \n\n### `tibble()` constructor\n\nJust as with data frames, there is a `tibble()` constructor function, which functions in many ways with similar syntax as the `data.frame()` constructor. \n\n\nIf you haven ªt already done so, install the tidyverse: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"tidyverse\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrequire(tibble)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: tibble\n```\n\n\n:::\n\n```{.r .cell-code}\ntibble( iris[1:4,] )  # the first few rows of iris\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 √ó 5\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n         <dbl>       <dbl>        <dbl>       <dbl> <fct>  \n1          5.1         3.5          1.4         0.2 setosa \n2          4.9         3            1.4         0.2 setosa \n3          4.7         3.2          1.3         0.2 setosa \n4          4.6         3.1          1.5         0.2 setosa \n```\n\n\n:::\n\n```{.r .cell-code}\nx <- 1:3\ntibble( x, x * 2 )  # name assigned at construction\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 √ó 2\n      x `x * 2`\n  <int>   <dbl>\n1     1       2\n2     2       4\n3     3       6\n```\n\n\n:::\n\n```{.r .cell-code}\nsilly <- tibble(      # an example of a non-standard names\n  `one - 3` = 1:3,  # name = value syntax\n  `12` = \"numeric\",\n  `:)` = \"smile\",\n)\nsilly\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 √ó 3\n  `one - 3` `12`    `:)` \n      <int> <chr>   <chr>\n1         1 numeric smile\n2         2 numeric smile\n3         3 numeric smile\n```\n\n\n:::\n:::\n\n\n\n### `as_tibble()` coersion\n\n`as_tibble()` converts an existing object, such as a data frame or matrix, into a tibble.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas_tibble( iris[1:4,] )  # coercing a dataframe to tibble\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 √ó 5\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n         <dbl>       <dbl>        <dbl>       <dbl> <fct>  \n1          5.1         3.5          1.4         0.2 setosa \n2          4.9         3            1.4         0.2 setosa \n3          4.7         3.2          1.3         0.2 setosa \n4          4.6         3.1          1.5         0.2 setosa \n```\n\n\n:::\n:::\n\n\n\n### As output\n\nMost often we will get tibbles returned from tidyverse functions such as `read_csv()` from the `readr` package.\n\n\n# The __dplyr__ package\n\nThe __dplyr__ package, which is part of the __tidyverse__ was written to supply a *grammar for data manipulation*, with verbs for the most common data manipulation tasks. \n\n![Artwork by Allison Horst on the dplyr package](https://github.com/allisonhorst/stats-illustrations/raw/main/rstats-artwork/dplyr_wrangling.png){width=\"80%\"}\n\n\\[**Source**: [Artwork by Allison Horst](https://github.com/allisonhorst/stats-illustrations)\\]\n\n\n### `dplyr` functions\n\n-   `select()`: return a subset of the data frame, using a flexible notation\n\n-   `filter()`: extract a subset of rows from a data frame using logical conditions\n\n-   `arrange()`: reorder rows of a data frame\n\n-   `relocate()`: rearrange the columns of a data frame \n\n-   `rename()`: rename columns in a data frame\n\n-   `mutate()`: add new columns or transform existing variables\n\n-   `summarize()`: generate summary statistics of the variables in the data frame, by strata if data are hierarchical\n\n-   `%>%`: the \"pipe\" operator (from __magrittr__) connects multiple verbs together into a data wrangling pipeline (kind of like making a compound sentence)\n\n\nNote: Everything `dplyr` does could already be done with base R. What is different is a new syntax, which allows for more clarity of the data manipulations and the order, and perhaps makes the code more readable. \n\nInstead of the nested syntax, or typing the dataframe name over and over, we can pipe one operation into the next. \n\nAnother useful contribution is that `dplyr` functions are **very** fast, as many key operations are coded in C++.  This will be important for very large datasets or repeated manipulations (say in a simulation study). \n\n### `starwars` dataset\n\nWe will use the `starwars` dataset included with `dplyr`.  You should check out the help page for this dataset `?starwars`.\n\nLet ªs start by using the `skim()` function to check out the dataset:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrequire(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: dplyr\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'dplyr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(starwars)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n\n\n:::\n\n```{.r .cell-code}\nskimr::skim(starwars)\n```\n\n::: {.cell-output-display}\n\nTable: Data summary\n\n|                         |         |\n|:------------------------|:--------|\n|Name                     |starwars |\n|Number of rows           |87       |\n|Number of columns        |14       |\n|_______________________  |         |\n|Column type frequency:   |         |\n|character                |8        |\n|list                     |3        |\n|numeric                  |3        |\n|________________________ |         |\n|Group variables          |None     |\n\n\n**Variable type: character**\n\n|skim_variable | n_missing| complete_rate| min| max| empty| n_unique| whitespace|\n|:-------------|---------:|-------------:|---:|---:|-----:|--------:|----------:|\n|name          |         0|          1.00|   3|  21|     0|       87|          0|\n|hair_color    |         5|          0.94|   4|  13|     0|       11|          0|\n|skin_color    |         0|          1.00|   3|  19|     0|       31|          0|\n|eye_color     |         0|          1.00|   3|  13|     0|       15|          0|\n|sex           |         4|          0.95|   4|  14|     0|        4|          0|\n|gender        |         4|          0.95|   8|   9|     0|        2|          0|\n|homeworld     |        10|          0.89|   4|  14|     0|       48|          0|\n|species       |         4|          0.95|   3|  14|     0|       37|          0|\n\n\n**Variable type: list**\n\n|skim_variable | n_missing| complete_rate| n_unique| min_length| max_length|\n|:-------------|---------:|-------------:|--------:|----------:|----------:|\n|films         |         0|             1|       24|          1|          7|\n|vehicles      |         0|             1|       11|          0|          2|\n|starships     |         0|             1|       16|          0|          5|\n\n\n**Variable type: numeric**\n\n|skim_variable | n_missing| complete_rate|   mean|     sd| p0|   p25| p50|   p75| p100|hist  |\n|:-------------|---------:|-------------:|------:|------:|--:|-----:|---:|-----:|----:|:-----|\n|height        |         6|          0.93| 174.60|  34.77| 66| 167.0| 180| 191.0|  264|‚ñÇ‚ñÅ‚ñá‚ñÖ‚ñÅ |\n|mass          |        28|          0.68|  97.31| 169.46| 15|  55.6|  79|  84.5| 1358|‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |\n|birth_year    |        44|          0.49|  87.57| 154.69|  8|  35.0|  52|  72.0|  896|‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |\n\n\n:::\n:::\n\n\n\n### Selecting columns with `select()`\n\n::: callout-tip\n### Example\n\nSuppose we wanted to take the first 3 columns only. There are a few ways to do this.\n\nWe could for example use numerical indices:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(starwars)[1:3]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"name\"   \"height\" \"mass\"  \n```\n\n\n:::\n:::\n\n\n\nBut we can also use the names directly:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsubset <- select(starwars, c(name, sex:species))\nhead(subset)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 √ó 5\n  name           sex    gender    homeworld species\n  <chr>          <chr>  <chr>     <chr>     <chr>  \n1 Luke Skywalker male   masculine Tatooine  Human  \n2 C-3PO          none   masculine Tatooine  Droid  \n3 R2-D2          none   masculine Naboo     Droid  \n4 Darth Vader    male   masculine Tatooine  Human  \n5 Leia Organa    female feminine  Alderaan  Human  \n6 Owen Lars      male   masculine Tatooine  Human  \n```\n\n\n:::\n:::\n\n\n:::\n\n::: callout-tip\n### Note\n\nThe `:` normally cannot be used with names or strings, but inside the `select()` function you can use it to specify a range of variable names.\n:::\n\n\n#### By exclusion\n\nVariables can be **omited** using the negative sign withing `select()`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect( starwars, -(sex:species))\n```\n:::\n\n\n\nThe `select()` function also has several helper functions that allow matching on patterns. So, for example, if you wanted to keep every variable that ends with \"color\":\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsubset <- select(starwars, ends_with(\"color\"))\nstr(subset)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntibble [87 √ó 3] (S3: tbl_df/tbl/data.frame)\n $ hair_color: chr [1:87] \"blond\" NA NA \"none\" ...\n $ skin_color: chr [1:87] \"fair\" \"gold\" \"white, blue\" \"white\" ...\n $ eye_color : chr [1:87] \"blue\" \"yellow\" \"red\" \"yellow\" ...\n```\n\n\n:::\n:::\n\n\n\nOr all variables that start with n or m:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsubset <- select(starwars, starts_with(\"n\") | starts_with(\"m\"))\nstr(subset)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntibble [87 √ó 2] (S3: tbl_df/tbl/data.frame)\n $ name: chr [1:87] \"Luke Skywalker\" \"C-3PO\" \"R2-D2\" \"Darth Vader\" ...\n $ mass: num [1:87] 77 75 32 136 49 120 75 32 84 77 ...\n```\n\n\n:::\n:::\n\n\n\nYou can also use more general __regular expressions__. See the help page (`?select`) for more details.\n\n\n### Subsetting with `filter()`\n\nThe `filter()` function is used to **extract subsets of rows** or observations from a data frame. This function is similar to the existing `subset()` function in base R, or indexing by logical comparisons.\n\n![Artwork by Allison Horst on filter() function](https://github.com/allisonhorst/stats-illustrations/raw/main/rstats-artwork/dplyr_filter.jpg){width=\"80%\"}\n\n\\[**Source**: [Artwork by Allison Horst](https://github.com/allisonhorst/stats-illustrations)\\]\n\n::: callout-tip\n### Example\n\nSuppose we wanted to extract the rows of the `starwars` data frame where the birthyear is greater than 100:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nage100 <- filter(starwars, birth_year > 100)\nhead(age100)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 √ó 14\n  name      height  mass hair_color skin_color eye_color birth_year sex   gender\n  <chr>      <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr> \n1 C-3PO        167    75 <NA>       gold       yellow           112 none  mascu‚Ä¶\n2 Chewbacca    228   112 brown      unknown    blue             200 male  mascu‚Ä¶\n3 Jabba De‚Ä¶    175  1358 <NA>       green-tan‚Ä¶ orange           600 herm‚Ä¶ mascu‚Ä¶\n4 Yoda          66    17 white      green      brown            896 male  mascu‚Ä¶\n5 Dooku        193    80 white      fair       brown            102 male  mascu‚Ä¶\n# ‚Ñπ 5 more variables: homeworld <chr>, species <chr>, films <list>,\n#   vehicles <list>, starships <list>\n```\n\n\n:::\n:::\n\n\n:::\n\nYou can see that there are now only 5 rows in the data frame and the distribution of the `birth_year` values is.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(age100$birth_year)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    102     112     200     382     600     896 \n```\n\n\n:::\n:::\n\n\n\nWe can also filter on multiple conditions:  *and* requires both conditions to be true, whereas *or* requires only one to be true. This time let ªs choose `birth_year < 100` and `homeworld == \"Tatooine`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nage_tat <- filter(starwars, birth_year < 100 & homeworld == \"Tatooine\")\nselect(age_tat, name, height, mass, birth_year, sex)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 √ó 5\n  name               height  mass birth_year sex   \n  <chr>               <int> <dbl>      <dbl> <chr> \n1 Luke Skywalker        172    77       19   male  \n2 Darth Vader           202   136       41.9 male  \n3 Owen Lars             178   120       52   male  \n4 Beru Whitesun Lars    165    75       47   female\n5 Biggs Darklighter     183    84       24   male  \n6 Anakin Skywalker      188    84       41.9 male  \n7 Shmi Skywalker        163    NA       72   female\n8 Cliegg Lars           183    NA       82   male  \n```\n\n\n:::\n:::\n\n\n\nOther logical operators you should be aware of include:\n\n|  Operator |                  Meaning |                        Example |\n|----------:|-------------------------:|-------------------------------:|\n|      `==` |                   Equals |        `homeworld == Tatooine` |\n|      `!=` |           Does not equal |        `homeworld != Tatooine` |\n|       `>` |             Greater than |               `height > 170.0` |\n|      `>=` | Greater than or equal to |              `height >= 170.0` |\n|       `<` |                Less than |               `height < 170.0` |\n|      `<=` |    Less than or equal to |              `height <= 170.0` |\n|    `%in%` |              Included in | `homeworld %in% c(\"Tatooine\", \"Naboo\")` |\n| `is.na()` |       Is a missing value |            `is.na(mass)` |\n\n::: callout-tip\n### Note\n\nIf you are ever unsure of how to write a logical statement, but know how to write its opposite, you can use the `!` operator to negate the whole statement.\n\nA common use of this is to identify observations with non-missing data (e.g., `!(is.na(homweworld))`).\n:::\n\n\n### Sorting data with `arrange()`\n\n`arrange()` is like the sort function in a spreadsheet, or `order()` in base R. `arrange()` **reorders rows** of a data frame according to one of the columns. Think of this as sorting your rows on the value of a column. \n\nHere we can order the rows of the data frame by birth_year, so that the first row is the earliest (oldest) observation and the last row is the latest (most recent) observation.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars <- arrange(starwars, birth_year)\n```\n:::\n\n\n\nWe can now check the first few rows\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(select(starwars, name, birth_year), 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 √ó 2\n  name                  birth_year\n  <chr>                      <dbl>\n1 Wicket Systri Warrick          8\n2 IG-88                         15\n3 Luke Skywalker                19\n```\n\n\n:::\n:::\n\n\n\nand the last few rows.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntail(select(starwars, name, birth_year), 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 √ó 2\n  name           birth_year\n  <chr>               <dbl>\n1 Poe Dameron            NA\n2 BB8                    NA\n3 Captain Phasma         NA\n```\n\n\n:::\n:::\n\n\n\nColumns can be arranged in descending order using the helper function `desc()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars <- arrange(starwars, desc(birth_year))\n```\n:::\n\n\n\nLooking at the first three and last three rows shows the dates in descending order.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(select(starwars, name, birth_year), 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 √ó 2\n  name                  birth_year\n  <chr>                      <dbl>\n1 Yoda                         896\n2 Jabba Desilijic Tiure        600\n3 Chewbacca                    200\n```\n\n\n:::\n\n```{.r .cell-code}\ntail(select(starwars, name, birth_year), 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 √ó 2\n  name           birth_year\n  <chr>               <dbl>\n1 Poe Dameron            NA\n2 BB8                    NA\n3 Captain Phasma         NA\n```\n\n\n:::\n:::\n\n\n\n### Rearranging columns with `relocate()`\n\n\n**Moving a column to a new location** is done by specifying the column names, and indicating where they go with the `.before=` or `.after=` arguments specifing a location (another column).\n\n`relocate(.data, ..., .before = NULL, .after = NULL)`\n\n### Renaming columns with `rename()`\n\n**Renaming a variable** in a data frame in R is accomplished using the `names()` function. The `rename()` function is designed to make this process easier.\n\nHere you can see the names of the first six variables in the `starwars` data frame.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(starwars[, 1:6], 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 √ó 6\n  name                  height  mass hair_color skin_color       eye_color\n  <chr>                  <int> <dbl> <chr>      <chr>            <chr>    \n1 Yoda                      66    17 white      green            brown    \n2 Jabba Desilijic Tiure    175  1358 <NA>       green-tan, brown orange   \n3 Chewbacca                228   112 brown      unknown          blue     \n```\n\n\n:::\n:::\n\n\n\nSuppose we wanted to drop the `_color`. The syntax is `newname = oldname`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars <- rename(starwars, hair = hair_color, skin = skin_color, eye = eye_color)\nhead(starwars[, 1:6], 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 √ó 6\n  name                  height  mass hair  skin             eye   \n  <chr>                  <int> <dbl> <chr> <chr>            <chr> \n1 Yoda                      66    17 white green            brown \n2 Jabba Desilijic Tiure    175  1358 <NA>  green-tan, brown orange\n3 Chewbacca                228   112 brown unknown          blue  \n```\n\n\n:::\n:::\n\n\n\n::: callout-note\n### Question\n\nHow would you do the equivalent in base R without `dplyr`?\n:::\n\n### Adding columns with `mutate()`\n\nThe `mutate()` function **computes transformations of variables** in a data frame. \n\n![Artwork by Allison Horst on mutate() function](https://github.com/allisonhorst/stats-illustrations/raw/main/rstats-artwork/dplyr_mutate.png){width=\"80%\"}\n\n\\[**Source**: [Artwork by Allison Horst](https://github.com/allisonhorst/stats-illustrations)\\]\n\nFor example, we may want to adjust height for mass:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars <- mutate(starwars, heightsize = height / mass )\nhead(starwars)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 √ó 15\n  name  height  mass hair  skin  eye   birth_year sex   gender homeworld species\n  <chr>  <int> <dbl> <chr> <chr> <chr>      <dbl> <chr> <chr>  <chr>     <chr>  \n1 Yoda      66    17 white green brown        896 male  mascu‚Ä¶ <NA>      Yoda's‚Ä¶\n2 Jabb‚Ä¶    175  1358 <NA>  gree‚Ä¶ oran‚Ä¶        600 herm‚Ä¶ mascu‚Ä¶ Nal Hutta Hutt   \n3 Chew‚Ä¶    228   112 brown unkn‚Ä¶ blue         200 male  mascu‚Ä¶ Kashyyyk  Wookiee\n4 C-3PO    167    75 <NA>  gold  yell‚Ä¶        112 none  mascu‚Ä¶ Tatooine  Droid  \n5 Dooku    193    80 white fair  brown        102 male  mascu‚Ä¶ Serenno   Human  \n6 Qui-‚Ä¶    193    89 brown fair  blue          92 male  mascu‚Ä¶ <NA>      Human  \n# ‚Ñπ 4 more variables: films <list>, vehicles <list>, starships <list>,\n#   heightsize <dbl>\n```\n\n\n:::\n:::\n\n\n\nThere is also the related `transmute()` function, which `mutate()`s and *keeps only the transformed variables*.  Therefore, the result is only two columns in the transmuted data frame.\n\n\n\n### Perform functions on groups using `group_by()`\n\nThe `group_by()` function is used to **indicate groups within the data**.\n\nFor example, what is the average height by homeworld?\n\n**In conjunction** with the `group_by()` function, we often use the `summarize()` function.\n\n::: callout-tip\n### Note\n\nThe **general operation** here is a combination of\n\n1.  Splitting a data frame by group defined by a variable or group of variables (`group_by()`)\n2.  `summarize()` across those subsets\n:::\n\n::: callout-tip\n### Example\n\nWe can create a separate data frame that splits the original data frame by `homeworld`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nworlds <- group_by(starwars, homeworld)\n```\n:::\n\n\n\nCompute summary statistics by planet (just showing mean and median here, almost any summary stat is available):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummarize(worlds, height = mean(height, na.rm = TRUE), \n          maxheight = max(height, na.rm = TRUE),\n          mass = median(mass, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 49 √ó 4\n   homeworld      height maxheight  mass\n   <chr>           <dbl>     <dbl> <dbl>\n 1 Alderaan         176.      176.  64  \n 2 Aleen Minor       79        79   15  \n 3 Bespin           175       175   79  \n 4 Bestine IV       180       180  110  \n 5 Cato Neimoidia   191       191   90  \n 6 Cerea            198       198   82  \n 7 Champala         196       196   NA  \n 8 Chandrila        150       150   NA  \n 9 Concord Dawn     183       183   79  \n10 Corellia         175       175   78.5\n# ‚Ñπ 39 more rows\n```\n\n\n:::\n:::\n\n\n:::\n\n`summarize()` returns a data frame with `homeworld` as the first column, followed by the requested summary statistics.  This is similar to the base R function `aggregate()`.\n\n::: callout-tip\n### More complicated example\n\nIn a slightly more complicated example, we might want to know what are the average masses within quintiles of `height`:\n\nFirst, we can create a categorical variable of `height5` divided into quintiles\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nqq <- quantile(starwars$height, seq(0, 1, 0.2), na.rm = TRUE)\nstarwars <- mutate(starwars, height.quint = cut(height, qq))\n```\n:::\n\n\n\nNow we can group the data frame by the `height.quint` variable.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquint <- group_by(starwars, height.quint)\n```\n:::\n\n\n\nFinally, we can compute the mean of `mass` within quintiles of `height`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummarize(quint, mquint = mean(mass, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 √ó 2\n  height.quint mquint\n  <fct>         <dbl>\n1 (66,165]       44.1\n2 (165,177]     178. \n3 (177,183]      79.3\n4 (183,193]      77.2\n5 (193,264]     106. \n6 <NA>           17  \n```\n\n\n:::\n:::\n\n\n:::\n\nOddly enough there is a maximum mass in the second height quintile of Starwars characters. The biologist in me thinks maybe outliers? \n\n\n### Piping multiple functions using `%>%`\n\nThe pipe operator `%>%` is very handy for **stringing together multiple `dplyr` functions in a sequence of operations**. It comes from the **magritter** package. \n\n![](https://s3-us-west-2.amazonaws.com/collections.lacma.org-images/remote_images/ma-150089-WEB.jpg?AIhOIuuCkaqUYKpVvGmkLe995PGXVHxg)\n[Source: ](https://collections.lacma.org/node/239578)\n\n\nIn base R, there are two styles of applying multiple functions. The first is the resave the object after each operation. \n\nThe second is to nest functions, with the first at the deepest level (the heart of the onion), then working our way out:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthird(second(first(x)))\n```\n:::\n\n\n\nThe `%>%` operator allows you to string operations in a left-to-right fashion, where the output of one flows into the next, i.e.:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfirst(x) %>% second %>% third\n```\n:::\n\n\n\n::: callout-tip\n### Example\n\nTake the example that we just did in the last section.\n\nThat can be done with the following sequence:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars %>% \n  group_by(homeworld) %>% \n  summarize(height = mean(height, na.rm = TRUE), \n          maxheight = max(height, na.rm = TRUE),\n          mass = median(mass, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 49 √ó 4\n   homeworld      height maxheight  mass\n   <chr>           <dbl>     <dbl> <dbl>\n 1 Alderaan         176.      176.  64  \n 2 Aleen Minor       79        79   15  \n 3 Bespin           175       175   79  \n 4 Bestine IV       180       180  110  \n 5 Cato Neimoidia   191       191   90  \n 6 Cerea            198       198   82  \n 7 Champala         196       196   NA  \n 8 Chandrila        150       150   NA  \n 9 Concord Dawn     183       183   79  \n10 Corellia         175       175   78.5\n# ‚Ñπ 39 more rows\n```\n\n\n:::\n:::\n\n\n:::\n\n\n#### Data masking\n\nNotice that we did not have to specify the dataframe. This is because dplyr functions are built on a data masking syntax. From the dplyr data-masking help page:\n\n> Data masking allows you to refer to variables in the \"current\" data frame (usually supplied in the .data argument), without any other prefix. It's what allows you to type (e.g.) `filter(diamonds, x == 0 & y == 0 & z == 0)` instead of `diamonds[diamonds$x == 0 & diamonds$y == 0 & diamonds$z == 0, ]`\n\nWhen you look at the help page for `?mutate` for example, you will see a function definition like so:\n\n> `mutate(.data, ...)`\n\nNote the `.data`, Which means that the data can be supplied as usual, or it can be inherited from the \"current\" data frame which is passed to it via a pipe.\n\n\n\n### Sample rows of data with `slice_*()`\n\nThe `slice_sample()` function will **randomly sample rows** of data.\n\nThe number of rows to show is specified by the `n` argument.\n\n-   This can be useful if you **do not want to print the entire tibble**, but you want to get a greater sense of the variation.\n\n::: callout-tip\n### Example\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nslice_sample(starwars, n = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 √ó 16\n   name         height  mass hair  skin  eye   birth_year sex   gender homeworld\n   <chr>         <int> <dbl> <chr> <chr> <chr>      <dbl> <chr> <chr>  <chr>    \n 1 Arvel Crynyd     NA    NA brown fair  brown         NA male  mascu‚Ä¶ <NA>     \n 2 Lando Calri‚Ä¶    177    79 black dark  brown         31 male  mascu‚Ä¶ Socorro  \n 3 Han Solo        180    80 brown fair  brown         29 male  mascu‚Ä¶ Corellia \n 4 Sebulba         112    40 none  grey‚Ä¶ oran‚Ä¶         NA male  mascu‚Ä¶ Malastare\n 5 Raymus Anti‚Ä¶    188    79 brown light brown         NA male  mascu‚Ä¶ Alderaan \n 6 Jocasta Nu      167    NA white fair  blue          NA fema‚Ä¶ femin‚Ä¶ Coruscant\n 7 Finn             NA    NA black dark  dark          NA male  mascu‚Ä¶ <NA>     \n 8 Nien Nunb       160    68 none  grey  black         NA male  mascu‚Ä¶ Sullust  \n 9 Gregar Typho    185    85 black dark  brown         NA <NA>  <NA>   Naboo    \n10 Mace Windu      188    84 none  dark  brown         72 male  mascu‚Ä¶ Haruun K‚Ä¶\n# ‚Ñπ 6 more variables: species <chr>, films <list>, vehicles <list>,\n#   starships <list>, heightsize <dbl>, height.quint <fct>\n```\n\n\n:::\n:::\n\n\n:::\n\nYou can also use `slice_head()` or `slice_tail()` to take a look at the top rows or bottom rows of your tibble. Again the number of rows can be specified with the `n` argument.\n\nThis will show the first 5 rows.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nslice_head(starwars, n = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 √ó 16\n  name  height  mass hair  skin  eye   birth_year sex   gender homeworld species\n  <chr>  <int> <dbl> <chr> <chr> <chr>      <dbl> <chr> <chr>  <chr>     <chr>  \n1 Yoda      66    17 white green brown        896 male  mascu‚Ä¶ <NA>      Yoda's‚Ä¶\n2 Jabb‚Ä¶    175  1358 <NA>  gree‚Ä¶ oran‚Ä¶        600 herm‚Ä¶ mascu‚Ä¶ Nal Hutta Hutt   \n3 Chew‚Ä¶    228   112 brown unkn‚Ä¶ blue         200 male  mascu‚Ä¶ Kashyyyk  Wookiee\n4 C-3PO    167    75 <NA>  gold  yell‚Ä¶        112 none  mascu‚Ä¶ Tatooine  Droid  \n5 Dooku    193    80 white fair  brown        102 male  mascu‚Ä¶ Serenno   Human  \n# ‚Ñπ 5 more variables: films <list>, vehicles <list>, starships <list>,\n#   heightsize <dbl>, height.quint <fct>\n```\n\n\n:::\n:::\n\n\n\nThis will show the last 5 rows.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nslice_tail(starwars, n = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 √ó 16\n  name  height  mass hair  skin  eye   birth_year sex   gender homeworld species\n  <chr>  <int> <dbl> <chr> <chr> <chr>      <dbl> <chr> <chr>  <chr>     <chr>  \n1 Finn      NA    NA black dark  dark          NA male  mascu‚Ä¶ <NA>      Human  \n2 Rey       NA    NA brown light hazel         NA fema‚Ä¶ femin‚Ä¶ <NA>      Human  \n3 Poe ‚Ä¶     NA    NA brown light brown         NA male  mascu‚Ä¶ <NA>      Human  \n4 BB8       NA    NA none  none  black         NA none  mascu‚Ä¶ <NA>      Droid  \n5 Capt‚Ä¶     NA    NA none  none  unkn‚Ä¶         NA fema‚Ä¶ femin‚Ä¶ <NA>      Human  \n# ‚Ñπ 5 more variables: films <list>, vehicles <list>, starships <list>,\n#   heightsize <dbl>, height.quint <fct>\n```\n\n\n:::\n:::\n\n\n\n# Summary\n\nThe `dplyr` package provides an alternative syntax for manipulating data frames. In particular, we can often conduct the beginnings of an exploratory analysis with the powerful combination of `group_by()` and `summarize()`.\n\nOnce you learn the `dplyr` grammar there are a few additional benefits\n\n-   `dplyr` can work with other data frame \"back ends\" such as SQL databases. There is an SQL interface for relational databases via the DBI package\n\n-   `dplyr` can be integrated with the `data.table` package for large fast tables\n\n-   Many people like the piping syntax for readability and clarity\n\n\n# Post-lecture materials\n\n### Final Questions\n\n\n::: callout-note\n### Questions\n\n1.  How can you tell if an object is a tibble?\n2.  Using the `trees` dataset in base R (this dataset stores the girth, height, and volume for Black Cherry Trees) and using the pipe operator: \n    (i) convert the `data.frame` to a tibble.\n    (ii) filter for rows with a tree height of greater than 70, and \n    (iii) order rows by `Volume` (smallest to largest).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(trees)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Girth Height Volume\n1   8.3     70   10.3\n2   8.6     65   10.3\n3   8.8     63   10.2\n4  10.5     72   16.4\n5  10.7     81   18.8\n6  10.8     83   19.7\n```\n\n\n:::\n:::\n\n\n:::\n\n\n\n### Additional Resources\n\n::: callout-tip\n-   <https://jhudatascience.org/tidyversecourse/wrangle-data.html#data-wrangling>\n-   [dplyr cheat sheet from RStudio](http://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf)\n:::\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}