{
  "hash": "a6004d2a972684534f4e068823030074",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Types of Data\"  \nauthor:\n  - name: Marguerite Butler\n    url: https://butlerlab.org\n    affiliation: School of Life Sciences, University of Hawaii\n    affiliation_url: https://manoa.hawaii.edu/lifesciences/\ndescription: \"All about data and how it is represented in R\"  \ndate: 2025-02-13\ncategories: [module 2, week 4, data, data structures, objects]  \n---\n\n\n\n<!-- Add interesting quote -->\n\n<!-- R emoji aliases:  https://gist.github.com/rxaviers/7360908 -->\n✏️\n\n# Overview \n\nWe will discuss different types of data, how they are represented in R, and how data type influences the types of data analyses we may employ. \n\nA practical benefit of understanding how R handles data is that a major source of error for novice R programmers is _trying to use functions but providing the wrong type or class of data than what the function was written for_. This is very confusing if you donʻt understand about objects in R, but very clear and easy to fix if you do! \n\n# Pre-lecture materials\n\n### Watch\n\n::: callout-note\n# Watch \n**Before class, you can prepare by watching:**\n\n\n\n{{< video https://youtu.be/wzPRpyoNaa8 start=\"350\" >}}\n\n\n\n:::\n\n## Acknowledgements\n\nMaterial for this lecture was borrowed and adopted from\n\n- <https://andreashandel.github.io/MADAcourse/Data_Types.html> \n- <https://r-coder.com/data-types-r/#Raw_data_type_in_R>\n- <https://www.stat.auckland.ac.nz/~paul/ItDT/HTML/node76.html>\n# Learning objectives\n\n::: callout-note\n# Learning objectives\n\n**At the end of this lesson you will:**\n\n* Understand different types of data and how they are represented computationally \n* Understand that different data types require different analysis approaches\n* Recognize different base **data types** in R and know how to work with them\n* Recognize the base **data structures** or **objects** in R and how to use them to do what you want\n:::\n\n\n\n# What is data anyway?\n\nMerriam Webster defines **data** as *factual information (such as **measurements** or **statistics**) used as a basis for **reasoning**, **discussion**, or **calculation**.*\n\nFrom a practicing scientistsʻ point of view, data is anything **measureable** or **scorable** that could provide **information** regarding a phenomenon of interest. \n\nIdeally, data:   \n\n*  are **repeatable** (at least within statistical error).  \n*  contain more **signal** than **noise**.  \n\nFor example, if we are studying how morphology changes with body size, we could take measurements such as *body length*, *head length*, *arm length*, and *leg length* on a sample of *individuals*.  These measurements would provide linear, **continuous data** that would inform our study of size and scaling. If we also expected males and females to differ, then *sex* would be a **categorical variable**. \n\n-  It is important to *define the variables* so that the measurements are *repeatable* by other scientists collecting data on the same or similar samples.  \n-  The *variables* chosen are expected to be related to the phenomenon of interest (here, scaling).  \n-  The *individuals* are replicates from the same sample population, meaning that they should be equally embody or be influenced by the phenomenon we are studying. In other words, they form a homogenous sample.  In the example of sexual dimorphism, we potentially have different groups within our sample. This can be taken account of in analyses using our *categorical grouping variable* *sex*. \n \nData have many forms such as images, sound, video, text, or any combination. Today we also have access to large volume datastreams from remote sensing, social media, or from all the various -omics. The kind of data, and how messy it is, determines the amount of processing that needs to be done before analysis. \n\nAt some point your data will most likely be arranged into spreadsheets, with observations as rows and variables as columns. **In this course, we will focus on the data source that you are most likely to encounter in your analyses, the \"(messy) spreadsheet\" type, containing bits of information collected on individuals.** Please do feel free to play around with other data types on your own, e.g. for your course project.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Weʻve all been here. Source: timoelliott.com](../../images/i-have-data_3.jpeg){#fig-havedata fig-align='center' fig-alt='A cartoon showing two people arguing at a table, and a third person, the data analyst is at his laptop. He is smiling and says *When you two have finished arguing your opinions, I actually have data*.' width=80%}\n:::\n:::\n\n\n[Source: timoelliott.com](https://timoelliott.com/blog/cartoons/analytics-cartoons)\n\n\n\n\n# Types of Variables\n\nVariables are the conceptual elements of the data. Variables are typically categorized by the nature of how they can vary (i.e., quantitative, qualitative, ordinal), because these differences dictate different analytical approaches and statistical methods. \n\n__Quantitative:__ This data type, also called _metric_ data, represents variation in magnitude and generally allows one to do certain mathematical operations, e.g., subtraction or addition. The most common variations include:\n\n  * *__Continuous__*: Can take on any numerical value. Examples include mass, length, distance, age, etc.\n  * *__Discrete__*: Can only take countable (integer) values, e.g., the number of offspring an indivdiual produces. \n  * *__Fraction/Proportion__*: A continuous ratio of two values, with the numerator being a part to the whole which is represented by the demoninator. Thus these variables take on values between 0 and 1.\n  * *__Ratios__*:  A continuous ratio of any two values. Data measured on a ratio scale have all the properties of continuous data. \n\n__Qualitative:__ Generally speaking, qualitative data indicate *categories* which have no intrinsic numeric value or natural order. Therefore it would not make sense to apply arithmetic to qualitative data such as color, sex, or family group, etc. You may see the term *nominal* (definition: \"pertaining to names\") data applied to categorial data in the statistical literature. Major types of __qualitative__ data include:\n\n* *__Categorical__*: e.g., flower color, continent of origin, social status, disease state, etc.\n* *__Descriptive__*: e.g., free text data from field observations.\n\n  \n__Ordinal:__ Related to categorical data, this type differs in that they can be ranked, at least qualitatively. \n\nFor example, while body condition may be a qualitative assessment, \"obese\"  clearly indicates greater fat stores than \"well-conditioned\", which is greater than \"emaciated\". Thus, ordinal data fall between being strictly quantitative or strictly qualitative. In some cases, if there are numerous categories, you can begin to think of them as approaching continuous data, although one important difference is that there is no clear numerical value that you can assign to the different categories (i.e., it is unclear whether the difference between obese and well-conditioned is the same as the difference between well-conditioned and emaciated). It may make sense to apply rank order statistics to ordinal data, but it would not make sense to add, subtract, or multiply these categories. \n\n\n\n\n\n# Analysis approaches and their relationship to data\n\nIt may be obvious that data type will dictate the types of analyses one can do. It might be less obvious that the __question of interest__ and whether there is a _quantitative or ordinal outcome_ also drive our analyitical approach. \n\n\n### When we want to know the strength of the quantitative relationship \n\nMethods for __quantitative responses__ (or outcomes) that address questions such as \"_how much does leg length increase with body size?_\"? In other words, \"_how much does variable Y change with each increment of change in variable X_?\" These are usually referred to as __regression approaches__. \n\nThere are many subtypes of regression such as linear regression for continuous outcomes, and Poisson regression for discrete outcomes. \n\n-  __*Linear regression*__ predicts a continuous response, such as body size.\n-  __*Poisson regression*__ predicts a count or discrete response, such as population size.  \n\nBoth types of regression can be based independent variables that are continuous, discrete, or categorical (or some combination). They differ in the underlying distribution of the modeled response variable, often a normal distribution for linear regression, and a Poisson distribution for the Poisson regression. \n\n\n### When we want to know about grouping \n\nMethods that recover __categorical responses__, in other words, categorizing observations based on the analysis of data, are usually referred to as __classification approaches.__ These methods are useful for looking for order in nature, such as whether different species can be grouped into \"ecomorphs\" based on their morphology, or to predict the type of behavioral response (e.g., \"attack\" or \"flee\") based on responses to different stimuli. \n\nIt is possible to obtain an ordinal response as well, using [__ordinal regression__](https://en.wikipedia.org/wiki/Ordinal_regression). Alternatively, the the response can be treated as unordered categorical or as continuous (depending on how you code them, i.e., in R as a factor or numeric). \n\nThere are no hard and fast rules regarding when it is appropriate to treat an ordinal variable as fully quantitative. It should, however, at least be explained or justified. You can always treat it as categorical, but then you lose some information on the ranking of the variable.  \n\nTo add to the confusion, these classification methods are often based on regression, with the decision to classify based on one category or another dependent on comparing distances or probabilities based on regression results.[^1] \n\nRecently, there has been a lot of interest in AI and machine learning. This is often just a fancy way of renaming __*discriminant function analysis*__ and __*cluster analysis*__. When you see _supervised_ learning in the literature, it refers to cases when we have the categories predefined, and often we have a training dataset with data on individuals of each category to use to train the classification algorithm before we use it to predict grouping (i.e., *discriminant function analysis*). When we donʻt have the categories *a priori*, and the algorithms determine the categories and their number, these analysis methods are usually referred to as _clustering approaches_ and are also called _unsupervised_ learning methods. \n\nWe will return to and apply some of those methods later in the course.\n\n[^1]: For example, logistic regression (a regression to predict a binary [yes/no] outcome) is used for classification. The underlying model predicts a quantitative outcome (a value between 0 and 1 usually interpreted as a probability), which is then binned to make categorical predictions.\n\n\n\n# Data types in R\n\nNow that we have a basic understanding of the conceptual landscape of data, letʻs breifly discuss how these different types of data are represented in and handled by R. \n\nIf you would like a gentle video walk through/demonstration of data types, now would be a good time to check out the _Types_ section of the RStudio [programming basic primer](https://rstudio.cloud/learn/primers/1.2). For more details and examples see [chapter 3 of IDS](https://rafalab.github.io/dsbook/r-basics.html).\n\n\n## Basic data types\n\n:::{.callout-note}\n## R has six basic (atomic) types of data:\n\n| Atomic Type | Short Description | Size in bytes |\n|---------|:-----|:-----|\n| __string__  (or character)    | text   | 1 (per character) |\n| __integer__ | countable numbers   | 4 |\n| __real__ | real numbers   | 8 |\n| __logical__ | TRUE or FALSE | 4 |\n| __complex__ | numbers with imaginary component |\n| __raw__ | raw bytes | 1 |\n_**All other data types are derived from the atomic types**_\n:::\n\nNote: Most computers use 64-bit operating systems these days, so the sizes above are for 64-bit software.\n\nFor a quick tour of the data types, see <https://r-coder.com/data-types-r>\n\n\n__String/character:__ Character values are alphanumeric values (plus whitespace, punctuation, etc.). A string is a collection of characters, in other words \"text\". \n\n-  strings can be pasted together using the `paste()` function. \n-  R has powerful tools for __string manipulation__, including searching, replacing, and customized partial matching (with or without replacement) using __wildcards__ and perl-like [__regular expressions__ (or __regex__)](https://github.com/rstudio/cheatsheets/blob/master/regex.pdf) using base functions such as \n    *  `grep()`\n    *  `sub()`\n    *  `gsub()`\n    *  `substr()`\n-  There are also packages specific for string manipulation including the [`stringr` package](https://stringr.tidyverse.org/) which is part of the tidyverse.\n\nIt is very likely that you will need to work with strings at some point during a data analysis, even if it is only to find specific values, clean up variable names, etc. \n\nThese problems can be quite the headache! But instead of editing them by hand and possibly making an error, it is better to do this with code. It also makes it easier to keep a record of the original data and all of the changes made to it, improving the reproducibility of your analysis. \n\nThere is a learning curve to using these tools, especially **regex** syntax, but they are very powerful and well worth your time. \n\n:::{.callout-note}\n## Good sources for practice manipulating strings:\n\n- For beginners: Review [the _Strings_ chapter (14) of R4DS](https://r4ds.had.co.nz/strings.html), and do the exercises.\n- [The _string processing_ chapter (25) of IDS](https://rafalab.github.io/dsbook/string-processing.html) \n- [the _Character Vectors_ chapter in the STAT 545 book](https://stat545.com/character-vectors.html) by [Jenny Bryan](https://jennybryan.org/)  \n\n**Decide which one is right for your level and work through some examples. I think youʻll agree that it is worth your time.**\n:::\n\n\n__Numeric (double or integer):__ Variables of type `numeric` in R are either integers or double precision (representing real numbers). \n\n-  Integers and real values are different, but in practice most R users donʻt pay attention to this distinction. Integer values tend to be coerced (converted) to real values if any mathematical operations are done to them. \n-  If an integer is explicity needed, you can create them using functions such as `as.integer()`.\n-  Note that when you type an integer value, e.g. `x <- 2`, into R, this is considered numeric by default. \n-  If you want to make sure a value is treated as integer, add an `L`, e.g. `x <- 2L`.\n\n\n\n__Logical:__ Logical variables are binary and can take on only two values, `TRUE` or `FALSE` (which are *reserved words* that only take on these meanings in R). \n\n- In R, logical values are treated as __integers__, and interpreted as 1 for `TRUE` and 0 for `FALSE`. It is possible to `sum(TRUE)` or a vector of logicals, for example.  \n- R also understands `T`, `True`, and `true` for `TRUE`, and the corresponding representations for `FALSE`.\n- Importantly, logical comparisons are used for __indexing__. You will use logical comparisons when cleaning and checking your data, or running analyses, e.g., if you want to see if your variable `x` is greater than 5, then the R command `x > 5` will return either TRUE or FALSE, based on the value of `x`. \n- *Note: reserved words are understood as constants and should not be \"quoted\"*.\n\n## Derived data types\n\nR also allows derived data types called **classes** that are built up from atomic data types. There are R base classes as well as new classes that can be defined as needed by programmers (maybe you?). \n\n__Factors:__ Are Rʻs class for categorical variables. \n\n-  __Factors__ have __names__ and __values__. \n-  For example, a __size__ factor may have `names` (or `levels`) of `small`, `medium`. and `large` with values 0,1,2.  Here, the values simply indicate the different categories, with the names being the human-friendly labels for the values.  \n-  Factors can be ordered/ordinal or not. \n  +  Factors could be numeric values, e.g., the number of offspring. \n  +  Or it could be a factor coding for 3 types of habitat (unordered), \n  +  Or 3 levels of life history stage (ordered). \n  +  An excellent package to work with factors is the [`forcats` package](https://forcats.tidyverse.org/). \n\nFor more about factors, work through the [_Factors_ chapter of R4DS](https://r4ds.had.co.nz/factors.html), and do the exercises. \n\n\n__Date/time:__ Dates in base R are of the class `Date` (and are called `POSIX` variables). The [`lubridate` package](https://lubridate.tidyverse.org/) is a tidyverse package to work with dates, which many people find easier. There are other packages as well. \n\nAdditional resources are the [_Dates and times_ chapter of R4DS](https://r4ds.had.co.nz/dates-and-times.html) and the [_Parsing Dates and Times_ chapter of IDS](https://rafalab.github.io/dsbook/parsing-dates-and-times.html). \n\n\n__Programmer-defined classes__ Many packages define their own classes. For example class `phylo` is used to represent phylogenetic trees in the `ape` package. \n\n### There are several functions that can show you the data type of an R object \n\nsuch as `typeof()`, `mode()`, `storage.mode()`, `class()` and `str()`.\n\n\n\n# Data structures in R\n\nData in R are stored in data structures called **objects**. \n\n__Vectors:__ vectors are the simplest object, a collection of data elements in a single sequence. \n\n-  One way to create vectors is with the `concatenate` command, `c()`.  \n-  `1:3` is shorthand for a numeric sequence `=c(1,2,3)`  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(3,12,5)\ny <- 1:3\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  3 12  5\n```\n\n\n:::\n\n```{.r .cell-code}\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3\n```\n\n\n:::\n:::\n\n\n\n-  **A single vector can contain only one type** (e.g., all characters or all numeric). \n  +  If you try to mix and match, everything will default to the lowest common denominator, typically a character (anything can be a character). \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx1 <- c(3, 1, \"dog\")\nclass(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(x1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n\n```{.r .cell-code}\nx1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"3\"   \"1\"   \"dog\"\n```\n\n\n:::\n:::\n\n\nWhat happened?\n\n\n__Matrices:__ A matrix is a rectangular collection of data elements in rows and columns. \n\n-  A matrix can contain only one type. \n-  Internally, R stores matrices as a long vector, keeping track of where the columm breaks are.\n-  Matrices are really important for the matrix math used to solve many statistical models. \n\n\n\n__Data frames:__ A data frame is a rectangular data structure that is designed to store records of individual subjects. \n\n-  A data frame has rows and columns.\n-  Columns are allowed to be of different data types (for example, \"character\" for the subject names and \"numeric\" for measured variables for each subject, and \"factors\" for categories such as sex, etc.).\n-  Internally, data frames are stored as a list of vectors, one for each column. This allows each column to have a different type. \n-  Each columm must have the same number of elements or rows, i.e., it must be rectangular.\n-  Typically, the columms of data frames have names corresponding to variable names.\n\n\n__Lists:__ Lists do not have to be rectangular and are the most flexible data type in R. A list is a vector possibly composed of different structures and of varying length (this is the only type where that is allowed!).\n> \n-  Lists are commonly used for model fits in statistical functions. For example, you may want to store the model (an expression), the input data (a dataframe), the output coefficients (a vector), \n-  R has many powerful functions that operate on lists. \n\nOther types of data structures exist; they are often introduced by specific R packages. An important one to know is the `tibble` which is a type of data frame used in the `tidyverse`. It is similar, but not exactly like a data frame. You can read more about `tibbles` [on its package website](https://tibble.tidyverse.org/) and in [R4DS chapter 10](https://r4ds.had.co.nz/tibbles.html).\n\n\n\n## Other derived data types\n\n__Timeseries:__  A very useful set of tools for  times-series analysis in R is the set of packages called [the tidyverts](https://tidyverts.org/). CRAN also has a [Task View for _Time Series Analysis_.](https://cran.r-project.org/web/views/TimeSeries.html) (A _Task View_ on CRAN is a site that tries to combine and summarize various R packages for a specific topic). Another task view that deals with longitudinal/time-series data is the [_Survival Analysis_ Task View](https://cran.r-project.org/web/views/Survival.html).\n\n\n__Omics:__ The [bioconductor](https://www.bioconductor.org/) website is your source for (almost) all tools and resources related to omics-type data analyses in R.\n\n\n__Text:__  Working with and analyzing larger sections of text is different from the simple string manipulation discussed above. These days, analysis of text often goes by the term _natural language processing_. Such text analysis will continue to increase in importance, given the increasing data streams of that type. If you are interested in doing full analyses of text data, the [`tidytext` R package](https://juliasilge.github.io/tidytext/) and the [Text mining with R book](https://www.tidytextmining.com/) are great resources. A short introduction to this topic is [The _text mining_ chapter (27) of IDS.](https://rafalab.github.io/dsbook/text-mining.html) \n\n\n__Images:__ Images are generally converted into multiple matrices of values for different pixels of an image. For instance, one could divide an image into a 100x100 grid of pixels, and assign each pixel a RGB values and intensity. That means one would have 4 matrices of numeric values, each of size 100x100. One would then perform operations on those values. We won't do anything with images here, there are some R packages for analyzing image data.\n\n\n\n__Videos:__ Are a time-series of images. Analysis of videos therefore has an extra layer of complexity. \n\n\n# Attributes of Objects\n\nEach object in R has certain characteristics called **attributes**. You can think of this as the metadata for R objects. These attributes are what allow functions written by anyone to be reusable by others, so long as the object is of the correct class. \n\nThe common attributes of objects (the most helpful to know are **class, mode, length, dimension**, and **names**:\n\n-  `class` Describes the derived type of object, it may be a built-in class or written by a package author or user.  Classes are used for methods dispatch.\n-  `mode` Often describes the atomic type of object. Sometimes called *storage mode*. Can be the same as the class, if it is an atomic type. \n-  `length` The number of fundamental elements of a vector.\n-  `dimension` Rectangular objects such as matrices and data frames have two dimensions, for the numbers of rows and columns (or the length of the vectors and numbers of vectors). 3D and higher dimensional arrays have 3 or more dimensions. \n-  `names` Names are optional but often useful to apply labels to internal elements of objects. If no names are given, the internal values can be referenced by their position (index). \n\n\n# Helpful functions for creating objects\n\n| Functions | Actions |\n|---------|:-----|\n| c(n1, n2, n3) | combines elements into an object |  \n| cbind(x, y) | binds objects together by column | \n| rbind(x, y) | binds objects together by row  |\n\n## For sequences \n\n| Functions | Actions |\n|---------|:-----|\n| seq()  | generate a sequence of numbers |\n| 1:10  | sequence from 1 to 10 by 1 |\n| rep(x, times)  | replicates x |\n| sample(x, size, replace=FALSE) | sample size elements from x| \n| rnorm(n, mean=0, sd=1) | draw n samples from normal distribution |\n\n\n## Creating or Coercing objects to different class\n\n| Functions | Actions |\n|---------|:-----|\n| vector() | create a vector |\n| matrix() |create a matrix |\n| data.frame() | create a data frame |\n|as.vector(x) |coerces x to vector |\n|as.matrix(x) |coerces to matrix |\n|as.data.frame(x) |coerces to data frame |\n|as.character(x) |coerces to character |\n|as.numeric(x) | coerces to numeric |\n|factor(x) |creates factor levels for elements of x |\n|levels() |orders the factor levels as specified |\n\n\n\n# Examples \n\n### Various ways to create vectors:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c( 1, 5, 7, 2, 6)  # numeric\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 5 7 2 6\n```\n\n\n:::\n\n```{.r .cell-code}\nrep( x, times=2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 1 5 7 2 6 1 5 7 2 6\n```\n\n\n:::\n\n```{.r .cell-code}\ny <- rnorm(8)\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  0.70831083  0.02616606  0.76951907  0.49269606  0.17509325  2.23678382\n[7] -0.07900867  0.89378805\n```\n\n\n:::\n\n```{.r .cell-code}\ngoodanswer <- c(TRUE, TRUE, FALSE)  # logical\ngoodanswer\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  TRUE  TRUE FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nspecies <- letters[1:4]    # special stored data object: lower case letters a - d\nspecies\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"a\" \"b\" \"c\" \"d\"\n```\n\n\n:::\n\n```{.r .cell-code}\nLETTERS[1:3]   # A B C  # character\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"A\" \"B\" \"C\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntreatment <- c(\"low\", \"low\", \"high\", \"med\", \"high\")  # character vector\ntreatment\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"low\"  \"low\"  \"high\" \"med\"  \"high\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntreat <- factor(treatment)   # create a factor\ntreat\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] low  low  high med  high\nLevels: high low med\n```\n\n\n:::\n:::\n\n\nThe vector `treat` has five elements, it is factor with levels of `low`, `med`, or `high`.\n\nIt is simple to do arithmetic on numeric vectors:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 5 7 2 6\n```\n\n\n:::\n\n```{.r .cell-code}\nx+2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3 7 9 4 8\n```\n\n\n:::\n\n```{.r .cell-code}\nx^2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  1 25 49  4 36\n```\n\n\n:::\n:::\n\n\n\nTypically the class of a vector is returned as the type of information contained, so that return values of the atomic types \"numeric\",  \"character\", \"factor\", or \"logical\" indicate that the object is a vector:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n\n```{.r .cell-code}\nmode(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n:::\n\n\n\n### Factors are categorical data \n\nFor example, `large` and `small`, or `blue`, `red`, and `yellow`. Factors may be ordered, which means that the order of the categories has meaning (like income categories). By default, factors are unordered. Levels are the categories that the factor can take on.\n\nYou can easily coerce one type to another:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.numeric(treat)   # coerce to numeric\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2 2 1 3 1\n```\n\n\n:::\n\n```{.r .cell-code}\nas.character(y)  # coerce to character\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"0.708310834684403\"   \"0.0261660569479235\"  \"0.769519071353493\"  \n[4] \"0.49269605923231\"    \"0.17509324974742\"    \"2.23678382276967\"   \n[7] \"-0.0790086663337881\" \"0.893788053618042\"  \n```\n\n\n:::\n:::\n\n\n\nNote that when values are quoted, they are of type character.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(\"pony\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n\n\nHowever, notice that factors return different values for class and mode:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(treat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"factor\"\n```\n\n\n:::\n\n```{.r .cell-code}\nmode(treat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n:::\n\n\n\nAnd sometimes, when doing ordinary manipulations such as coercing to numeric or combining vectors together to create a matrix, we get:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.numeric(treat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2 2 1 3 1\n```\n\n\n:::\n\n```{.r .cell-code}\ncbind(x, treat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     x treat\n[1,] 1     2\n[2,] 5     2\n[3,] 7     1\n[4,] 2     3\n[5,] 6     1\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(treat, x)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\nThis is because internally, factors are stored as digits, 1, 2, etc. to the number of categories. The characters that you see are actually labels for the factor categories called \"levels\". Look at the help page for factor (`?factor`) and read the entry for levels. If nothing is specified for the order of the levels, then they are numbered alphabetically! This explains the weird behavior. So if you want the order of the levels to be a more logical \"low, medium, high\", you can do so by specifying the order of the levels explicitly when you create the factor:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntreat <- factor(treat, levels=c(\"low\", \"med\", \"high\"))\ntreat\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] low  low  high med  high\nLevels: low med high\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(treat,x)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nIf you get frustrated because youʻre trying to treat a factor as a character, itʻs sometimes safer to manipulate factors by coercing to character first before doing anything else. \n\nHereʻs another illustration of methods dispatch - The plot function by default accepts arguments in x, y order. If x is a factor as above, the plot assumes a categorial format for the x-axis. However, if you switch the order:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(x,treat)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\nIt is treated as a continuous x-axis. This is because methods dispatch for the plot function will be guided by the class of the objects that you supply. With x as a factor, R assumes you want a discrete x-axis, with the x as a continuous variable and y as the factor level, it will plot on the internal codes for the factor levels (if you want a horizontal bar plot use `barplot(..., horiz=TRUE)`. If you want histograms use `hist()`.\n\nIf you name a vector, the names are attached to each value:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(x) <- treatment\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n low  low high  med high \n   1    5    7    2    6 \n```\n\n\n:::\n\n```{.r .cell-code}\nnames(x) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"low\"  \"low\"  \"high\" \"med\"  \"high\"\n```\n\n\n:::\n:::\n\n\n\n### Matrices\n\nData are often rectangular. For example, you might have height and weight columns for each subject (rows), or you might have a matrix describing the genetic relatedness between each pair of individuals in a family. Whether it is a square or a rectangular matrix, you will have a series of vectors of equal length. In fact, in R you can think of it as a single long vector with breaks at the end of each column. \n\nCreating a matrix:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxy <- cbind(x,y)  # column bind\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in cbind(x, y): number of rows of result is not a multiple of vector\nlength (arg 1)\n```\n\n\n:::\n\n```{.r .cell-code}\nxy\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     x           y\n[1,] 1  0.70831083\n[2,] 5  0.02616606\n[3,] 7  0.76951907\n[4,] 2  0.49269606\n[5,] 6  0.17509325\n[6,] 1  2.23678382\n[7,] 5 -0.07900867\n[8,] 7  0.89378805\n```\n\n\n:::\n\n```{.r .cell-code}\nz <- matrix(1:6, nrow=2)  #create a matrix with 2 rows\nz\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n```\n\n\n:::\n\n```{.r .cell-code}\nmatrix(1:6, nrow=2, byrow=2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(z)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"matrix\" \"array\" \n```\n\n\n:::\n\n```{.r .cell-code}\nmode(z)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n:::\n\n\n\nNames applied to a matrix will attach the names to each value. If you want to name the rows and columns of a matrix you must use `rownames()` or `colnames()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(z) <- letters[1:6]  \nz\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\nattr(,\"names\")\n[1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\"\n```\n\n\n:::\n\n```{.r .cell-code}\nz[\"c\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nc \n3 \n```\n\n\n:::\n\n```{.r .cell-code}\nz[\"f\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nf \n6 \n```\n\n\n:::\n\n```{.r .cell-code}\ncolnames(z) <- c(\"tom\", \"dick\", \"harry\")\nz\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     tom dick harry\n[1,]   1    3     5\n[2,]   2    4     6\nattr(,\"names\")\n[1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\"\n```\n\n\n:::\n:::\n\n\n\nMatrices have rows and columns, and are all of the same type whether it is numeric or character. There is a full suite of matrix math facilities in R to operate on numeric matrices. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nz+2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     tom dick harry\n[1,]   3    5     7\n[2,]   4    6     8\n```\n\n\n:::\n\n```{.r .cell-code}\nz*2  # ordinary element-by-element multiplication\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     tom dick harry\n[1,]   2    6    10\n[2,]   4    8    12\n```\n\n\n:::\n\n```{.r .cell-code}\nx <- c(1,2,4)\nz%*%x  # matrix multiplication\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1]\n[1,]   27\n[2,]   34\n```\n\n\n:::\n:::\n\n\n\n### Data Frames \n\nDataframes are superficially similar to matrices. They are rectangular. However, a major difference is that the vectors that comprise a dataframe can have vectors of different type. For example, one column can contain species names, whereas the other columns might contain numerical data. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspecies = letters[1:3]\ny = rnorm(3)\ndat <- data.frame(species, x, y)\n```\n:::\n\n\n\nInternally, it is no longer a single vector but actually a list of vectors:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(dat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"data.frame\"\n```\n\n\n:::\n\n```{.r .cell-code}\nmode(dat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"list\"\n```\n\n\n:::\n\n```{.r .cell-code}\nnames(dat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"species\" \"x\"       \"y\"      \n```\n\n\n:::\n\n```{.r .cell-code}\nlength(dat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n\n```{.r .cell-code}\ndim(dat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3 3\n```\n\n\n:::\n:::\n\n\n\nThis is why the length of a dataframe is the number of columns. The names are the names of the columns, etc. \n\nYou can access the columns of dataframes using the `$` operator,  or using brackets, or by index number: and the name of the element, by the index number and double brackets, or by name and double bracket. Or a single value by using indexing on the row and column number separated by a comma. More on this later in the indexing chapter.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat$species\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"a\" \"b\" \"c\"\n```\n\n\n:::\n\n```{.r .cell-code}\ndat[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  species\n1       a\n2       b\n3       c\n```\n\n\n:::\n\n```{.r .cell-code}\ndat[1,3]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -1.027375\n```\n\n\n:::\n:::\n\n\n\n### Lists \nLists are vectors of arbitrary objects. You can string any kind of objects together in a list. Sometimes the objects are identical, such as when you are doing a massive simulation study and each list element may be a simulated dataset in form of a dataframe.  Alternatively, each element of a list may contain a different type of object. This is especially useful for model fitting output, for example, where you may want to store the input data in one list element, and in other list elements: the expression for the model, the fitted parameters, and the information criteria. All of these items are logically related, and if you name the list elements you can easily access the information wanted. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmylist <- list(species,x,y,z)\nnames(mylist) <- c(\"species\", \"x\", \"y\", \"z\")\nclass(mylist)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"list\"\n```\n\n\n:::\n\n```{.r .cell-code}\nmode(mylist)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"list\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlength(mylist)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n\n```{.r .cell-code}\ndim(mylist)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNULL\n```\n\n\n:::\n:::\n\n\n\nNote that lists have no **dimension** (because they are more flexible vectors - kinda like stretchy christmas stockings). However, if you have a matrix or a dataframe within a list those will have vectors. The object within lists have their own attributes. \n\nYou can access the z element of mylist in a number of ways, using the `$` operator and the name of the element, by the index number and double brackets, or by name and double bracket:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmylist$z\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     tom dick harry\n[1,]   1    3     5\n[2,]   2    4     6\nattr(,\"names\")\n[1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\"\n```\n\n\n:::\n\n```{.r .cell-code}\nnames(mylist$z)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\"\n```\n\n\n:::\n\n```{.r .cell-code}\nnames(mylist[[4]])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\"\n```\n\n\n:::\n\n```{.r .cell-code}\nnames(mylist[[\"z\"]])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\"\n```\n\n\n:::\n:::\n\n\n\nTo see the structure of the list object, use `str()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(mylist)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 4\n $ species: chr [1:3] \"a\" \"b\" \"c\"\n $ x      : num [1:3] 1 2 4\n $ y      : num [1:3] -1.03 -1.39 1.72\n $ z      : int [1:2, 1:3] 1 2 3 4 5 6\n  ..- attr(*, \"names\")= chr [1:6] \"a\" \"b\" \"c\" \"d\" ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : NULL\n  .. ..$ : chr [1:3] \"tom\" \"dick\" \"harry\"\n```\n\n\n:::\n:::\n\n\nYou can see that there are four elements of `mylist`, a character vector named `species`, two numeric vectors named `x` and `y`, and a integer matrix called `z`. Is it starting to make sense? \n\n\n\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}