{
  "hash": "9367026193fb27cf8c6884ad93fac1b8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Literate Statistical Programming and Quarto\"\nauthor:\n  - name: Marguerite Butler\n    url: https://butlerlab.org\n    affiliation: School of Life Sciences, University of Hawaii\n    affiliation_url: https://manoa.hawaii.edu/lifesciences/\n# number-sections: true\ndescription: \"Introduction to literate statistical programming tools including  Quarto Markdown\"\ndate: 2025-01-23\ncategories: [module 1, week 2, Markdown, Quarto, programming]\nbibliography: my-refs.bib\n---\n\n\n\n<!-- Add interesting quote -->\n\n# Pre-lecture materials\n\n## Read ahead\n\n::: callout-note\n### Read ahead\n\n**Before class, you can prepare by reading the following materials:**\n\n1.  <https://rss.onlinelibrary.wiley.com/doi/epdf/10.1111/1740-9713.01522>\n2.  Creating a Website in Quarto quickstart *up to and including Render* <https://quarto.org/docs/websites/>\n3.  Publishing to GitHub *up to and including Render to docs* <https://quarto.org/docs/publishing/github-pages.html>\n:::\n\n## Acknowledgements\n\nMaterial for this lecture was borrowed and adopted from\n\n-   <https://www.stephaniehicks.com/jhustatcomputing2022/posts/2022-09-01-literate-programming/>\n-   <http://users.stat.umn.edu/~geyer/Sweave/>\n-   <https://rdpeng.github.io/Biostat776/lecture-literate-statistical-programming.html>\n-   <https://statsandr.com/blog/tips-and-tricks-in-rstudio-and-r-markdown>\n\n# Learning objectives\n\n::: callout-note\n# Learning objectives\n\n**At the end of this lesson you will:**\n\n-   Be able to define literate programming\n-   Know how to use R plus a text editor or Rstudio to practice literate programming\n-   Create a Quarto markdown document\n:::\n\n# Literate Programming\n\nBefore there was widespread concern about \"Reproducible Research\", the term **literate programming** was coined by [Donald Knuth](https://www-cs-faculty.stanford.edu/~knuth/), one of the true geniuses of computing, the author/inventor of TeX, and the notion of structured programming,  among other things. He wrote a book about it in 1984!\n\n> Literate programming is a methodology that combines a programming language with a documentation language, thereby making programs more robust, more portable, more easily maintained, and arguably more fun to write than programs that are written only in a high-level language.\n\n> The main idea is to treat a program as a piece of literature, *addressed to human beings rather than to a computer*. The program is also viewed as a hypertext document, rather like the World Wide Web. (Indeed, I used the word WEB for this purpose long before CERN grabbed it!) ---*Donald Knuth*\n\nThe basic idea is that:\n\n- Programs are useless without descriptions.\n- Descriptions should be literate, not comments in code or typical reference manuals.\n- The *code* in the descriptions *should work*. Thus it is necessary to extract the real working code from the literary description.\n\nThese concepts were baked into the R help pages. You will see that there are working code examples for every single function in R at the bottom of each help page. In fact it is required before a package will be published on CRAN.\n\n::: callout-tip\n### Additional Reading\n- Knuthʻs Webpage about his [book on Literate Programming](https://www-cs-faculty.stanford.edu/~knuth/lp.html)\n:::\n\n\n# The Data Science Pipeline\n\nThe basic issue is when you read a description of a data analysis, such as in an article or a technical report, for the most part, what you get is the report and nothing else.\n\nOf course, everyone knows that behind the scenes **there's a lot that went into this article** and that is what I call the **data science pipeline**.\n\n![The Data Science Pipeline](../../images/dspipeline.png)\n\n\n\n# Literate Programming in Practice\n\nOne basic idea to make writing reproducible reports easier is what's known as *literate statistical programming*. The idea is to **think of a report or a publication as a stream of text and code**.\n\n- The text is readable by people and the code is readable by computers.\n- The analysis is described in a series of text and code chunks.\n\n- Each kind of code chunk will do something like load some data or compute some results.\n- Each text chunk will relay something in a human readable language.\n\n- **The code and text remain together** in a single source document. No more separate analysis files and word processing files. When code is edited, the report is automatically generated and updated.\n\nThere might also be **presentation code** that formats tables and figures and there's article text that explains what's going on around all this code. This stream of text and code is a literate statistical program or a literate statistical analysis.\n\n## Weaving and Tangling\n\nLiterate programs by themselves are a bit difficult to work with, but they can be processed in two important ways.\n\nLiterate programs can be **weaved** to produce human readable documents like PDFs or HTML web pages, and they can **tangled** to produce machine-readable \"documents\", or in other words, machine readable code.\n\nIn order to use a system like this you need a documentational language, that's human readable, and you need a programming language that's machine readable (or can be compiled/interpreted into something that's machine readable).\n\n## Sweave\n\nOne of the original literate programming systems in R that was designed to do this was called Sweave written by [Friedrich Leisch](https://documents.uow.edu.au/content/groups/public/@web/@commerce/documents/doc/uow012868.pdf). Sweave enables users to combine R code with a documentation program called LaTeX.  Sweave revolutionized coding, and has become part of the R base code. Leisch is on the R Core Development Team and the BioConductor Project.\n\n**Sweave files ends a `.Rnw`** and have R code weaved through the document:\n\n    <<plot1, height=4, width=5, eval=FALSE>>=\n    data(airquality)\n    plot(airquality$Ozone ~ airquality$Wind)\n    @\n\nOnce you have created your `.Rnw` file, Sweave will process the file, executing the R chunks and replacing them with output as appropriate before creating the PDF document.\n\nSweaveʻs main limitation is that it requires knowledge of LaTeX\n\n- LaTeX is very powerful for laying out mathematical equations and fine-tuned control of formatting, but is not a documentation language that is widely used outside of mathematics.\n- Therefore, there is a steep learning curve.\n- Sweave also **lacks a lot of features that people find useful** like caching, and multiple plots per page and mixing programming languages.\n\nInstead, folks have moved towards using something called **knitr**, which offers everything Sweave does, plus it extends it to much simpler Markdown documents.\n\n## rmarkdown\n\nAnother choice for literate programming is to build documents based on [Markdown](https://en.wikipedia.org/wiki/Markdown) language. A markdown file is a plain text file that is typically given the extension `.md`. The [`rmarkdown`](https://CRAN.R-project.org/package=rmarkdown) R package takes a R Markdown file (`.Rmd`) and weaves together R code chunks @fig-rmarkdown, producing a large number of user-specified outputs.\n\n![R markdown translates text and code to many different formats](../../images/Rmarkdown.png){width=80% #fig-rmarkdown}\n\nR chunks surrounded by text looks like this:\n\n\n    ```{r plot1, height=4, width=5, eval=FALSE, echo=TRUE}\n    data(airquality)\n    plot(airquality$Ozone ~ airquality$Wind)\n    ```\n\n::: callout-tip\nThe best resource for learning about R Markdown this by Yihui Xie, J. J. Allaire, and Garrett Grolemund:\n\n-   <https://bookdown.org/yihui/rmarkdown>\n\nThe R Markdown Cookbook by Yihui Xie, Christophe Dervieux, and Emily Riederer is really good too:\n\n-   <https://bookdown.org/yihui/rmarkdown-cookbook>\n\nThe authors of the 2nd book describe the motivation for the 2nd book as:\n\n> \"However, we have received comments from our readers and publisher that it would be beneficial to provide more practical and relatively short examples to show the interesting and useful usage of R Markdown, because it can be daunting to find out how to achieve a certain task from the aforementioned reference book (put another way, that book is too dry to read). As a result, this cookbook was born.\"\n:::\n\nBecause this is lecture is built in a `.qmd` file (which is very similar to a `.Rmd` file), let's demonstrate how this work. I am going to change `eval=FALSE` to `eval=TRUE`.\n\n\n\n::: {.cell height='4' width='5'}\n\n```{.r .cell-code}\ndata(airquality)\nplot(airquality$Ozone ~ airquality$Wind)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot2-1.png){width=672}\n:::\n:::\n\n\n\n:::{.callout-tip}\n\n### Questions\n1.  Why do we not see the back ticks \\`\\`\\` anymore in the code chunk above that made the plot?\n2.  What do you think we should do if we want to have the code executed, but we want to hide the code that made it?\n:::\n\nBefore we leave this section, I find that there is quite a bit of terminology to understand the magic behind `rmarkdown` that can be confusing, so let's break it down:\n\n-   [Pandoc](https://pandoc.org). Pandoc is a command line tool with no GUI that converts documents (e.g. from number of different markup formats to many other formats, such as .doc, .pdf etc). It is completely independent from R (but does come bundled with RStudio). If you donʻt have Rstudio installed, you will have to install `pandoc`.\n-   [Markdown](https://en.wikipedia.org/wiki/Markdown) (**markup language**). Markdown is a lightweight [markup language](https://en.wikipedia.org/wiki/Markup_language) with plain text formatting syntax designed so that it can be converted to HTML and many other formats. A markdown file is a plain text file that is typically given the extension `.md.` It is completely independent from R.\n-   R Markdown (**markup language**). R Markdown is an extension of the markdown syntax for weaving together text with R code. R Markdown files are plain text files that typically have the file extension `.Rmd`.\n-   [`rmarkdown`](https://CRAN.R-project.org/package=rmarkdown) (**R package**). The R package `rmarkdown` is a library that uses pandoc to process and convert text and R code written in `.Rmd` files into a number of different formats. This core function is `rmarkdown::render()`. **Note**: this package only deals with the markdown language. If the input file is e.g. `.Rhtml` or `.Rnw`, then you need to use `knitr` prior to calling pandoc (see below).\n\n::: callout-tip\nCheck out the R Markdown Quick Tour for more:\n\n-   <https://rmarkdown.rstudio.com/authoring_quick_tour.html>\n:::\n\n![Artwork by Allison Horst on RMarkdown](https://github.com/allisonhorst/stats-illustrations/raw/main/rstats-artwork/rmarkdown_rockstar.png){width=\"80%\"}\n\n### knitr\n\nOne of the alternative that has come up in recent times is something called `knitr`.\n\n- The `knitr` package for R takes a lot of these ideas of literate programming and updates and improves upon them.\n- `knitr` still uses R as its programming language, but it allows you to mix other programming languages in.\n- You can also use a variety of documentation languages now, such as LaTeX, markdown and HTML.\n- `knitr` was developed by Yihui Xie while he was a graduate student at Iowa State and it has become a very popular package for writing literate statistical programs.\n\nKnitr takes a plain text document with embedded code, executes the code and 'knits' the results back into the document.\n\nFor for example, it converts\n\n-   An R Markdown (`.Rmd)` file into a standard markdown file (`.md`)\n-   An `.Rnw` (Sweave) file into to `.tex` format.\n-   An `.Rhtml` file into to `.html`.\n\nThe core function is `knitr::knit()` and by default this will look at the input document and try and guess what type it is e.g. `Rnw`, `Rmd` etc.\n\nThis core function performs three roles:\n\n-   A **source parser**, which looks at the input document and detects which parts are code that the user wants to be evaluated.\n-   A **code evaluator**, which evaluates this code\n-   An **output renderer**, which writes the results of evaluation back to the document in a format which is interpretable by the raw output type. For instance, if the input file is an `.Rmd`, the output render marks up the output of code evaluation in `.md` format.\n\n\n\n::: {.cell layout-align=\"center\" preview='true'}\n::: {.cell-output-display}\n![Converting a Rmd file to many outputs using knitr and pandoc](https://d33wubrfki0l68.cloudfront.net/61d189fd9cdf955058415d3e1b28dd60e1bd7c9b/9791d/images/rmarkdownflow.png){fig-align='center' width=60%}\n:::\n:::\n\n\n\n\\[[Source](https://rmarkdown.rstudio.com/authoring_quick_tour.html)\\]\n\nAs seen in the figure above, from there pandoc is used to convert e.g. a `.md` file into many other types of file formats into a `.html`, etc.\n\nSo in summary:\n\n> \"R Markdown stands on the shoulders of knitr and Pandoc. The former executes the computer code embedded in Markdown, and converts R Markdown to Markdown. The latter renders Markdown to the output format you want (such as PDF, HTML, Word, and so on).\"\n\n\\[[Source](https://bookdown.org/yihui/rmarkdown/)\\]\n\n# In comes Quarto\n\nThe folks who developed R Markdown have moved on to a new package called [Quarto](https://quarto.org). Quarto contains many of the features of R Markdown, but importantly, is now separate from Rstudio. It is intentionally developed as a cross-platform, cross-language markup language. It works with R, Python, Julia, and Observable. And is rapidly catching on with the statistical coding community.\n\nQuarto can render output to many formats of documents including html, pdf, docx, md. It can also layout websites, presentations, or even books. It supports interactive apps such as Rshiny among other things.\n\nWe are going to learn using Quarto. Letʻs start by getting a simple webpage up. Conceptually, there are three tasks:\n\n1.  Create your quarto website on your computer\n2.  Make your website folder into a GitHub repo\n3.  Publish your website via GitHub\n\n## Create your website locally with Quarto\n\nIn this section, I am adding a bit more explanation to the Quarto quickstart guide  *up to and including Render*. If something is not clear, please consult <https://quarto.org/docs/websites/>\n\nThere are three main quarto commands we will use:\n\n-  `quarto create-project`: Make a website project template\n-  `quarto preview`: Take a look at what the webite will look like\n-  `quarto render`: Render your `qmd` to `html`\n\n\n### Make your website directory and template\n\nCreate your website (here called `mysite`) using the following command. It will make a directory of the same name and put the website contents within it.\n\n```{.bash filename=Terminal}\nquarto create-project mysite --type website\n```\n\nYou should now see the following files in your `mysite` directory (@fig-webshell):\n\n![Website files from the Terminal view](../../images/quarto_web_shell_terminal.png){#fig-webshell}\n\nThis is the bare-bones version of your website. Check that the code is functional by looking at a preview:\n\n```{.bash filename=Terminal}\nquarto preview\n```\n\nThis should open up a browser window showing a temporary file made by quarto by rendering your website files.\n\n::: callout-tip\n- `quarto preview` will refresh the preview every time you save your `index.qmd` (or any) website files. So itʻs a good idea to keep the preview open as you make edits and saves.\n- Check every edit, it is easier to debug in small steps.\n- Terminate `quarto preview` with `Control-c`\n:::\n\n### Render your website to html\n\nUse quarto to render your content to html, the format used by browsers.  First navigate into your website directory then render:\n\n```{.bash filename=Terminal}\ncd mysite\nquarto render\n```\nTake a look at the `mysite` contents after rendering, you should see a new directory `_site` (@fig-afterrender).  The html was rendered and put in there (go ahead, open up the files and check it out):\n\n![Website files after rendering](../../images/quarto_web_rendered.png){#fig-afterrender}\n\n### Personalize your content\n\nWhat is really nice is that you can personalize your website by simply editing the quarto markdown and yaml files.\n\n#### Web content goes in `.qmd`\n\nUsing any text editor, edit the `index.qmd` to personalize your website.\n\nThe first section of your `index.qmd` is the header. You can change the title and add additional header information, including any cover images and website templates.\n\nFor example this is what I have in my course website `index.qmd` header. Note that my cover image is in a folder called `images` within at the top level of my website directory. If you want to try this out substitute or remove the image line and change the twitter/github handles.\n\n```{.bash filename=index.qmd}\n---\ntitle: \"Welcome to Introduction to Data Science in R for Biologists!\"\nimage: images/mycoolimage.png\nabout:\n  template: jolla\n  links:\n    - icon: twitter\n      text: Twitter\n      href: https://twitter.com/mbutler808\n    - icon: github\n      text: Github\n      href: https://github.com/mbutler808\n---\n```\n\nYou should edit the body of your website as well. You simply edit the text.\n\nThe [quarto markdown page](https://quarto.org/docs/authoring/markdown-basics.html) has great examples showing how to format your content. Take a look at how to specify header sizes, lists, figures and tables.\n\nTry editing the `about.qmd` file as well. You will notice that this is another tab in your website. YOu can add more tabs by adding `.qmd` files.\n\nWith each addition, be sure to `quarto preview` your changes to make sure it works. When you are satisfied with your website, `quarto render` to render to html.\n\n::: {.callout-tip}\n-  When editing markdown, take care to note spaces and indents as they are interpreted for formatting.\n-  Indentations are really important for formatting lists.\n-  For example in a hyperlink, there is no space between the square brackets and parentheses. `[This is a cool link](http://mycoollink.com)`\n:::\n\n#### Website-wide settings go in `_quarto.yml`\n\nAll Quarto projects include a `_quarto.yml` configuration file that sets the global options that apply across the entire website.\n\n`YAML` started off as \"Yet Another Markup Language\" 😜. It is clean, clear, and widely used. You can edit your YAML to add options or change the format of your website. Take a look at your `_quarto.yml`.\n\nHere is an example for a simple website. `title:` is the parameter to set the websiteʻs title. `navbar:` sets the menu, in this case on the left sidebar. By default tabs will be named based on the names of the `.qmd` files, but you can set them manually. There are many [themes](https://quarto.org/docs/output-formats/html-themes.html) you can choose from too, check them out. For something different try `cyborg`.\n\n```{.bask filename=_quarto.yml}\nproject:\n  type: website\n\nwebsite:\n  title: \"today\"\n  navbar:\n    left:\n      - href: index.qmd\n        text: Home\n      - about.qmd\n\nformat:\n  html:\n    theme: minty\n    css: styles.css\n    toc: true\n```\n\nAgain, after saving your edits, `quarto preview` to see the effects.  When you are satisfied with your website, `quarto render` to render to html.\n\n```{.bash filename=Terminal}\nquarto render\n```\n\n##  Publishing your website to GitHub\n\nYou can publish your website for free on GitHub, which is a very cool feature. In his section I am adding a bit more explanation to the Quarto quickstart guide *up to and including Render to docs* <https://quarto.org/docs/publishing/github-pages.html>. I describe the most important stpes below:\n\n1.  Render your html to a `docs` directory\n2.  Supress GitHub `jekyll` html processing by creating a `.nojekyll` file\n3.  Make your website directory into a repo, and link it to a GitHub repo\n4.  Edit the GitHub repo settings to publish your website\n\n### Render your html to `docs`\n\nEdit the `_quarto.yml` file at the top level of your website to send output to `docs`.  This will also create the `docs` folder.\n\n```{.bash filename=_quarto.yml}\nproject:\n  type: website\n  output-dir: docs\n```\n\nThe next time you `quarto render` it will create `docs` and all of its contents.\n\n### Supress GitHub `jekyll` html processing\n\nGitHub uses a sofware called `jekyll` to render html from markdown. Since weʻre using `quarto`, we want to supress that.  Create an empty file named `.nojekyll` at the top level of your website directory to supress default `jekyll` processing.\n\n+-----------+---------------------------------+\n| Mac/Linux/| ``` {.bash filename=\"Terminal\"} |\n| Git-bash  | touch .nojekyll                 |\n|           | ```                             |\n+-----------+---------------------------------+\n| Windows   | ``` {.bash filename=\"CMD\"}      |\n|           | copy NUL .nojekyll              |\n|           | ```                             |\n+-----------+---------------------------------+\n\n### Setup a GitHub repo for your website\n\n1.  Turn your website directory into a git repo:\n\n```{.bash filename=Terminal}\ngit init\ngit add .\ngit commit -m \"first commit\"\n```\n\n2.  Create a GitHub repo by the same name\n\nFor example, mine might be `github.com/mbutler808/mysite`.\n\n3.  Link your local repo and GitHub repo together\n\nIf you forgot how to do this, [go back here](https://mbutler808.github.io/rclass/posts/2023-01-24-intro-git-github/#make-a-github-repo-started-from-your-local-files)\n\n4.  Check your GitHub repo. Are your files there?\n\n### GitHub settings to serve your webpage\n\nAlmost there! A couple more steps.\n\nFrom your GitHub repo, click on `Settings` in the top menu, and `Pages` on the left menu.\n\nYour website should deploy from branch.  Under `Select branch` choose `main` and under `Select folder` choose `docs`.\n\nAfter clicking `save` GitHub will trigger a deployment of your website. After a few minutes, your URL will appear near the top at `Your site is live at...`:\n\n![](../../images/github_pages.png)\n\nCongratulations! ⚡️ Your website is now live 🎉🎊😍\n\n## Now make more changes!\n\n::: {.callout-tip}\n# The Quarto Workflow is\n-  Edit the content in .qmd\n-  From the Command line:\n    -  `quarto preview` to check that edits are correct\n    -  `quarto render` to render `.qmd` to `.html`\n    -   `git add .`\n    -   `git commit -m \"message\"`\n    -   `git push origin main`\n-  Check your website (this may take a beat)\n:::\n\n## For fun\n\nYou can have fun with emoji! Guangchuang Yu wrote the package `emojifont` (this is the same person who wrote the widely used `ggtree` package) and now you can bring your emoji out of your phone and into your quarto documents! Install the R package `emojifont`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"emojifont\")\n```\n:::\n\n\n\nThen anywhere you want an emoji in the markdown file, you just type:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n`r emojifont::emoji('palm_tree')`\n```\n:::\n\n\n🌴\n\nOr if you want several, just line them up:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n`r emojifont::emoji('balloon')``r emojifont::emoji('tada')``r emojifont::emoji('smiley')`\n```\n:::\n\n\n🎈🎉😃\n\nThere is a handy cheat sheet of emoji names here <https://gist.github.com/rxaviers/7360908>\n\n## Final tips\n\n::: {.callout-tip}\n-  **Always always** `quarto render` before you push up your changes to GitHub!\n-  If your changes are not appearing, try `quarto preview` and check that your changes appear in the preview. Then `quarto render` before you use git to add, commit, and push\n-  Note: It can take a few minutes to render on GitHub before your changes appear on your website\n:::\n\n**Please see [Stephanie Hicksʻ lecture](https://www.stephaniehicks.com/jhustatcomputing2022/posts/2022-09-01-literate-programming/#create-and-knit-your-first-r-markdown-document)** for more literate programming examples and tips.\n\n\n# Post-lecture materials\n\n### Final Questions\n\nHere are some post-lecture questions to help you think about the material discussed.\n\n::: questions\n### Questions\n\n1.  What is literate programming?\n\n2.  What was the first literate statistical programming tool to weave together a statistical language (R) with a markup language (LaTeX)?\n\n3.  What is `knitr` and how is different than other literate statistical programming tools?\n\n4.  Where can you find a list of other commands that help make your code writing more efficient when using Quarto?\n:::\n\n### Additional Resources\n\n::: callout-tip\n-   [Literate statistical practice](http://www.r-project.org/conferences/DSC-2001/Proceedings/Rossini.pdf))\n-   The introduction of Sweave by Friedrich Leisch in [2001 pg. 28](https://cran.r-project.org/doc/Rnews/Rnews_2002-3.pdf)\n-   [RMarkdown Tips and Tricks](https://indrajeetpatil.github.io/RmarkdownTips/) by Indrajeet Patil\n-   <https://bookdown.org/yihui/rmarkdown>\n-   <https://bookdown.org/yihui/rmarkdown-cookbook>\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}