{
  "hash": "19db94e4633e2c9b8927b007625e081e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"All about trees\"\nauthor:\n  - name: Marguerite Butler\n    url: https://butlerlab.org\n    affiliation: School of Life Sciences, University of Hawaii\n    affiliation_url: https://manoa.hawaii.edu/lifesciences/\ndescription: \"Getting trees in to R and understanding their formats\"\ndate: 2025-04-17\ncategories: [module 7, week 13, phylogenetic trees, nexus, fasta, newick, beast, iqtree]\nbibliography: ../refs.bib\n---\n\n\n\n### Acknowledgements\n\nReferences for this Material:\n\n- This was adapted from the chapter \"All about trees\" written by Brian OʻMeara from the manual \"Getting started in R for Phylogenetics\" by Marguerite A. Butler, Brian C. O’Meara, Jason Pienaar, Michael Alfaro, Graham Slater, and Todd Oakley\n\n\n# Learning objectives\n\n::: callout-note\n# Learning Objectives\n\n**At the end of this lesson you will:**\n\n-  Understand information content of phylogenetically structured data\n-  Understand particular R tree formats in ape, phylobase, and ouch\n-  Be able to hand-make trees\n-  Be able to import trees from nexus, newick, and other major formats in use today\n-  Be able to convert trees  from one format to another\n-   Be able to perform basic tree manipulations\n\n:::\n\n\n:::{.callout-note}\n# R packages you will need\n- `ape`\n- `ouch`\n- `phylobase`\n- `treeio`\n- `ggtree`\n- and `BiocManager` from the Bioconductor project\nTo install treeio and ggtree: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## You will probably have to install BiocManager \nif (!requireNamespace(\"BiocManager\", quietly=TRUE))\n    install.packages(\"BiocManager\")\n## BiocManager::install(\"BiocUpgrade\") ## you may need this\nBiocManager::install(\"treeio\")\nBiocManager::install(\"ggtree\")\n```\n:::\n\n\n:::\n\n# Tree vocabulary\n\nIn nature, a tree is a large perennial woody plant. It has roots, a main trunk, branches, and leaves.\nIn graph theory, a tree is a network where there is only one path between any two nodes (in other words, a network with no loops or cycles).\n\nIn phylogenetics, we use ideas and terminology from both graph theory and nature: \n\n- **Terminal taxa** are also known as **leaves**, **terminals**, **OTU**s (\"**Operational Taxonomic Units**\"), **tips**, or simply **taxa**. \n- **Branches** are also called **edges** or __internodes__. \n- **Internal** nodes (places where two or more branches connect) are also known as __vertices__ and sometimes simply **nodes** (technically, leaves are also nodes). \n- A **rooted** tree has one node designated as the **root**, and all other nodes are descended from this root. Traditionally, the root node has at least two descendants; it may also have a subtending branch (an ancestral branch).\n- An **unrooted** tree has no root designated, making the oldest ancestor ambiguous.  \n- A tree where every internal node has two and only two descendants is known as a **binary** or **bifurcating** tree. \n- A tree where at least one internal node has more than two descendants is said to be **multifurcating**; such a node is a **polytomy**. \n- Trees in phylogenetics generally represent either **species trees** (a history of the splitting of interbreeding populations) or **gene trees** (a history of the coalescence of gene copies). In both cases, it is generally believed that the true process is bifurcating, so that each split results in two descendants. Thus, polytomies on trees are generally taken as representing _uncertainty in the relationships_. However in the case of adaptive radiations, and other __rapidly speciating processes__, the true process may be approaching multifurcation.\n-  __Branches__ may have **lengths**; these lengths may correspond to _time_, _amount of change_ (e.g., mutations) in some set of characters, _number of speciation events_, or some other measure. \n-  A tree where all __branch lengths__ from root to tips are equal is known as an **ultrametric** tree. \n-  A tree without branch lengths is known as a **topology**. \n-  A **monophyletic clade** is an ancestor and all its descendants. \n-  Any **edge** or __branch__ corresponds to a **bipartition**: _a division of the tree into two parts connected by that edge_ (if a root were inserted on the edge, then each of those parts would be a clade).\n\n# Newick format\n\nA very basic tree format is __Newick__ (`.tree`), named after the [seafood restaurant](https://www.newicks.com) in New Hampshire where it was formalized in 1986 by James Archie, William H. E. Day, Joseph Felsenstein, Wayne Maddison, Christopher Meacham, F. James Rohlf, and David Swofford - the second meeting was at the restaurant; it is also called New Hampshire format for that reason). It is widely used in graph theory as well. It is simply a string. Each nesting on the tree corresponds to a parenthetical statement. For example, for this tree (drawn brute-force):\n\n![Photo from the Newick restaurant [home page](https://www.newicks.com)](http://www.newicks.com/Web2014/Ed7.1.jpg)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrequire(ape)\nrequire(ouch)\nrequire(phylobase)\n# simpletree <- rcoal(length(LETTERS[1:7]), rooted = TRUE, tip.label = LETTERS[1:7], br = \"coalescent\")\n\nsimpletree<-structure(list(\n    edge = matrix(\n      c(8, 9, 10, 10, 9, 11, 11, 8, 12, 12, 13, 13, \n        9, 10, 1, 2, 11, 3, 4, 12, 5, 13, 6, 7),\n      nrow=12L), \n    tip.label = c(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"), \n    Nnode = 6L\n  ), \n    class = \"phylo\")\nplot(simpletree,no.margin=TRUE)\n```\n\n::: {.cell-output-display}\n![A simple tree](index_files/figure-html/fig-simpletree-1.png){#fig-simpletree width=672}\n:::\n:::\n\n\n\nTaxa G and F form a __clade__, as do G, F, and E, as do A and B, and so forth. Thus, to create a Newick string, just go down the tree, nesting as you go:\n\n__(G,F)__\n\n__((G,F),E)__\n\nother side:\n\n__(A,B)__\n\n__(C,D)__\n\n__((A,B),(C,D))__\n\nall together:\n\n__(((G,F),E),((A,B),(C,D)))__\n\nAnd that's it (it will be clearer in the lecture)\nIf a tree has branch lengths, these are entered following the descendant clade. For example, if the branch leading to G has length 1.0, we would write `G:1.0` rather than just `G`. If the tree is ultrametric, and the branch below the common ancestor of G and F is of length `1.1`, and the branch below that of length `3.5`, we could write (note: a semicolon `;` ends the newick string):\n\n`((G:1.0,F:1.0):1.1,E:2.1):3.5;`\n\nOne aspect of the Newick (and most tree) representation is that there are many ways of representing the same tree. At every node, one can rotate the descendant branches (switching the left and right positions) and get the same tree (for example, imagine switching the G and E labels). Thus, the Newick strings\n\n__((G,F),E)__\n\nand\n\n__((F,G),E)__\n\ndescribe the same trees, though it might not be easy to tell at first glance. This is generally an issue for any tree representation. While Newick strings are compact and easy to understand, they also don't lend themselves to easy _tree traversal_ (moving up or down the tree). In most analysis software that performs computations along trees, some other representation is used.\n\n\n# NEXUS \n\nThe NEXUS format (`*.nex` or `*.nxs`) is widely used in bioinformatics. Many phylogenetics programs use nexus format including $PAUP^*$, MrBayes, Mesquite, MacClade, etc., and many more can read nexus.  \n\nOne of the key features is that it is very _extensible_ with information in __blocks__. We will only be concerned with blocks of DNA sequence data, but any type of information can be added.  This flexibilityy, however, can be a curse when you encounter new extensions to the format that your code did not anticipate. However, for the most part we will be using packages that read in nexus so you can reasonable hope that someone has dealt with the headache for you. \n\nNexus files are often used as inputs to phylogenetic programs. In that case, they typically only have a TAXA block and a DATA block. In our IQTREE2 example we also had a partition file in nexus format. But they can also return the output of the phylogenetic reconstruction, in that case they will have a TREES block as well. \n\n### Nexus syntax:\n\nA NEXUS file begins with `#NEXUS` on the first line. \n\n__Blocks__ of information follow, tyically on multiple lines, enclosed by a __BEGIN blockname;__ and __END;__ (Key words are case-insensitive).\n\nComments are enclosed by square brackets `[comments]`\n\nTypical blocks:\n\n-  __TAXA__: The taxa block contains the names of the taxa.\n-  __DATA__: The data block contains a data matrix (we will use DNA sequences).\n-  __TREES__: The trees block contains one or more phylogenetic trees in newick format.\n\nFor example [From Wikipedia](https://en.wikipedia.org/wiki/Nexus_file):\n\n```{.bash}\n#NEXUS\nBegin TAXA;\n  Dimensions ntax=4;\n  TaxLabels SpaceDog SpaceCat SpaceOrc SpaceElf;\nEnd;\n\nBegin data;\n  Dimensions nchar=15;\n  Format datatype=dna missing=? gap=- matchchar=.;\n  Matrix\n    [ When a position is a \"matchchar\", it means that it is the same as the first entry at the same position. ]\n    SpaceDog   atgctagctagctcg\n    SpaceCat   ......??...-.a.\n    SpaceOrc   ...t.......-.g. [ same as atgttagctag-tgg ]\n    SpaceElf   ...t.......-.a.           \n  ;\nEnd;\n\nBEGIN TREES;\n  Tree tree1 = (((SpaceDog,SpaceCat),SpaceOrc,SpaceElf));\nEND; \n```  \n\n\n# `phylo` (`ape` 5.0 or above)\n\nThe [`ape` package](http://ape-package.ird.fr) [@Paradis:2019] uses a different representation of trees. It uses R `structures`, `lists`, `matrices`, and `vectors` to store a tree. Each node in the tree receives a number. For example, here is the tree from before in `ape` format. \n\nHere is `simpletree` with the node numbers printed. It is printed with the following commands:\n\n\n\n::: {.cell caption='A simple tree with ape\\'s numbering of nodes included'}\n\n```{.r .cell-code}\nplot(simpletree,no.margin=TRUE)\nnodelabels()\ntiplabels()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/simpletreeplotnodelabels-1.png){width=672}\n:::\n:::\n\n\n\nFor a tree with __N tips__, the tips have __numbers 1...N__ and the __nodes__ have __numbers greater than N__ (this is in contrast to how this was done in early (<1.9) versions of `ape`). These numbers  are used to store information about the tree's structure. \n\nTo do this, a matrix is created, with height corresponding to the number of internal and terminal nodes and width 2. The first column of the matrix has the node at the beginning of the branch, the second has the node at the end of the branch. For example, for our simple tree, this matrix is\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsimpletree$edge\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      [,1] [,2]\n [1,]    8    9\n [2,]    9   10\n [3,]   10    1\n [4,]   10    2\n [5,]    9   11\n [6,]   11    3\n [7,]   11    4\n [8,]    8   12\n [9,]   12    5\n[10,]   12   13\n[11,]   13    6\n[12,]   13    7\n```\n\n\n:::\n:::\n\n\nThis alone is enough for a basic topology. However, it might be nice to know what the taxa actually are, rather than just numbers. To do this, a character vector with as many entries as the number of tips is used. In the example tree, this is\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsimpletree$tip.label\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\"\n```\n\n\n:::\n:::\n\n\nIt's possible that internal nodes have labels, too (for example, the most recent common ancestor of a set of birds might be labeled Aves). If so, an optional `node.label` is used.\nIf branch lengths are known, they are included as the numeric vector `edge.length`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsimpletree$edge.length\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 1.5 1.0 0.5 0.5 1.0 0.5 0.5 2.0 1.0 0.5 0.5 0.5\n```\n\n\n:::\n:::\n\n\nFinally, there are a few other elements (`Nnode`, the number of internal nodes; `class=phylo`) to set the class. To dump the the internal representation of phylo tree to screen, you can use `unclass()` which strips the class attribute (the S4 analog is `attributes`): \n\n\n::: {.cell}\n\n```{.r .cell-code}\nunclass(simpletree)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$edge\n      [,1] [,2]\n [1,]    8    9\n [2,]    9   10\n [3,]   10    1\n [4,]   10    2\n [5,]    9   11\n [6,]   11    3\n [7,]   11    4\n [8,]    8   12\n [9,]   12    5\n[10,]   12   13\n[11,]   13    6\n[12,]   13    7\n\n$tip.label\n[1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\"\n\n$Nnode\n[1] 6\n\n$edge.length\n [1] 1.5 1.0 0.5 0.5 1.0 0.5 0.5 2.0 1.0 0.5 0.5 0.5\n```\n\n\n:::\n:::\n\n\n`phylo` trees are S3 objects. We'll be learning more about them later, but an important thing to know is that you directly access any element of them by using the `$` operator (as was done above). Optional elements, or even elements of your own devising, can be added to them, too, using the same operator.\n\n# ouchtree (`ouch` version 2.0 or above)\n\n`OUCH` [@Butler:2004,@King:2022] uses a different tree structure than does `ape`. First, `OUCH`'s is an S4 class, rather than S3. There are several differences between them, which you'll learn later. There are two main distinctions that will be important now. It helps to have a metaphor: think of a car. The S3 representation of a car is all the parts, neatly disassembled and laid out. The S4 representation of a car is a closed box. With S3, you can look at and manipulate any part of the car directly and manipulate it (using the `$` operator). You could check the amount of gas in the tank by directly accessing the gas. With S4, you should use a method, if one exists, to access and manipulate elements. For example, you could check the gas in the tank using the fuel gauge, if the fuel gauge method exists and works properly. S3 objects can be built up piecemeal, and there aren't built-in checks to make sure that everything is correct: if you forget to add a wheel element to the S3 char, you won't know there's a problem until some function tries to access it and fails. S4 objects are instantiated once, when you pass them all the initialization info they need (they often have defaults, and often have internal consistency checks).\n`OUCH` uses the `ouchtree` class as a basic tree class, then derives other classes from this for storing information on analyses. \nThe `ouchtree` class is:\n\n`setClass(`\n\n`  'ouchtree',`\n\n`  representation=representation(`\n\n`    nnodes = 'integer',`\n\n`    nodes = 'character',`\n\n`    ancestors = 'character',`\n\n`    nodelabels = 'character',`\n\n`    times = 'numeric',`\n\n`    root = 'integer',`\n\n`    nterm = 'integer',`\n\n`    term = 'integer',`\n\n`    anc.numbers = 'integer',`\n\n`    lineages = 'list',`\n\n`    epochs = 'list',`\n\n`    branch.times = 'matrix',`\n\n`    depth = 'numeric'`\n\n`  )`\n\n`)`\n\nAt first glance, it looks like creating a new `ouchtree` object will be a lot of work: there are 13 different elements, some of them vectors, built in the class. However, with S4 objects, the beauty of constructors comes into play. The constructor function for a new `ouchtree` is just the function\n\n`ouchtree(nodes, ancestors, times, labels = as.character(nodes))`\n\n__The `ouchtree` function only has four arguments__, one of them optional. Using the function and these elements, all the other elements of the class are initialized.\n\n- The first element is `nodes`, a character vector of node ids (including internal nodes). Unlike `ape`, the leaves do not need to have smaller ids than internal nodes. \n- The second argument is `ancestors`, a character vector of node ids of the ancestors for the nodes in the `nodes` vector. The `nodes` and `ancestors` vectors almost correspond to the second and first columns of the `ape` `edge` matrix, respectively, with the exception that `ouchtree` includes the root node with an ancestor of `NA`. \n- The third element, `times`, represents the height of each node from the root. Remember that `ape`'s `edge.length` vector has the length of the branch subtending each node; instead, `ouchtree` has the sum of the lengths of all branches connecting a given node to the root. Again, the root node is included in `ouchtree` (with height 0) but not in ape. \n- The fourth argument, `labels`, is a vector of labels for both tips and internal nodes. If internal nodes do not have names, they get a label of `<NA>`.\n\n\n\n\n\n\nFor example, our example tree, when converted to ouchtree format, is\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattributes(simpletreeouch)$nodes\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"1\"  \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\" \"11\" \"12\" \"13\"\n```\n\n\n:::\n\n```{.r .cell-code}\nattributes(simpletreeouch)$ancestors\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] NA  \"3\" \"1\" \"6\" \"6\" \"1\" \"2\" \"2\" \"3\" \"4\" \"4\" \"5\" \"5\"\n```\n\n\n:::\n\n```{.r .cell-code}\nattributes(simpletreeouch)$times\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 0.0000000 0.8333333 0.6666667 0.8333333 0.8333333 0.5000000 1.0000000\n [8] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000\n```\n\n\n:::\n\n```{.r .cell-code}\nattributes(simpletreeouch)$nodelabels\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"\"  \"\"  \"\"  \"\"  \"\"  \"\"  \"G\" \"F\" \"E\" \"D\" \"C\" \"B\" \"A\"\n```\n\n\n:::\n:::\n\n\nOne other element of `ouchtree`, created on initialization, is a matrix showing shared amount of time on a tree between two tips (which may be the same tip). This, multiplied by a rate parameter, becomes a variance-covariance matrix under a Brownian motion model, which we'll be discussing in the course.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattributes(simpletreeouch)$branch.times\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]\n[1,] 1.0000000 0.8333333 0.6666667 0.0000000 0.0000000 0.0000000 0.0000000\n[2,] 0.8333333 1.0000000 0.6666667 0.0000000 0.0000000 0.0000000 0.0000000\n[3,] 0.6666667 0.6666667 1.0000000 0.0000000 0.0000000 0.0000000 0.0000000\n[4,] 0.0000000 0.0000000 0.0000000 1.0000000 0.8333333 0.5000000 0.5000000\n[5,] 0.0000000 0.0000000 0.0000000 0.8333333 1.0000000 0.5000000 0.5000000\n[6,] 0.0000000 0.0000000 0.0000000 0.5000000 0.5000000 1.0000000 0.8333333\n[7,] 0.0000000 0.0000000 0.0000000 0.5000000 0.5000000 0.8333333 1.0000000\n```\n\n\n:::\n:::\n\n\n\nThe entire content of the `simpletreeouch` object can be dumped to screen using the following command (not executed here to save paper):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattributes(simpletreeouch)\n```\n:::\n\n\n\n# A note about node numbering\n\n### `phylo` (`ape`) node numbers and order\n\nIn `ape` the node numbering is implied by the order of rows in the `$egde` matrix. Letʻs make a simple example, a tree with three tips:\n\nRemember in the edge matrix, the first column is the ancestral node (parent), and the second column is the node number.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntree <- rtree(3)\ntree$edge\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]    4    5\n[2,]    5    1\n[3,]    5    2\n[4,]    4    3\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(tree)\nnodelabels()\ntiplabels(adj=c(2))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nThe nodes are listed in a rightward tree traversal order. \n\n### `treedata` (`ggtree`) node numbers and order\n\nIn the `treedata` object used by `ggtree`, `treeio`, and `tidytree`, the node numbers are the same (referring to the same nodes and ancestors), but the order that they are stored in is different. _(Also note that `ggtree` plots trees ladderized by default)_.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(treeio)\nlibrary(ggtree)\ntd <- as.treedata(tree)\ntd %>% as_tibble %>% as.data.frame\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  parent node branch.length label\n1      5    1     0.1859978    t2\n2      5    2     0.5956352    t1\n3      4    3     0.2516685    t3\n4      4    4            NA  <NA>\n5      4    5     0.2594244  <NA>\n```\n\n\n:::\n\n```{.r .cell-code}\nggtree(td) + \n     geom_tiplab(hjust=-1) +\n     geom_label(aes(label=node))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\nCompare `tree$edge` vs `treedata`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntree$edge\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]    4    5\n[2,]    5    1\n[3,]    5    2\n[4,]    4    3\n```\n\n\n:::\n\n```{.r .cell-code}\ntd %>% as_tibble %>% as.data.frame\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  parent node branch.length label\n1      5    1     0.1859978    t2\n2      5    2     0.5956352    t1\n3      4    3     0.2516685    t3\n4      4    4            NA  <NA>\n5      4    5     0.2594244  <NA>\n```\n\n\n:::\n:::\n\n\n\n::: callout-warning\n# Combining `phylo` with data and other tree formats\n\n-  **It is important** when combining `phylo` and `treedata` objects to always **match by `node`** (or when only tips are involved, **by `label`**).  \n\n-  If one simply pastes matrices together (e.g., `cbind`), the information will be connected to the wrong node! \n\nWeʻll cover this in more detail in the next section.\n:::",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}